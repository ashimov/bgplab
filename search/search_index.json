{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ipSpace.net BGP Configuration Labs The following series of hands-on labs will help you master numerous aspects of EBGP, IBGP, and BGP routing policy configuration on a platform of your choice 1 . You can already do the following labs: Basic BGP Setup Establish a BGP session Connect to two upstream providers Advertise your IPv4 address space Simple End-User BGP Routing Policies Use BGP weights to prefer one of the upstream providers Upcoming Labs Basic BGP Setup (Optional) Protect a BGP session with MD5 password, TCP-AO password, and TTL check (Advanced) Run EBGP over unnumbered IPv4 interfaces or over IPv6 link-local addresses Simple End-User BGP Routing Policies Prevent route leaking between upstream providers with AS-path filters Minimize the size of your BGP table with inbound filters Redistribute IGP information into BGP and use BGP summarization to minimize the number of BGP advertisements Perform simple load balancing across parallel links and across upstream provider Multiprotocol BGP Run BGP with IPv6 (Advanced) Run IPv4 and IPv6 over the same BGP session Simple Transit Network Setup Use IBGP to transport BGP information across your network Use BGP route reflectors to reduce the number of IBGP sessions (Advanced) Use a hierarchy of route reflectors Networks with Multiple BGP Speakers Use multiple WAN edge routers to connect to upstream ISPs Use BGP local preference to prefer one of the upstream providers Use more complex BGP local preference setup to prefer direct connectivity with customers of upstream ISPs Use MED to influence route selection in an upstream ISP Use AS-path prepending to influence route selection across multiple upstream ISPs Complex BGP Route Policies Use BGP communities to influence route selection in upstream ISPs Build a transit autonomous system using BGP communities to change routing policies Some assembly required: while the Cumulus Linux VMs/containers that are used for external BGP speakers are easy to download, you'll have to build a Vagrant box or install a Docker container image for your platform. \u21a9","title":"Overview"},{"location":"#ipspacenet-bgp-configuration-labs","text":"The following series of hands-on labs will help you master numerous aspects of EBGP, IBGP, and BGP routing policy configuration on a platform of your choice 1 . You can already do the following labs:","title":"ipSpace.net BGP Configuration Labs"},{"location":"#basic-bgp-setup","text":"Establish a BGP session Connect to two upstream providers Advertise your IPv4 address space","title":"Basic BGP Setup"},{"location":"#simple-end-user-bgp-routing-policies","text":"Use BGP weights to prefer one of the upstream providers","title":"Simple End-User BGP Routing Policies"},{"location":"#upcoming-labs","text":"Basic BGP Setup (Optional) Protect a BGP session with MD5 password, TCP-AO password, and TTL check (Advanced) Run EBGP over unnumbered IPv4 interfaces or over IPv6 link-local addresses Simple End-User BGP Routing Policies Prevent route leaking between upstream providers with AS-path filters Minimize the size of your BGP table with inbound filters Redistribute IGP information into BGP and use BGP summarization to minimize the number of BGP advertisements Perform simple load balancing across parallel links and across upstream provider Multiprotocol BGP Run BGP with IPv6 (Advanced) Run IPv4 and IPv6 over the same BGP session Simple Transit Network Setup Use IBGP to transport BGP information across your network Use BGP route reflectors to reduce the number of IBGP sessions (Advanced) Use a hierarchy of route reflectors Networks with Multiple BGP Speakers Use multiple WAN edge routers to connect to upstream ISPs Use BGP local preference to prefer one of the upstream providers Use more complex BGP local preference setup to prefer direct connectivity with customers of upstream ISPs Use MED to influence route selection in an upstream ISP Use AS-path prepending to influence route selection across multiple upstream ISPs Complex BGP Route Policies Use BGP communities to influence route selection in upstream ISPs Build a transit autonomous system using BGP communities to change routing policies Some assembly required: while the Cumulus Linux VMs/containers that are used for external BGP speakers are easy to download, you'll have to build a Vagrant box or install a Docker container image for your platform. \u21a9","title":"Upcoming Labs"},{"location":"1-setup/","text":"Software Installation and Lab Setup TBD","title":"Installation and Setup"},{"location":"1-setup/#software-installation-and-lab-setup","text":"TBD","title":"Software Installation and Lab Setup"},{"location":"2-manual/","text":"Manual Setup You don't have to use netlab to create your labs; you can build them with any other tool, or use physical devices or a mix of physical- and virtual devices. Lab instructions contain wiring tables that you can use to set up your infrastructure, and I tried to use the same setup for as many labs as possible to reduce your hassle. All labs rely on preconfigured external BGP routers using Cumulus Linux. They are automatically configured by netlab ; if you decide to use some other infrastructure you'll have to configure them yourself. Lab directories in the GitHub repository contain config subdirectory with /etc/frr/frr.conf and /etc/network/interfaces files. I would use git clone to clone the GitHub repository to the local disk; GitHub also offers ZIP download. If you prefer point-and-click approach feel free to download individual files from the GitHub web UI. Finally, you could use curl on Cumulus Linux to pull them into the devices straight from GitHub. Whatever you decide to do, in the end you have to get the configuration files to individual Cumulus Linux devices, reconfigure interfaces with ifreload -a , and restart FRR. Most labs also configure IP addressing and basic BGP setup on your devices. Without netlab you'll have to start from scratch; the information you need is in the lab instructions but it might become tedious. Long story short: Use netlab \ud83d\ude09","title":"Manual Setup"},{"location":"2-manual/#manual-setup","text":"You don't have to use netlab to create your labs; you can build them with any other tool, or use physical devices or a mix of physical- and virtual devices. Lab instructions contain wiring tables that you can use to set up your infrastructure, and I tried to use the same setup for as many labs as possible to reduce your hassle. All labs rely on preconfigured external BGP routers using Cumulus Linux. They are automatically configured by netlab ; if you decide to use some other infrastructure you'll have to configure them yourself. Lab directories in the GitHub repository contain config subdirectory with /etc/frr/frr.conf and /etc/network/interfaces files. I would use git clone to clone the GitHub repository to the local disk; GitHub also offers ZIP download. If you prefer point-and-click approach feel free to download individual files from the GitHub web UI. Finally, you could use curl on Cumulus Linux to pull them into the devices straight from GitHub. Whatever you decide to do, in the end you have to get the configuration files to individual Cumulus Linux devices, reconfigure interfaces with ifreload -a , and restart FRR. Most labs also configure IP addressing and basic BGP setup on your devices. Without netlab you'll have to start from scratch; the information you need is in the lab instructions but it might become tedious. Long story short: Use netlab \ud83d\ude09","title":"Manual Setup"},{"location":"basic/1-session/","text":"Configure a Single EBGP Session We'll start with the simplest possible scenario: configure an EBGP session between your device and an upstream router (X1). Note: if you're creating your lab infrastructure manually , it might be better to skip this exercise and go straight to configuring two uplinks . Start the Lab Assuming you already set up your lab infrastructure : Change directory to basic/1-session Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify that the IP addresses are configured on all its interfaces. Configuration Tasks Configure an EBGP session using the following parameters: neighbor IP address neighbor AS number 10.1.0.2 65100 You might also want to configure neighbor description and BGP session logging to get an information message when the BGP session is established. Verification Check the state of the BGP session with a command similar to show ip bgp summary . This is a printout taken from Arista EOS: rtr#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 10.1.0.2 4 65100 33 37 0 0 00:01:25 Estab 2 2 Finally, use a command similar to show ip bgp to verify that your router received two prefixes from the EBGP neighbor: the default route and the loopback remote interface (10.0.0.10/32). This is how the printout looks like on Arista EOS: rtr#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 0 65100 i * > 10.0.0.10/32 10.1.0.2 0 - 100 0 65100 i Next: Connect with the second upstream provider and advertise your address space. Reference Information You might find the following information useful if you're not using netlab to build the lab: Lab Wiring Link Name Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr","title":"Configure a Single EBGP Session"},{"location":"basic/1-session/#configure-a-single-ebgp-session","text":"We'll start with the simplest possible scenario: configure an EBGP session between your device and an upstream router (X1). Note: if you're creating your lab infrastructure manually , it might be better to skip this exercise and go straight to configuring two uplinks .","title":"Configure a Single EBGP Session"},{"location":"basic/1-session/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/1-session Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify that the IP addresses are configured on all its interfaces.","title":"Start the Lab"},{"location":"basic/1-session/#configuration-tasks","text":"Configure an EBGP session using the following parameters: neighbor IP address neighbor AS number 10.1.0.2 65100 You might also want to configure neighbor description and BGP session logging to get an information message when the BGP session is established.","title":"Configuration Tasks"},{"location":"basic/1-session/#verification","text":"Check the state of the BGP session with a command similar to show ip bgp summary . This is a printout taken from Arista EOS: rtr#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 10.1.0.2 4 65100 33 37 0 0 00:01:25 Estab 2 2 Finally, use a command similar to show ip bgp to verify that your router received two prefixes from the EBGP neighbor: the default route and the loopback remote interface (10.0.0.10/32). This is how the printout looks like on Arista EOS: rtr#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 0 65100 i * > 10.0.0.10/32 10.1.0.2 0 - 100 0 65100 i Next: Connect with the second upstream provider and advertise your address space.","title":"Verification"},{"location":"basic/1-session/#reference-information","text":"You might find the following information useful if you're not using netlab to build the lab:","title":"Reference Information"},{"location":"basic/1-session/#lab-wiring","text":"Link Name Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1","title":"Lab Wiring"},{"location":"basic/1-session/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr","title":"Lab Addressing"},{"location":"basic/2-multihomed/","text":"Configure Multiple EBGP Sessions Now that you know how to configure an EBGP session let's move on to a more realistic scenario: you have a site with a WAN edge router connected to two upstream ISPs, and you're running EBGP with them. The routers in your lab use the following BGP AS numbers. Each upstream router advertises its loopback, another IPv4 prefix, and the default route. Node/ASN Router ID BGP RR Advertised prefixes AS65000 rtr 10.0.0.1 AS65100 x1 10.0.0.10 10.0.0.10/32 192.168.100.0/24 AS65101 x2 10.0.0.11 10.0.0.11/32 192.168.101.0/24 Start the Lab Assuming you already set up your lab infrastructure : Change directory to basic/2-multihomed Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify that the IP addresses are configured on all its interfaces. Configuration Tasks Configure EBGP sessions using the following parameters: Node Neighbor Neighbor IPv4 Neighbor AS Local AS rtr x1 10.1.0.2 65100 rtr x2 10.1.0.6 65101 You might also want to configure neighbor description and BGP session logging to get an information message when the BGP session is established. Verification Check the state of the BGP session with a command similar to show ip bgp summary . This is a printout taken from Arista EOS: rtr#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 10.1.0.2 4 65100 11 10 0 0 00:00:17 Estab 3 3 10.1.0.6 4 65101 9 8 0 0 00:00:12 Estab 3 3 Finally, use a command similar to show ip bgp to verify that your router received three prefixes from each EBGP neighbor: the IPv4 prefix configured on the remote loopback interface, another IPv4 prefix, and the default route. This is how the printout looks like on Arista EOS: rtr#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 0 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 0 65101 i * > 10.0.0.10/32 10.1.0.2 0 - 100 0 65100 i * > 10.0.0.11/32 10.1.0.6 0 - 100 0 65101 i * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i * > 192.168.101.0/24 10.1.0.6 0 - 100 0 65101 i Next: Advertise your IPv4 address space to the EBGP neighbors Reference Information You might find the following information useful if you're not using netlab to build the lab: Lab Wiring Link Name Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 x2 -> rtr","title":"Configure Multiple EBGP Sessions"},{"location":"basic/2-multihomed/#configure-multiple-ebgp-sessions","text":"Now that you know how to configure an EBGP session let's move on to a more realistic scenario: you have a site with a WAN edge router connected to two upstream ISPs, and you're running EBGP with them. The routers in your lab use the following BGP AS numbers. Each upstream router advertises its loopback, another IPv4 prefix, and the default route. Node/ASN Router ID BGP RR Advertised prefixes AS65000 rtr 10.0.0.1 AS65100 x1 10.0.0.10 10.0.0.10/32 192.168.100.0/24 AS65101 x2 10.0.0.11 10.0.0.11/32 192.168.101.0/24","title":"Configure Multiple EBGP Sessions"},{"location":"basic/2-multihomed/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/2-multihomed Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify that the IP addresses are configured on all its interfaces.","title":"Start the Lab"},{"location":"basic/2-multihomed/#configuration-tasks","text":"Configure EBGP sessions using the following parameters: Node Neighbor Neighbor IPv4 Neighbor AS Local AS rtr x1 10.1.0.2 65100 rtr x2 10.1.0.6 65101 You might also want to configure neighbor description and BGP session logging to get an information message when the BGP session is established.","title":"Configuration Tasks"},{"location":"basic/2-multihomed/#verification","text":"Check the state of the BGP session with a command similar to show ip bgp summary . This is a printout taken from Arista EOS: rtr#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 10.1.0.2 4 65100 11 10 0 0 00:00:17 Estab 3 3 10.1.0.6 4 65101 9 8 0 0 00:00:12 Estab 3 3 Finally, use a command similar to show ip bgp to verify that your router received three prefixes from each EBGP neighbor: the IPv4 prefix configured on the remote loopback interface, another IPv4 prefix, and the default route. This is how the printout looks like on Arista EOS: rtr#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 0 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 0 65101 i * > 10.0.0.10/32 10.1.0.2 0 - 100 0 65100 i * > 10.0.0.11/32 10.1.0.6 0 - 100 0 65101 i * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i * > 192.168.101.0/24 10.1.0.6 0 - 100 0 65101 i Next: Advertise your IPv4 address space to the EBGP neighbors","title":"Verification"},{"location":"basic/2-multihomed/#reference-information","text":"You might find the following information useful if you're not using netlab to build the lab:","title":"Reference Information"},{"location":"basic/2-multihomed/#lab-wiring","text":"Link Name Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1","title":"Lab Wiring"},{"location":"basic/2-multihomed/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 x2 -> rtr","title":"Lab Addressing"},{"location":"basic/3-originate/","text":"Advertise IPv4 Prefixes to BGP Neighbors In the previous lab exercise you configured EBGP sessions with two routers belonging to upstream ISPs. Now it's time to advertise your address space (IPv4 prefixes) to them so you'll start receiving some traffic. The routers in your lab use the following BGP AS numbers. Each upstream router advertises its loopback, another IPv4 prefix, and the default route. Node/ASN Router ID BGP RR Advertised prefixes AS65000 rtr 10.0.0.1 AS65100 x1 10.0.0.10 10.0.0.10/32 192.168.100.0/24 AS65101 x2 10.0.0.11 10.0.0.11/32 192.168.101.0/24 Start the Lab Assuming you already set up your lab infrastructure : Change directory to basic/3-originate Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and basic BGP configuration. Note: netlab will configure IP addressing and EBGP sessions on your router. If you're not using netlab just continue with the configuration you made during the previous exercise . Configuration Tasks You have to advertise two prefixes to the upstream providers: 192.168.42.0 -- the IP address space belonging to your organization 10.0.0.1 -- your loopback IP address. Important: you should NEVER advertise your loopback addresses (or any other prefix more specific than a /24) to the public Internet. Verification The IPv4 prefixes you want to advertise to EBGP neighbors have to be in the BGP table of your router first. A command similar to show ip bgp is thus a good starting point. This is how Arista EOS displays it: rtr>show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 0 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 0 65101 i * > 10.0.0.1/32 - - - - 0 i * > 10.0.0.10/32 10.1.0.2 0 - 100 0 65100 i * > 10.0.0.11/32 10.1.0.6 0 - 100 0 65101 i * > 192.168.42.0/24 - - - - 0 ? * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i * > 192.168.101.0/24 10.1.0.6 0 - 100 0 65101 i However, you really want to know if the prefixes are advertised to the EBGP neighbors. Some network devices have a show command that displays prefixes advertised to a neighbor. Here's how that command works on Arista EOS: rtr>show ip bgp neighbor 10.1.0.2 advertised-routes BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast, q - Queued for advertisement % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.1/32 10.1.0.1 - - - - 65000 i * > 10.0.0.11/32 10.1.0.1 - - - - 65000 65101 i * > 192.168.42.0/24 10.1.0.1 - - - - 65000 ? * > 192.168.101.0/24 10.1.0.1 - - - - 65000 65101 i You should check the BGP table on the remote router to be absolutely sure everything is OK. While that's a bit hard to do in real life (unless your ISP offers a looking glass ), it's way easier in a lab -- connect to X1 or X2 with netlab connect (or SSH into them if you're not using netlab ), start vtysh and execute the show ip bgp command: $ netlab connect x1 Connecting to container clab-originate-x1, starting bash Use vtysh to connect to FRR daemon x1(bash)#sudo vtysh Hello, this is FRRouting (version 7.5+cl4.4.0u4). Copyright 1996-2005 Kunihiro Ishiguro, et al. x1# show ip bgp BGP table version is 6, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 10.0.0.1/32 10.1.0.1 0 65000 i *> 10.0.0.10/32 0.0.0.0 0 32768 i *> 10.0.0.11/32 10.1.0.1 0 65000 65101 i *> 192.168.42.0/24 10.1.0.1 0 65000 ? *> 192.168.100.0/24 0.0.0.0 0 32768 i *> 192.168.101.0/24 10.1.0.1 0 65000 65101 i Displayed 6 routes and 6 total paths x1# Reference Information You might find the following information useful if you're not using netlab to build the lab: Lab Wiring Link Name Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 x2 -> rtr","title":"Advertise IPv4 Prefixes to BGP Neighbors"},{"location":"basic/3-originate/#advertise-ipv4-prefixes-to-bgp-neighbors","text":"In the previous lab exercise you configured EBGP sessions with two routers belonging to upstream ISPs. Now it's time to advertise your address space (IPv4 prefixes) to them so you'll start receiving some traffic. The routers in your lab use the following BGP AS numbers. Each upstream router advertises its loopback, another IPv4 prefix, and the default route. Node/ASN Router ID BGP RR Advertised prefixes AS65000 rtr 10.0.0.1 AS65100 x1 10.0.0.10 10.0.0.10/32 192.168.100.0/24 AS65101 x2 10.0.0.11 10.0.0.11/32 192.168.101.0/24","title":"Advertise IPv4 Prefixes to BGP Neighbors"},{"location":"basic/3-originate/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/3-originate Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and basic BGP configuration. Note: netlab will configure IP addressing and EBGP sessions on your router. If you're not using netlab just continue with the configuration you made during the previous exercise .","title":"Start the Lab"},{"location":"basic/3-originate/#configuration-tasks","text":"You have to advertise two prefixes to the upstream providers: 192.168.42.0 -- the IP address space belonging to your organization 10.0.0.1 -- your loopback IP address. Important: you should NEVER advertise your loopback addresses (or any other prefix more specific than a /24) to the public Internet.","title":"Configuration Tasks"},{"location":"basic/3-originate/#verification","text":"The IPv4 prefixes you want to advertise to EBGP neighbors have to be in the BGP table of your router first. A command similar to show ip bgp is thus a good starting point. This is how Arista EOS displays it: rtr>show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 0 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 0 65101 i * > 10.0.0.1/32 - - - - 0 i * > 10.0.0.10/32 10.1.0.2 0 - 100 0 65100 i * > 10.0.0.11/32 10.1.0.6 0 - 100 0 65101 i * > 192.168.42.0/24 - - - - 0 ? * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i * > 192.168.101.0/24 10.1.0.6 0 - 100 0 65101 i However, you really want to know if the prefixes are advertised to the EBGP neighbors. Some network devices have a show command that displays prefixes advertised to a neighbor. Here's how that command works on Arista EOS: rtr>show ip bgp neighbor 10.1.0.2 advertised-routes BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast, q - Queued for advertisement % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.1/32 10.1.0.1 - - - - 65000 i * > 10.0.0.11/32 10.1.0.1 - - - - 65000 65101 i * > 192.168.42.0/24 10.1.0.1 - - - - 65000 ? * > 192.168.101.0/24 10.1.0.1 - - - - 65000 65101 i You should check the BGP table on the remote router to be absolutely sure everything is OK. While that's a bit hard to do in real life (unless your ISP offers a looking glass ), it's way easier in a lab -- connect to X1 or X2 with netlab connect (or SSH into them if you're not using netlab ), start vtysh and execute the show ip bgp command: $ netlab connect x1 Connecting to container clab-originate-x1, starting bash Use vtysh to connect to FRR daemon x1(bash)#sudo vtysh Hello, this is FRRouting (version 7.5+cl4.4.0u4). Copyright 1996-2005 Kunihiro Ishiguro, et al. x1# show ip bgp BGP table version is 6, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 10.0.0.1/32 10.1.0.1 0 65000 i *> 10.0.0.10/32 0.0.0.0 0 32768 i *> 10.0.0.11/32 10.1.0.1 0 65000 65101 i *> 192.168.42.0/24 10.1.0.1 0 65000 ? *> 192.168.100.0/24 0.0.0.0 0 32768 i *> 192.168.101.0/24 10.1.0.1 0 65000 65101 i Displayed 6 routes and 6 total paths x1#","title":"Verification"},{"location":"basic/3-originate/#reference-information","text":"You might find the following information useful if you're not using netlab to build the lab:","title":"Reference Information"},{"location":"basic/3-originate/#lab-wiring","text":"Link Name Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1","title":"Lab Wiring"},{"location":"basic/3-originate/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 x2 -> rtr","title":"Lab Addressing"},{"location":"policy/1-weights/","text":"Select Preferred EBGP Peer with Weights In the previous lab exercises you configured EBGP sessions with two routers belonging to upstream ISPs and advertised your IPv4 prefixes to them . Now imagine that you want to use one of the uplinks just for backup purposes -- it might be either too slow or too expensive for regular use. In this lab, you'll modify your BGP configuration to ensure your router always prefers routes advertised by X1 (ISP-1). Existing BGP Configuration The routers in your lab use the following BGP AS numbers. Each autonomous system advertises one loopback address and another IPv4 prefix. Upstream router also advertise the default route to you. Node/ASN Router ID BGP RR Advertised prefixes AS65000 rtr 10.0.0.1 10.0.0.1/32 192.168.42.0/24 AS65100 x1 10.0.0.10 10.0.0.10/32 192.168.100.0/24 AS65101 x2 10.0.0.11 10.0.0.11/32 192.168.101.0/24 Your device (rtr) has these EBGP neighbors: Neighbor Neighbor IPv4 Neighbor AS x1 10.1.0.2 65100 x2 10.1.0.6 65101 Start the Lab Assuming you already set up your lab infrastructure : Change directory to policy/1-weights Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you're not using netlab just continue with the configuration you made during the previous exercise . Configuration Tasks You want your device to prefer routes advertised by X1 over routes advertised by X2. For example, the route for X2's loopback interface should use X1 as the next hop. Many BGP implementations use a mechanism called weight (usually applied per neighbor) to prefer routes advertised by one of the BGP peers. If your device supports BGP weights , use them to prefer routes advertised by X1. Otherwise, you'll have to use BGP local preference to achieve the same result. Verification Examine the BGP table on your router to verify that the routes advertised by X1 (next hop: 10.1.0.2) are the best (active) routes. This is a printout you should get on Arista EOS: rtr#sh ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 200 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 100 65101 i * > 10.0.0.1/32 - - - - 0 i * > 10.0.0.10/32 10.1.0.2 0 - 100 200 65100 i * 10.0.0.10/32 10.1.0.6 0 - 100 100 65101 65100 i * > 10.0.0.11/32 10.1.0.2 0 - 100 200 65100 65101 i * 10.0.0.11/32 10.1.0.6 0 - 100 100 65101 i * > 192.168.42.0/24 - - - - 0 ? * > 192.168.100.0/24 10.1.0.2 0 - 100 200 65100 i * 192.168.100.0/24 10.1.0.6 0 - 100 100 65101 65100 i * > 192.168.101.0/24 10.1.0.2 0 - 100 200 65100 65101 i * 192.168.101.0/24 10.1.0.6 0 - 100 100 65101 i You could dig deeper and examine the details of an IPv4 prefix originated in AS 65101 (X2), for example 10.0.0.11. Yet again, the next hop of the best path should be X1 (10.1.0.2) rtr#show ip bgp 10.0.0.11 BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 BGP routing table entry for 10.0.0.11/32 Paths: 2 available 65100 65101 10.1.0.2 from 10.1.0.2 (10.0.0.10) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 200, tag 0 Received 00:02:47 ago, valid, external, best Rx SAFI: Unicast 65101 10.1.0.6 from 10.1.0.6 (10.0.0.11) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 100, tag 0 Received 00:02:47 ago, valid, external Rx SAFI: Unicast Reference Information You might find the following information useful if you're not using netlab to build the lab: Lab Wiring Link Name Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1","title":"Select Preferred EBGP Peer with Weights"},{"location":"policy/1-weights/#select-preferred-ebgp-peer-with-weights","text":"In the previous lab exercises you configured EBGP sessions with two routers belonging to upstream ISPs and advertised your IPv4 prefixes to them . Now imagine that you want to use one of the uplinks just for backup purposes -- it might be either too slow or too expensive for regular use. In this lab, you'll modify your BGP configuration to ensure your router always prefers routes advertised by X1 (ISP-1).","title":"Select Preferred EBGP Peer with Weights"},{"location":"policy/1-weights/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. Each autonomous system advertises one loopback address and another IPv4 prefix. Upstream router also advertise the default route to you. Node/ASN Router ID BGP RR Advertised prefixes AS65000 rtr 10.0.0.1 10.0.0.1/32 192.168.42.0/24 AS65100 x1 10.0.0.10 10.0.0.10/32 192.168.100.0/24 AS65101 x2 10.0.0.11 10.0.0.11/32 192.168.101.0/24 Your device (rtr) has these EBGP neighbors: Neighbor Neighbor IPv4 Neighbor AS x1 10.1.0.2 65100 x2 10.1.0.6 65101","title":"Existing BGP Configuration"},{"location":"policy/1-weights/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to policy/1-weights Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you're not using netlab just continue with the configuration you made during the previous exercise .","title":"Start the Lab"},{"location":"policy/1-weights/#configuration-tasks","text":"You want your device to prefer routes advertised by X1 over routes advertised by X2. For example, the route for X2's loopback interface should use X1 as the next hop. Many BGP implementations use a mechanism called weight (usually applied per neighbor) to prefer routes advertised by one of the BGP peers. If your device supports BGP weights , use them to prefer routes advertised by X1. Otherwise, you'll have to use BGP local preference to achieve the same result.","title":"Configuration Tasks"},{"location":"policy/1-weights/#verification","text":"Examine the BGP table on your router to verify that the routes advertised by X1 (next hop: 10.1.0.2) are the best (active) routes. This is a printout you should get on Arista EOS: rtr#sh ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 200 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 100 65101 i * > 10.0.0.1/32 - - - - 0 i * > 10.0.0.10/32 10.1.0.2 0 - 100 200 65100 i * 10.0.0.10/32 10.1.0.6 0 - 100 100 65101 65100 i * > 10.0.0.11/32 10.1.0.2 0 - 100 200 65100 65101 i * 10.0.0.11/32 10.1.0.6 0 - 100 100 65101 i * > 192.168.42.0/24 - - - - 0 ? * > 192.168.100.0/24 10.1.0.2 0 - 100 200 65100 i * 192.168.100.0/24 10.1.0.6 0 - 100 100 65101 65100 i * > 192.168.101.0/24 10.1.0.2 0 - 100 200 65100 65101 i * 192.168.101.0/24 10.1.0.6 0 - 100 100 65101 i You could dig deeper and examine the details of an IPv4 prefix originated in AS 65101 (X2), for example 10.0.0.11. Yet again, the next hop of the best path should be X1 (10.1.0.2) rtr#show ip bgp 10.0.0.11 BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 BGP routing table entry for 10.0.0.11/32 Paths: 2 available 65100 65101 10.1.0.2 from 10.1.0.2 (10.0.0.10) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 200, tag 0 Received 00:02:47 ago, valid, external, best Rx SAFI: Unicast 65101 10.1.0.6 from 10.1.0.6 (10.0.0.11) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 100, tag 0 Received 00:02:47 ago, valid, external Rx SAFI: Unicast","title":"Verification"},{"location":"policy/1-weights/#reference-information","text":"You might find the following information useful if you're not using netlab to build the lab:","title":"Reference Information"},{"location":"policy/1-weights/#lab-wiring","text":"Link Name Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2","title":"Lab Wiring"},{"location":"policy/1-weights/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1","title":"Lab Addressing"}]}