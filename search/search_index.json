{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ipSpace.net BGP Configuration Labs The following series of hands-on labs will help you master numerous aspects of EBGP, IBGP, and BGP routing policy configuration on a platform of your choice 1 . You can already do the following labs with over a dozen labs coming in the future (see the list of upcoming labs ). Basic BGP Setup Establish an EBGP session with an ISP Connect to two upstream providers Advertise your IPv4 address space Simple BGP Routing Policies Use BGP weights to prefer one of the upstream providers Prevent route leaking between upstream providers with an AS-path filter Filter prefixes advertised by your autonomous system with a prefix list Minimize the size of your BGP table with inbound filters Some assembly required: the Cumulus Linux VMs/containers that are used for external BGP speakers are easy to download, but you\u2019ll have to build a Vagrant box or install a vendor-supplied Vagrant box or Docker container image for most other platforms. See installation and setup for details. \u21a9","title":"Labs Overview"},{"location":"#ipspacenet-bgp-configuration-labs","text":"The following series of hands-on labs will help you master numerous aspects of EBGP, IBGP, and BGP routing policy configuration on a platform of your choice 1 . You can already do the following labs with over a dozen labs coming in the future (see the list of upcoming labs ).","title":"ipSpace.net BGP Configuration Labs"},{"location":"#basic-bgp-setup","text":"Establish an EBGP session with an ISP Connect to two upstream providers Advertise your IPv4 address space","title":"Basic BGP Setup"},{"location":"#simple-bgp-routing-policies","text":"Use BGP weights to prefer one of the upstream providers Prevent route leaking between upstream providers with an AS-path filter Filter prefixes advertised by your autonomous system with a prefix list Minimize the size of your BGP table with inbound filters Some assembly required: the Cumulus Linux VMs/containers that are used for external BGP speakers are easy to download, but you\u2019ll have to build a Vagrant box or install a vendor-supplied Vagrant box or Docker container image for most other platforms. See installation and setup for details. \u21a9","title":"Simple BGP Routing Policies"},{"location":"1-setup/","text":"Software Installation and Lab Setup It\u2019s easiest to use the BGP labs with netlab , but you can use most of them (potentially with slightly reduced functionality) with any other virtual lab environment or on physical gear. For the rest of this document we\u2019ll assume you decided to use netlab ; if you want to set up your lab in some other way you might find the Manual Setup document useful. Selecting the Network Devices The labs heavily rely on external BGP feeds \u2013 preconfigured devices that you have to connect to and exchange routing information with. It\u2019s best if you run Cumulus Linux on those devices; if you insist on using something else we\u2019d appreciate if you would consider submitting your configurations in a pull request. You can run Cumulus Linux in all netlab -supported virtualization environments (VirtualBox, libvirt or Docker), and if you want to keep your life simple consider using it for your devices as well. Obviously you can use any other netlab -supported device for which we implemented basic BGP configuration . Selecting the Virtualization Environment Now that you know which network device you want to use, check which virtualization environment you can use. I would prefer containerlab over libvirt with virtualbox being a distant third, but that\u2019s just me. There\u2019s a gotcha though: you can use containerlab and libvirt only on a Linux host. You can use virtualbox if you want to run the labs on your Windows- or MacOS laptop, or run a Ubuntu VM on the laptop. One more gotcha: your hardware and virtualization software (example: VirtualBox or VMware Fusion) must support nested virtualization if you want to use libvirt on that Ubuntu VM. You don\u2019t need that to run Docker containers, unless you\u2019re using the crazy trick we\u2019re forced to use for Juniper vMX or Nokia SR OS \u2013 they\u2019re running as a virtual machine within a container . Software Installation Based on the choices you made, you\u2019ll find the installation instructions in one of these documents: Virtualbox-Based Lab on Windows or MacOS Ubuntu VM Installation on Windows or MacOS Ubuntu Server Installation Running netlab on any other Linux Server Running netlab in a Public Cloud Once you completed the software installation you have to deal with the stupidities of downloading and installing network device images ( Virtualbox , libvirt , containers ) unless you decided to use Cumulus Linux, FRR, Nokia SR Linux, or Vyos. I would love to make the whole process simpler, but the networking vendors refuse to play along. Even worse, it looks like 1 their licenses prohibit me from downloading the images and creating a packaged VM with preinstalled network devices for you. Fortunately, you only have to go through this colossal waste of time once. Setting Up the Labs We finally got to the fun part \u2013 setting up the labs: Select a directory where you want to have the BGP labs Clone the bgplab GitHub repository with git clone git@github.com:ipspace/bgplab.git . GitHub UI gives you other options in the green Code button, including Download ZIP Open the defaults.yml file in the main directory and edit it to set your preferred network device and virtualization environment. For example, I\u2019m using the following settings to run the labs with Arista EOS containers: device: eos # Change to your preferred network device provider: clab # Change to virtualbox or libvirt if needed In a terminal window, change current directory to one of the lab directories (for example, basic/1-session ) and execute netlab up . Wait for the lab to start and use netlab connect to connect to individual lab devices Have fun. When you\u2019re done, collect the device configurations with netlab collect (if you want to save them) and shut down the lab with netlab down I\u2019m not going to pay a lawyer to read their boilerplate stuff, and I\u2019m definitely not going to rely on my amateur understanding of US copyright law. \u21a9","title":"Installation and Setup"},{"location":"1-setup/#software-installation-and-lab-setup","text":"It\u2019s easiest to use the BGP labs with netlab , but you can use most of them (potentially with slightly reduced functionality) with any other virtual lab environment or on physical gear. For the rest of this document we\u2019ll assume you decided to use netlab ; if you want to set up your lab in some other way you might find the Manual Setup document useful.","title":"Software Installation and Lab Setup"},{"location":"1-setup/#selecting-the-network-devices","text":"The labs heavily rely on external BGP feeds \u2013 preconfigured devices that you have to connect to and exchange routing information with. It\u2019s best if you run Cumulus Linux on those devices; if you insist on using something else we\u2019d appreciate if you would consider submitting your configurations in a pull request. You can run Cumulus Linux in all netlab -supported virtualization environments (VirtualBox, libvirt or Docker), and if you want to keep your life simple consider using it for your devices as well. Obviously you can use any other netlab -supported device for which we implemented basic BGP configuration .","title":"Selecting the Network Devices"},{"location":"1-setup/#selecting-the-virtualization-environment","text":"Now that you know which network device you want to use, check which virtualization environment you can use. I would prefer containerlab over libvirt with virtualbox being a distant third, but that\u2019s just me. There\u2019s a gotcha though: you can use containerlab and libvirt only on a Linux host. You can use virtualbox if you want to run the labs on your Windows- or MacOS laptop, or run a Ubuntu VM on the laptop. One more gotcha: your hardware and virtualization software (example: VirtualBox or VMware Fusion) must support nested virtualization if you want to use libvirt on that Ubuntu VM. You don\u2019t need that to run Docker containers, unless you\u2019re using the crazy trick we\u2019re forced to use for Juniper vMX or Nokia SR OS \u2013 they\u2019re running as a virtual machine within a container .","title":"Selecting the Virtualization Environment"},{"location":"1-setup/#software-installation","text":"Based on the choices you made, you\u2019ll find the installation instructions in one of these documents: Virtualbox-Based Lab on Windows or MacOS Ubuntu VM Installation on Windows or MacOS Ubuntu Server Installation Running netlab on any other Linux Server Running netlab in a Public Cloud Once you completed the software installation you have to deal with the stupidities of downloading and installing network device images ( Virtualbox , libvirt , containers ) unless you decided to use Cumulus Linux, FRR, Nokia SR Linux, or Vyos. I would love to make the whole process simpler, but the networking vendors refuse to play along. Even worse, it looks like 1 their licenses prohibit me from downloading the images and creating a packaged VM with preinstalled network devices for you. Fortunately, you only have to go through this colossal waste of time once.","title":"Software Installation"},{"location":"1-setup/#setting-up-the-labs","text":"We finally got to the fun part \u2013 setting up the labs: Select a directory where you want to have the BGP labs Clone the bgplab GitHub repository with git clone git@github.com:ipspace/bgplab.git . GitHub UI gives you other options in the green Code button, including Download ZIP Open the defaults.yml file in the main directory and edit it to set your preferred network device and virtualization environment. For example, I\u2019m using the following settings to run the labs with Arista EOS containers: device: eos # Change to your preferred network device provider: clab # Change to virtualbox or libvirt if needed In a terminal window, change current directory to one of the lab directories (for example, basic/1-session ) and execute netlab up . Wait for the lab to start and use netlab connect to connect to individual lab devices Have fun. When you\u2019re done, collect the device configurations with netlab collect (if you want to save them) and shut down the lab with netlab down I\u2019m not going to pay a lawyer to read their boilerplate stuff, and I\u2019m definitely not going to rely on my amateur understanding of US copyright law. \u21a9","title":"Setting Up the Labs"},{"location":"2-manual/","text":"Manual Setup You don\u2019t have to use netlab to create your labs; you can build them with any other tool, or use physical devices or a mix of physical- and virtual devices. Lab instructions contain wiring tables that you can use to set up your infrastructure, and I tried to use the same setup for as many labs as possible to reduce your hassle. All labs rely on preconfigured external BGP routers using Cumulus Linux. They are automatically configured by netlab ; if you decide to use some other infrastructure you\u2019ll have to configure them yourself. Lab directories in the GitHub repository contain config subdirectory with /etc/frr/frr.conf and /etc/network/interfaces files. I would use git clone to clone the GitHub repository to the local disk; GitHub also offers ZIP download. If you prefer point-and-click approach feel free to download individual files from the GitHub web UI. Finally, you could use curl on Cumulus Linux to pull them into the devices straight from GitHub. Whatever you decide to do, in the end you have to get the configuration files to individual Cumulus Linux devices, reconfigure interfaces with ifreload -a , and restart FRR. Most labs also configure IP addressing and basic BGP setup on your devices. Without netlab you\u2019ll have to start from scratch; the information you need is in the lab instructions but it might become tedious. Long story short: Use netlab \ud83d\ude09","title":"Manual Setup"},{"location":"2-manual/#manual-setup","text":"You don\u2019t have to use netlab to create your labs; you can build them with any other tool, or use physical devices or a mix of physical- and virtual devices. Lab instructions contain wiring tables that you can use to set up your infrastructure, and I tried to use the same setup for as many labs as possible to reduce your hassle. All labs rely on preconfigured external BGP routers using Cumulus Linux. They are automatically configured by netlab ; if you decide to use some other infrastructure you\u2019ll have to configure them yourself. Lab directories in the GitHub repository contain config subdirectory with /etc/frr/frr.conf and /etc/network/interfaces files. I would use git clone to clone the GitHub repository to the local disk; GitHub also offers ZIP download. If you prefer point-and-click approach feel free to download individual files from the GitHub web UI. Finally, you could use curl on Cumulus Linux to pull them into the devices straight from GitHub. Whatever you decide to do, in the end you have to get the configuration files to individual Cumulus Linux devices, reconfigure interfaces with ifreload -a , and restart FRR. Most labs also configure IP addressing and basic BGP setup on your devices. Without netlab you\u2019ll have to start from scratch; the information you need is in the lab instructions but it might become tedious. Long story short: Use netlab \ud83d\ude09","title":"Manual Setup"},{"location":"3-upcoming/","text":"Upcoming Labs While we\u2019re working on new stuff you can already enjoy over a half dozen labs. In case you\u2019re curious about what\u2019s coming next, here are a few ideas: Basic BGP Setup Run BGP with IPv6 Redistribute IGP information into BGP Use BGP summarization to minimize the number of BGP advertisements Optional exercises: Protect a BGP session with MD5 password, TCP-AO password, and TTL check Use session templates and BGP peer groups Improve convergence speed with BFD Advanced exercises: Run EBGP over unnumbered IPv4 interfaces or over IPv6 link-local addresses Run IPv4 and IPv6 over the same BGP session Fine-tune BGP Fast External Failover Configure BGP graceful restart Simple BGP Routing Policies Perform simple load balancing across parallel links and across upstream providers Use BGP link bandwidth to influence the load balancing weights Advanced exercises: Use BGP route refresh and soft reconfiguration Use outbound route filters (ORF) BGP in Enterprise Networks Use IBGP with multiple WAN edge routers Use BGP local preference to prefer one of the upstream providers Use more complex BGP local preference setup to prefer direct connectivity with customers of upstream ISPs Use MED to influence route selection in an upstream ISP Use AS-path prepending to influence route selection across multiple upstream ISPs Controlling Inbound Traffic Use BGP communities to influence route selection in upstream ISPs Use controlled disaggregation to influence inbound traffic flow Use conditional route advertisements to select primary/backup links for the inbound traffic BGP in Service Provider Networks Build a simple service provider network with IBGP Use BGP route reflectors to reduce the number of IBGP sessions Use a hierarchy of route reflectors Build a transit autonomous system using BGP communities to change routing policies Reduce routing instabilities with BGP route flap dampening Implement policy-based routing with BGP Use MPLS with BGP Use MPLS to build a BGP-free core Use SR-MPLS to minimize the number of control-plane protocols Use BGP Labeled Unicast to extend MPLS paths across multiple autonomous systems","title":"Upcoming Labs"},{"location":"3-upcoming/#upcoming-labs","text":"While we\u2019re working on new stuff you can already enjoy over a half dozen labs. In case you\u2019re curious about what\u2019s coming next, here are a few ideas:","title":"Upcoming Labs"},{"location":"3-upcoming/#basic-bgp-setup","text":"Run BGP with IPv6 Redistribute IGP information into BGP Use BGP summarization to minimize the number of BGP advertisements Optional exercises: Protect a BGP session with MD5 password, TCP-AO password, and TTL check Use session templates and BGP peer groups Improve convergence speed with BFD Advanced exercises: Run EBGP over unnumbered IPv4 interfaces or over IPv6 link-local addresses Run IPv4 and IPv6 over the same BGP session Fine-tune BGP Fast External Failover Configure BGP graceful restart","title":"Basic BGP Setup"},{"location":"3-upcoming/#simple-bgp-routing-policies","text":"Perform simple load balancing across parallel links and across upstream providers Use BGP link bandwidth to influence the load balancing weights Advanced exercises: Use BGP route refresh and soft reconfiguration Use outbound route filters (ORF)","title":"Simple BGP Routing Policies"},{"location":"3-upcoming/#bgp-in-enterprise-networks","text":"Use IBGP with multiple WAN edge routers Use BGP local preference to prefer one of the upstream providers Use more complex BGP local preference setup to prefer direct connectivity with customers of upstream ISPs Use MED to influence route selection in an upstream ISP Use AS-path prepending to influence route selection across multiple upstream ISPs","title":"BGP in Enterprise Networks"},{"location":"3-upcoming/#controlling-inbound-traffic","text":"Use BGP communities to influence route selection in upstream ISPs Use controlled disaggregation to influence inbound traffic flow Use conditional route advertisements to select primary/backup links for the inbound traffic","title":"Controlling Inbound Traffic"},{"location":"3-upcoming/#bgp-in-service-provider-networks","text":"Build a simple service provider network with IBGP Use BGP route reflectors to reduce the number of IBGP sessions Use a hierarchy of route reflectors Build a transit autonomous system using BGP communities to change routing policies Reduce routing instabilities with BGP route flap dampening Implement policy-based routing with BGP","title":"BGP in Service Provider Networks"},{"location":"3-upcoming/#use-mpls-with-bgp","text":"Use MPLS to build a BGP-free core Use SR-MPLS to minimize the number of control-plane protocols Use BGP Labeled Unicast to extend MPLS paths across multiple autonomous systems","title":"Use MPLS with BGP"},{"location":"basic/1-session/","text":"Configure a Single EBGP Session We\u2019ll start with the simplest possible scenario: configure an EBGP session between your device and an upstream router (X1). Note: if you\u2019re creating your lab infrastructure manually , it might be better to skip this exercise and go straight to configuring two uplinks . Start the Lab Assuming you already set up your lab infrastructure : Change directory to basic/1-session Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify that the IP addresses are configured on all its interfaces. Configuration Tasks Configure an EBGP session using the following parameters: neighbor IP address neighbor AS number 10.1.0.2 65100 Note: If your device happens to be fully compliant with RFC 8212 (example: Cisco IOS XR), you\u2019ll have to configure a permit everything incoming filter on all EBGP neighbors or your device won\u2019t accept anything they send you. You might also want to configure neighbor description and BGP session logging to get an information message when the BGP session is established. Verification Check the state of the BGP session with a command similar to show ip bgp summary . This is a printout taken from Arista EOS: rtr#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 10.1.0.2 4 65100 33 37 0 0 00:01:25 Estab 2 2 Finally, use a command similar to show ip bgp to verify that your router received two prefixes from the EBGP neighbor: the default route and the loopback remote interface (10.0.0.10/32). This is how the printout looks like on Arista EOS: rtr#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 0 65100 i * > 10.0.0.10/32 10.1.0.2 0 - 100 0 65100 i Next: Connect with the second upstream provider and advertise your address space. Reference Information You might find the following information useful if you\u2019re not using netlab to build the lab: Lab Wiring Link Name Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr","title":"Configure a Single EBGP Session"},{"location":"basic/1-session/#configure-a-single-ebgp-session","text":"We\u2019ll start with the simplest possible scenario: configure an EBGP session between your device and an upstream router (X1). Note: if you\u2019re creating your lab infrastructure manually , it might be better to skip this exercise and go straight to configuring two uplinks .","title":"Configure a Single EBGP Session"},{"location":"basic/1-session/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/1-session Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify that the IP addresses are configured on all its interfaces.","title":"Start the Lab"},{"location":"basic/1-session/#configuration-tasks","text":"Configure an EBGP session using the following parameters: neighbor IP address neighbor AS number 10.1.0.2 65100 Note: If your device happens to be fully compliant with RFC 8212 (example: Cisco IOS XR), you\u2019ll have to configure a permit everything incoming filter on all EBGP neighbors or your device won\u2019t accept anything they send you. You might also want to configure neighbor description and BGP session logging to get an information message when the BGP session is established.","title":"Configuration Tasks"},{"location":"basic/1-session/#verification","text":"Check the state of the BGP session with a command similar to show ip bgp summary . This is a printout taken from Arista EOS: rtr#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 10.1.0.2 4 65100 33 37 0 0 00:01:25 Estab 2 2 Finally, use a command similar to show ip bgp to verify that your router received two prefixes from the EBGP neighbor: the default route and the loopback remote interface (10.0.0.10/32). This is how the printout looks like on Arista EOS: rtr#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 0 65100 i * > 10.0.0.10/32 10.1.0.2 0 - 100 0 65100 i Next: Connect with the second upstream provider and advertise your address space.","title":"Verification"},{"location":"basic/1-session/#reference-information","text":"You might find the following information useful if you\u2019re not using netlab to build the lab:","title":"Reference Information"},{"location":"basic/1-session/#lab-wiring","text":"Link Name Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1","title":"Lab Wiring"},{"location":"basic/1-session/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr","title":"Lab Addressing"},{"location":"basic/2-multihomed/","text":"Configure Multiple EBGP Sessions Now that you know how to configure an EBGP session let\u2019s move on to a more realistic scenario: you have a site with a WAN edge router connected to two upstream ISPs, and you\u2019re running EBGP with them. The routers in your lab use the following BGP AS numbers. Each upstream router advertises its loopback, another IPv4 prefix, and the default route. Node/ASN Router ID BGP RR Advertised prefixes AS65000 rtr 10.0.0.1 AS65100 x1 10.0.0.10 10.0.0.10/32 192.168.100.0/24 AS65101 x2 10.0.0.11 10.0.0.11/32 192.168.101.0/24 Start the Lab Assuming you already set up your lab infrastructure : Change directory to basic/2-multihomed Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify that the IP addresses are configured on all its interfaces. Configuration Tasks Configure EBGP sessions using the following parameters: Node Neighbor Neighbor IPv4 Neighbor AS Local AS rtr x1 10.1.0.2 65100 rtr x2 10.1.0.6 65101 Note: If your device happens to be fully compliant with RFC 8212 (example: Cisco IOS XR), you\u2019ll have to configure a permit everything incoming filter on all EBGP neighbors or your device won\u2019t accept anything they send you. You might also want to configure neighbor description and BGP session logging to get an information message when the BGP session is established. Verification Check the state of the BGP session with a command similar to show ip bgp summary . This is a printout taken from Arista EOS: rtr#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 10.1.0.2 4 65100 11 10 0 0 00:00:17 Estab 3 3 10.1.0.6 4 65101 9 8 0 0 00:00:12 Estab 3 3 Finally, use a command similar to show ip bgp to verify that your router received three prefixes from each EBGP neighbor: the IPv4 prefix configured on the remote loopback interface, another IPv4 prefix, and the default route. This is how the printout looks like on Arista EOS: rtr#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 0 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 0 65101 i * > 10.0.0.10/32 10.1.0.2 0 - 100 0 65100 i * > 10.0.0.11/32 10.1.0.6 0 - 100 0 65101 i * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i * > 192.168.101.0/24 10.1.0.6 0 - 100 0 65101 i Next: Advertise your IPv4 address space to the EBGP neighbors Reference Information You might find the following information useful if you\u2019re not using netlab to build the lab: Lab Wiring Link Name Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 x2 -> rtr","title":"Configure Multiple EBGP Sessions"},{"location":"basic/2-multihomed/#configure-multiple-ebgp-sessions","text":"Now that you know how to configure an EBGP session let\u2019s move on to a more realistic scenario: you have a site with a WAN edge router connected to two upstream ISPs, and you\u2019re running EBGP with them. The routers in your lab use the following BGP AS numbers. Each upstream router advertises its loopback, another IPv4 prefix, and the default route. Node/ASN Router ID BGP RR Advertised prefixes AS65000 rtr 10.0.0.1 AS65100 x1 10.0.0.10 10.0.0.10/32 192.168.100.0/24 AS65101 x2 10.0.0.11 10.0.0.11/32 192.168.101.0/24","title":"Configure Multiple EBGP Sessions"},{"location":"basic/2-multihomed/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/2-multihomed Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify that the IP addresses are configured on all its interfaces.","title":"Start the Lab"},{"location":"basic/2-multihomed/#configuration-tasks","text":"Configure EBGP sessions using the following parameters: Node Neighbor Neighbor IPv4 Neighbor AS Local AS rtr x1 10.1.0.2 65100 rtr x2 10.1.0.6 65101 Note: If your device happens to be fully compliant with RFC 8212 (example: Cisco IOS XR), you\u2019ll have to configure a permit everything incoming filter on all EBGP neighbors or your device won\u2019t accept anything they send you. You might also want to configure neighbor description and BGP session logging to get an information message when the BGP session is established.","title":"Configuration Tasks"},{"location":"basic/2-multihomed/#verification","text":"Check the state of the BGP session with a command similar to show ip bgp summary . This is a printout taken from Arista EOS: rtr#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 10.1.0.2 4 65100 11 10 0 0 00:00:17 Estab 3 3 10.1.0.6 4 65101 9 8 0 0 00:00:12 Estab 3 3 Finally, use a command similar to show ip bgp to verify that your router received three prefixes from each EBGP neighbor: the IPv4 prefix configured on the remote loopback interface, another IPv4 prefix, and the default route. This is how the printout looks like on Arista EOS: rtr#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 0 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 0 65101 i * > 10.0.0.10/32 10.1.0.2 0 - 100 0 65100 i * > 10.0.0.11/32 10.1.0.6 0 - 100 0 65101 i * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i * > 192.168.101.0/24 10.1.0.6 0 - 100 0 65101 i Next: Advertise your IPv4 address space to the EBGP neighbors","title":"Verification"},{"location":"basic/2-multihomed/#reference-information","text":"You might find the following information useful if you\u2019re not using netlab to build the lab:","title":"Reference Information"},{"location":"basic/2-multihomed/#lab-wiring","text":"Link Name Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1","title":"Lab Wiring"},{"location":"basic/2-multihomed/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 x2 -> rtr","title":"Lab Addressing"},{"location":"basic/3-originate/","text":"Advertise IPv4 Prefixes to BGP Neighbors In the previous lab exercise you configured EBGP sessions with two routers belonging to upstream ISPs. Now it\u2019s time to advertise your address space (IPv4 prefixes) to them so you\u2019ll start receiving some traffic. The routers in your lab use the following BGP AS numbers. Each upstream router advertises its loopback, another IPv4 prefix, and the default route. Node/ASN Router ID BGP RR Advertised prefixes AS65000 rtr 10.0.0.1 AS65100 x1 10.0.0.10 10.0.0.10/32 192.168.100.0/24 AS65101 x2 10.0.0.11 10.0.0.11/32 192.168.101.0/24 Start the Lab Assuming you already set up your lab infrastructure : Change directory to basic/3-originate Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and basic BGP configuration. Note: netlab will configure IP addressing and EBGP sessions on your router. If you\u2019re not using netlab just continue with the configuration you made during the previous exercise . Configuration Tasks You have to advertise two prefixes to the upstream providers: 192.168.42.0 \u2013 the IP address space belonging to your organization 10.0.0.1 \u2013 your loopback IP address. Important: you should NEVER advertise your loopback addresses (or any other prefix more specific than a /24) to the public Internet. Note: If your device happens to be fully compliant with RFC 8212 (example: Cisco IOS XR), you\u2019ll have to configure a permit everything outgoing filter on all EBGP neighbors or your device won\u2019t send them anything. Verification The IPv4 prefixes you want to advertise to EBGP neighbors have to be in the BGP table of your router first. A command similar to show ip bgp is thus a good starting point. This is how Arista EOS displays it: rtr>show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 0 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 0 65101 i * > 10.0.0.1/32 - - - - 0 i * > 10.0.0.10/32 10.1.0.2 0 - 100 0 65100 i * > 10.0.0.11/32 10.1.0.6 0 - 100 0 65101 i * > 192.168.42.0/24 - - - - 0 ? * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i * > 192.168.101.0/24 10.1.0.6 0 - 100 0 65101 i However, you really want to know if the prefixes are advertised to the EBGP neighbors. Some network devices have a show command that displays prefixes advertised to a neighbor. Here\u2019s how that command works on Arista EOS: rtr>show ip bgp neighbor 10.1.0.2 advertised-routes BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast, q - Queued for advertisement % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.1/32 10.1.0.1 - - - - 65000 i * > 10.0.0.11/32 10.1.0.1 - - - - 65000 65101 i * > 192.168.42.0/24 10.1.0.1 - - - - 65000 ? * > 192.168.101.0/24 10.1.0.1 - - - - 65000 65101 i You should check the BGP table on the remote router to be absolutely sure everything is OK. While that\u2019s a bit hard to do in real life (unless your ISP offers a looking glass ), it\u2019s way easier in a lab \u2013 connect to X1 or X2 with netlab connect (or SSH into them if you\u2019re not using netlab ), start vtysh and execute the show ip bgp command: $ netlab connect x1 Connecting to container clab-originate-x1, starting bash Use vtysh to connect to FRR daemon x1(bash)#sudo vtysh Hello, this is FRRouting (version 7.5+cl4.4.0u4). Copyright 1996-2005 Kunihiro Ishiguro, et al. x1# show ip bgp BGP table version is 6, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 10.0.0.1/32 10.1.0.1 0 65000 i *> 10.0.0.10/32 0.0.0.0 0 32768 i *> 10.0.0.11/32 10.1.0.1 0 65000 65101 i *> 192.168.42.0/24 10.1.0.1 0 65000 ? *> 192.168.100.0/24 0.0.0.0 0 32768 i *> 192.168.101.0/24 10.1.0.1 0 65000 65101 i Displayed 6 routes and 6 total paths x1# Next: Use BGP weights to prefer one of the upstream ISPs . Reference Information You might find the following information useful if you\u2019re not using netlab to build the lab: Lab Wiring Link Name Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 x2 -> rtr","title":"Advertise IPv4 Prefixes to BGP Neighbors"},{"location":"basic/3-originate/#advertise-ipv4-prefixes-to-bgp-neighbors","text":"In the previous lab exercise you configured EBGP sessions with two routers belonging to upstream ISPs. Now it\u2019s time to advertise your address space (IPv4 prefixes) to them so you\u2019ll start receiving some traffic. The routers in your lab use the following BGP AS numbers. Each upstream router advertises its loopback, another IPv4 prefix, and the default route. Node/ASN Router ID BGP RR Advertised prefixes AS65000 rtr 10.0.0.1 AS65100 x1 10.0.0.10 10.0.0.10/32 192.168.100.0/24 AS65101 x2 10.0.0.11 10.0.0.11/32 192.168.101.0/24","title":"Advertise IPv4 Prefixes to BGP Neighbors"},{"location":"basic/3-originate/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/3-originate Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and basic BGP configuration. Note: netlab will configure IP addressing and EBGP sessions on your router. If you\u2019re not using netlab just continue with the configuration you made during the previous exercise .","title":"Start the Lab"},{"location":"basic/3-originate/#configuration-tasks","text":"You have to advertise two prefixes to the upstream providers: 192.168.42.0 \u2013 the IP address space belonging to your organization 10.0.0.1 \u2013 your loopback IP address. Important: you should NEVER advertise your loopback addresses (or any other prefix more specific than a /24) to the public Internet. Note: If your device happens to be fully compliant with RFC 8212 (example: Cisco IOS XR), you\u2019ll have to configure a permit everything outgoing filter on all EBGP neighbors or your device won\u2019t send them anything.","title":"Configuration Tasks"},{"location":"basic/3-originate/#verification","text":"The IPv4 prefixes you want to advertise to EBGP neighbors have to be in the BGP table of your router first. A command similar to show ip bgp is thus a good starting point. This is how Arista EOS displays it: rtr>show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 0 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 0 65101 i * > 10.0.0.1/32 - - - - 0 i * > 10.0.0.10/32 10.1.0.2 0 - 100 0 65100 i * > 10.0.0.11/32 10.1.0.6 0 - 100 0 65101 i * > 192.168.42.0/24 - - - - 0 ? * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i * > 192.168.101.0/24 10.1.0.6 0 - 100 0 65101 i However, you really want to know if the prefixes are advertised to the EBGP neighbors. Some network devices have a show command that displays prefixes advertised to a neighbor. Here\u2019s how that command works on Arista EOS: rtr>show ip bgp neighbor 10.1.0.2 advertised-routes BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast, q - Queued for advertisement % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.1/32 10.1.0.1 - - - - 65000 i * > 10.0.0.11/32 10.1.0.1 - - - - 65000 65101 i * > 192.168.42.0/24 10.1.0.1 - - - - 65000 ? * > 192.168.101.0/24 10.1.0.1 - - - - 65000 65101 i You should check the BGP table on the remote router to be absolutely sure everything is OK. While that\u2019s a bit hard to do in real life (unless your ISP offers a looking glass ), it\u2019s way easier in a lab \u2013 connect to X1 or X2 with netlab connect (or SSH into them if you\u2019re not using netlab ), start vtysh and execute the show ip bgp command: $ netlab connect x1 Connecting to container clab-originate-x1, starting bash Use vtysh to connect to FRR daemon x1(bash)#sudo vtysh Hello, this is FRRouting (version 7.5+cl4.4.0u4). Copyright 1996-2005 Kunihiro Ishiguro, et al. x1# show ip bgp BGP table version is 6, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 10.0.0.1/32 10.1.0.1 0 65000 i *> 10.0.0.10/32 0.0.0.0 0 32768 i *> 10.0.0.11/32 10.1.0.1 0 65000 65101 i *> 192.168.42.0/24 10.1.0.1 0 65000 ? *> 192.168.100.0/24 0.0.0.0 0 32768 i *> 192.168.101.0/24 10.1.0.1 0 65000 65101 i Displayed 6 routes and 6 total paths x1# Next: Use BGP weights to prefer one of the upstream ISPs .","title":"Verification"},{"location":"basic/3-originate/#reference-information","text":"You might find the following information useful if you\u2019re not using netlab to build the lab:","title":"Reference Information"},{"location":"basic/3-originate/#lab-wiring","text":"Link Name Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1","title":"Lab Wiring"},{"location":"basic/3-originate/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 x2 -> rtr","title":"Lab Addressing"},{"location":"policy/1-weights/","text":"Select Preferred EBGP Peer with Weights In the previous lab exercises you configured EBGP sessions with two routers belonging to upstream ISPs and advertised your IPv4 prefixes to them . Now imagine that you want to use one of the uplinks just for backup purposes \u2013 it might be either too slow or too expensive for regular use. In this lab, you\u2019ll modify your BGP configuration to ensure your router always prefers routes advertised by X1 (ISP-1). Existing BGP Configuration The routers in your lab use the following BGP AS numbers. Each autonomous system advertises one loopback address and another IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (str). Node/ASN Router ID BGP RR Advertised prefixes AS65000 rtr 10.0.0.1 10.0.0.1/32 192.168.42.0/24 AS65100 x1 10.0.0.10 10.0.0.10/32 192.168.100.0/24 AS65101 x2 10.0.0.11 10.0.0.11/32 192.168.101.0/24 Your device (rtr) has these EBGP neighbors: Neighbor Neighbor IPv4 Neighbor AS x1 10.1.0.2 65100 x2 10.1.0.6 65101 Start the Lab Assuming you already set up your lab infrastructure : Change directory to policy/1-weights Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you\u2019re not using netlab just continue with the configuration you made during the previous exercise . Configuration Tasks You want your device to prefer routes advertised by X1 over routes advertised by X2. For example, the route for X2\u2019s loopback interface should use X1 as the next hop. Many BGP implementations use a mechanism called weight (usually applied per neighbor) to prefer routes advertised by one of the BGP peers. If your device supports BGP weights , use them to prefer routes advertised by X1. Otherwise, you\u2019ll have to use BGP local preference to achieve the same result. Please note that applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change the BGP table as the new parameters might be evaluated only on new incoming updates \u2013 you might have to use a command similar to clear ip bgp * soft in to tell your router to ask its neighbors to resend their BGP updates. Verification Examine the BGP table on your router to verify that the routes advertised by X1 (next hop: 10.1.0.2) are the best (active) routes. This is a printout you should get on Arista EOS: rtr#sh ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 200 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 100 65101 i * > 10.0.0.1/32 - - - - 0 i * > 10.0.0.10/32 10.1.0.2 0 - 100 200 65100 i * 10.0.0.10/32 10.1.0.6 0 - 100 100 65101 65100 i * > 10.0.0.11/32 10.1.0.2 0 - 100 200 65100 65101 i * 10.0.0.11/32 10.1.0.6 0 - 100 100 65101 i * > 192.168.42.0/24 - - - - 0 ? * > 192.168.100.0/24 10.1.0.2 0 - 100 200 65100 i * 192.168.100.0/24 10.1.0.6 0 - 100 100 65101 65100 i * > 192.168.101.0/24 10.1.0.2 0 - 100 200 65100 65101 i * 192.168.101.0/24 10.1.0.6 0 - 100 100 65101 i You could dig deeper and examine the details of an IPv4 prefix originated in AS 65101 (X2), for example 10.0.0.11. Yet again, the next hop of the best path should be X1 (10.1.0.2) rtr#show ip bgp 10.0.0.11 BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 BGP routing table entry for 10.0.0.11/32 Paths: 2 available 65100 65101 10.1.0.2 from 10.1.0.2 (10.0.0.10) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 200, tag 0 Received 00:02:47 ago, valid, external, best Rx SAFI: Unicast 65101 10.1.0.6 from 10.1.0.6 (10.0.0.11) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 100, tag 0 Received 00:02:47 ago, valid, external Rx SAFI: Unicast Next : Use AS-path filters to stop advertising transit routes . Reference Information You might find the following information useful if you\u2019re not using netlab to build the lab: Lab Wiring Link Name Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1","title":"Select Preferred EBGP Peer with Weights"},{"location":"policy/1-weights/#select-preferred-ebgp-peer-with-weights","text":"In the previous lab exercises you configured EBGP sessions with two routers belonging to upstream ISPs and advertised your IPv4 prefixes to them . Now imagine that you want to use one of the uplinks just for backup purposes \u2013 it might be either too slow or too expensive for regular use. In this lab, you\u2019ll modify your BGP configuration to ensure your router always prefers routes advertised by X1 (ISP-1).","title":"Select Preferred EBGP Peer with Weights"},{"location":"policy/1-weights/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. Each autonomous system advertises one loopback address and another IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (str). Node/ASN Router ID BGP RR Advertised prefixes AS65000 rtr 10.0.0.1 10.0.0.1/32 192.168.42.0/24 AS65100 x1 10.0.0.10 10.0.0.10/32 192.168.100.0/24 AS65101 x2 10.0.0.11 10.0.0.11/32 192.168.101.0/24 Your device (rtr) has these EBGP neighbors: Neighbor Neighbor IPv4 Neighbor AS x1 10.1.0.2 65100 x2 10.1.0.6 65101","title":"Existing BGP Configuration"},{"location":"policy/1-weights/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to policy/1-weights Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you\u2019re not using netlab just continue with the configuration you made during the previous exercise .","title":"Start the Lab"},{"location":"policy/1-weights/#configuration-tasks","text":"You want your device to prefer routes advertised by X1 over routes advertised by X2. For example, the route for X2\u2019s loopback interface should use X1 as the next hop. Many BGP implementations use a mechanism called weight (usually applied per neighbor) to prefer routes advertised by one of the BGP peers. If your device supports BGP weights , use them to prefer routes advertised by X1. Otherwise, you\u2019ll have to use BGP local preference to achieve the same result. Please note that applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change the BGP table as the new parameters might be evaluated only on new incoming updates \u2013 you might have to use a command similar to clear ip bgp * soft in to tell your router to ask its neighbors to resend their BGP updates.","title":"Configuration Tasks"},{"location":"policy/1-weights/#verification","text":"Examine the BGP table on your router to verify that the routes advertised by X1 (next hop: 10.1.0.2) are the best (active) routes. This is a printout you should get on Arista EOS: rtr#sh ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 200 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 100 65101 i * > 10.0.0.1/32 - - - - 0 i * > 10.0.0.10/32 10.1.0.2 0 - 100 200 65100 i * 10.0.0.10/32 10.1.0.6 0 - 100 100 65101 65100 i * > 10.0.0.11/32 10.1.0.2 0 - 100 200 65100 65101 i * 10.0.0.11/32 10.1.0.6 0 - 100 100 65101 i * > 192.168.42.0/24 - - - - 0 ? * > 192.168.100.0/24 10.1.0.2 0 - 100 200 65100 i * 192.168.100.0/24 10.1.0.6 0 - 100 100 65101 65100 i * > 192.168.101.0/24 10.1.0.2 0 - 100 200 65100 65101 i * 192.168.101.0/24 10.1.0.6 0 - 100 100 65101 i You could dig deeper and examine the details of an IPv4 prefix originated in AS 65101 (X2), for example 10.0.0.11. Yet again, the next hop of the best path should be X1 (10.1.0.2) rtr#show ip bgp 10.0.0.11 BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 BGP routing table entry for 10.0.0.11/32 Paths: 2 available 65100 65101 10.1.0.2 from 10.1.0.2 (10.0.0.10) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 200, tag 0 Received 00:02:47 ago, valid, external, best Rx SAFI: Unicast 65101 10.1.0.6 from 10.1.0.6 (10.0.0.11) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 100, tag 0 Received 00:02:47 ago, valid, external Rx SAFI: Unicast Next : Use AS-path filters to stop advertising transit routes .","title":"Verification"},{"location":"policy/1-weights/#reference-information","text":"You might find the following information useful if you\u2019re not using netlab to build the lab:","title":"Reference Information"},{"location":"policy/1-weights/#lab-wiring","text":"Link Name Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2","title":"Lab Wiring"},{"location":"policy/1-weights/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1","title":"Lab Addressing"},{"location":"policy/2-stop-transit/","text":"Filter Transit Routes In the previous lab exercises you configured EBGP sessions with two routers belonging to upstream ISPs. With no additional configuration, BGP routers propagate every route known to them to all neighbors, which means that your device propagates routes between AS 65100 and AS 65101 1 . That wouldn\u2019t be so bad if the ISP-2 wouldn\u2019t prefer customer routes over peer routes. Well, it does, and you became a transit network between ISP-2 and ISP-1. You don\u2019t have to trust me \u2013 log into X2 and execute sudo vtysh -c 'show ip bgp' command 2 . You\u2019ll see that the best paths to AS 65100 (ISP-1) go through AS 65000 (your network). Existing BGP Configuration The routers in your lab use the following BGP AS numbers. Each autonomous system advertises one loopback address and another IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID BGP RR Advertised prefixes AS65000 rtr 10.0.0.1 10.0.0.1/32 192.168.42.0/24 AS65100 x1 10.0.0.10 10.0.0.10/32 192.168.100.0/24 AS65101 x2 10.0.0.11 10.0.0.11/32 192.168.101.0/24 Your device (rtr) has these EBGP neighbors: Neighbor Neighbor IPv4 Neighbor AS x1 10.1.0.2 65100 x2 10.1.0.6 65101 Start the Lab Assuming you already set up your lab infrastructure : Change directory to policy/2-stop-transit Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you\u2019re not using netlab just continue with the configuration you made during the previous exercise . Configuration Tasks You have to filter BGP prefixes sent to X1 and X2, and advertise only prefixes with an empty AS path \u2013 the prefixes originating in your autonomous system 3 . On some BGP implementations (example: Cisco IOS and IOS XE, Cumulus Linux, FRR) you configure outbound AS-path filters in two steps: Configure an AS-path access list that matches an empty AS path 4 . Apply the AS-path access list as an outbound filter to all EBGP neighbors. Some other implementations (example: Arista EOS) might require a more convoluted approach using a route map as an intermediate step: After configuring the AS-path access list, create a route map that permits BGP prefixes matching your AS-path access list. Apply that route map as an outbound filter to all EBGP neighbors. Please note that applying filters to BGP neighbors doesn\u2019t necessarily trigger new updates \u2013 you might have to use a command similar to clear ip bgp * soft out to tell your router to recalculate and resend BGP prefixes from its BGP table to its neighbors. Verification Examine the BGP table on X1 and X2 to verify that your router advertises only routes from AS 65000. This is the printout you should get on X1: $ sudo vtysh -c 'show ip bgp' BGP table version is 6, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path * 10.0.0.1/32 10.1.0.10 0 65101 65000 i *> 10.1.0.1 0 65000 i *> 10.0.0.10/32 0.0.0.0 0 32768 i *> 10.0.0.11/32 10.1.0.10 0 0 65101 i * 192.168.42.0/24 10.1.0.10 0 65101 65000 ? *> 10.1.0.1 0 65000 ? *> 192.168.100.0/24 0.0.0.0 0 32768 i *> 192.168.101.0/24 10.1.0.10 0 0 65101 i Displayed 6 routes and 8 total paths Next : Filter prefixes advertised to EBGP neighbors Reference Information You might find the following information useful if you\u2019re not using netlab to build the lab: Lab Wiring Link Name Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1 Devices strictly compliant with RFC 8212 are an exception \u2013 they won\u2019t advertise anything to their EBGP neighbors unless you configured an outbound filter. \u21a9 sudo to make sure you\u2019re an admin user, vtysh is the name of the FRR CLI shell, and the -c argument passes the following argument to vtysh so you don\u2019t have to type another line. \u21a9 Please note that all BGP implementations I\u2019ve seen so far apply filters to the contents of the BGP table. Prefixes originated by your router have an empty AS path while they\u2019re in the BGP table of your router. \u21a9 I don\u2019t want you to waste too much time on regular expressions, so here\u2019s a hint: you can usually use ^$ to match an empty AS-path. \u21a9","title":"Filter Transit Routes"},{"location":"policy/2-stop-transit/#filter-transit-routes","text":"In the previous lab exercises you configured EBGP sessions with two routers belonging to upstream ISPs. With no additional configuration, BGP routers propagate every route known to them to all neighbors, which means that your device propagates routes between AS 65100 and AS 65101 1 . That wouldn\u2019t be so bad if the ISP-2 wouldn\u2019t prefer customer routes over peer routes. Well, it does, and you became a transit network between ISP-2 and ISP-1. You don\u2019t have to trust me \u2013 log into X2 and execute sudo vtysh -c 'show ip bgp' command 2 . You\u2019ll see that the best paths to AS 65100 (ISP-1) go through AS 65000 (your network).","title":"Filter Transit Routes"},{"location":"policy/2-stop-transit/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. Each autonomous system advertises one loopback address and another IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID BGP RR Advertised prefixes AS65000 rtr 10.0.0.1 10.0.0.1/32 192.168.42.0/24 AS65100 x1 10.0.0.10 10.0.0.10/32 192.168.100.0/24 AS65101 x2 10.0.0.11 10.0.0.11/32 192.168.101.0/24 Your device (rtr) has these EBGP neighbors: Neighbor Neighbor IPv4 Neighbor AS x1 10.1.0.2 65100 x2 10.1.0.6 65101","title":"Existing BGP Configuration"},{"location":"policy/2-stop-transit/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to policy/2-stop-transit Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you\u2019re not using netlab just continue with the configuration you made during the previous exercise .","title":"Start the Lab"},{"location":"policy/2-stop-transit/#configuration-tasks","text":"You have to filter BGP prefixes sent to X1 and X2, and advertise only prefixes with an empty AS path \u2013 the prefixes originating in your autonomous system 3 . On some BGP implementations (example: Cisco IOS and IOS XE, Cumulus Linux, FRR) you configure outbound AS-path filters in two steps: Configure an AS-path access list that matches an empty AS path 4 . Apply the AS-path access list as an outbound filter to all EBGP neighbors. Some other implementations (example: Arista EOS) might require a more convoluted approach using a route map as an intermediate step: After configuring the AS-path access list, create a route map that permits BGP prefixes matching your AS-path access list. Apply that route map as an outbound filter to all EBGP neighbors. Please note that applying filters to BGP neighbors doesn\u2019t necessarily trigger new updates \u2013 you might have to use a command similar to clear ip bgp * soft out to tell your router to recalculate and resend BGP prefixes from its BGP table to its neighbors.","title":"Configuration Tasks"},{"location":"policy/2-stop-transit/#verification","text":"Examine the BGP table on X1 and X2 to verify that your router advertises only routes from AS 65000. This is the printout you should get on X1: $ sudo vtysh -c 'show ip bgp' BGP table version is 6, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path * 10.0.0.1/32 10.1.0.10 0 65101 65000 i *> 10.1.0.1 0 65000 i *> 10.0.0.10/32 0.0.0.0 0 32768 i *> 10.0.0.11/32 10.1.0.10 0 0 65101 i * 192.168.42.0/24 10.1.0.10 0 65101 65000 ? *> 10.1.0.1 0 65000 ? *> 192.168.100.0/24 0.0.0.0 0 32768 i *> 192.168.101.0/24 10.1.0.10 0 0 65101 i Displayed 6 routes and 8 total paths Next : Filter prefixes advertised to EBGP neighbors","title":"Verification"},{"location":"policy/2-stop-transit/#reference-information","text":"You might find the following information useful if you\u2019re not using netlab to build the lab:","title":"Reference Information"},{"location":"policy/2-stop-transit/#lab-wiring","text":"Link Name Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2","title":"Lab Wiring"},{"location":"policy/2-stop-transit/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1 Devices strictly compliant with RFC 8212 are an exception \u2013 they won\u2019t advertise anything to their EBGP neighbors unless you configured an outbound filter. \u21a9 sudo to make sure you\u2019re an admin user, vtysh is the name of the FRR CLI shell, and the -c argument passes the following argument to vtysh so you don\u2019t have to type another line. \u21a9 Please note that all BGP implementations I\u2019ve seen so far apply filters to the contents of the BGP table. Prefixes originated by your router have an empty AS path while they\u2019re in the BGP table of your router. \u21a9 I don\u2019t want you to waste too much time on regular expressions, so here\u2019s a hint: you can usually use ^$ to match an empty AS-path. \u21a9","title":"Lab Addressing"},{"location":"policy/3-prefix/","text":"Filter Advertised Prefixes In the previous lab exercise you filtered prefixes advertised by your router based on the AS-path contents . That\u2019s the absolute minimum you should do, but it\u2019s not always enough \u2013 every other blue moon a network operator manages to mess up two-way redistribution and advertise hundreds of thousands of prefixes as belonging to their autonomous system. You should therefore filter the prefixes advertised to EBGP neighbors to ensure you advertise only the address space assigned to you. In our simple lab topology your device advertises a /24 prefix (that we\u2019ll assume is assigned to you) and a loopback (/32) prefix that should not be visible elsewhere. You don\u2019t have to trust me \u2013 log into X1 and execute sudo vtysh -c 'show ip bgp regexp 65000$' command 1 . You\u2019ll see that your autonomous system advertises two prefixes; this is what I got in my lab: x1(bash)#sudo vtysh -c 'show ip bgp regexp 65000$' BGP table version is 6, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path * 10.0.0.1/32 10.1.0.10 0 65101 65000 i *> 10.1.0.1 0 65000 i * 192.168.42.0/24 10.1.0.10 0 65101 65000 ? *> 10.1.0.1 0 65000 ? You could also use a command similar to show ip bgp show ip bgp neighbors neighbor-ip advertised-routes if it\u2019s available on your device to check what you\u2019re advertising to an individual neighbor. Existing BGP Configuration The routers in your lab use the following BGP AS numbers. Each autonomous system advertises one loopback address and another IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID BGP RR Advertised prefixes AS65000 rtr 10.0.0.1 10.0.0.1/32 192.168.42.0/24 AS65100 x1 10.0.0.10 10.0.0.10/32 192.168.100.0/24 AS65101 x2 10.0.0.11 10.0.0.11/32 192.168.101.0/24 Your device (rtr) has these EBGP neighbors: Neighbor Neighbor IPv4 Neighbor AS x1 10.1.0.2 65100 x2 10.1.0.6 65101 Start the Lab Assuming you already set up your lab infrastructure : Change directory to policy/3-prefix Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you\u2019re not using netlab just continue with the configuration you made during the previous exercise . Configuration Tasks You have to filter BGP prefixes sent to X1 and X2, and advertise only the 192.168.101.0/24 prefix. Most BGP implementations support prefix lists that can match IP prefixes and subnet masks; you should match both to ensure you\u2019re not advertising more-specific prefixes to your EBGP neighbors. On some BGP implementations (example: Cisco IOS and IOS XE, Cumulus Linux, FRR, Arista EOS) you can apply a prefix list as an inbound or outbound filter on a BGP neighbor. Some other implementations (example: Arista EOS) might require a more convoluted approach using a route map as an intermediate step: After configuring the prefix list , create a route map that permits BGP prefixes matching your prefix list . Apply that route map as an outbound filter to all EBGP neighbors. Please note that applying filters to BGP neighbors doesn\u2019t necessarily trigger new updates \u2013 you might have to use a command similar to clear ip bgp * soft out to tell your router to recalculate and resend BGP prefixes from its BGP table to its neighbors. Verification Examine the BGP table on X1 and X2 to verify that your router advertises only a single IPv4 prefix. This is the printout you should get on X1: $ sudo vtysh -c 'show ip bgp neighbor 10.1.0.1 routes' BGP table version is 8, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 192.168.42.0/24 10.1.0.1 0 65000 ? You can also check routes advertised to a neighbor on your device if it supports a command similar to show ip bgp show ip bgp neighbors neighbor-ip advertised-routes . This is how the printout looks on Arista EOS: rtr>show ip bgp neighbors 10.1.0.2 advertised-routes BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast, q - Queued for advertisement % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 192.168.42.0/24 10.1.0.1 - - - - 65000 ? Next : Reduce the size of your BGP table with inbound filters Reference Information You might find the following information useful if you\u2019re not using netlab to build the lab: Lab Wiring Link Name Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1 sudo to make sure you\u2019re an admin user, vtysh is the name of the FRR CLI shell, and the -c argument passes the following argument to vtysh so you don\u2019t have to type another line. The regexp part of the show command tells the device to display BGP entries where the AS path matches the regular expression and 65000$ matches all AS paths ending with 65000 (= originating in your network). \u21a9","title":"Filter Advertised Prefixes"},{"location":"policy/3-prefix/#filter-advertised-prefixes","text":"In the previous lab exercise you filtered prefixes advertised by your router based on the AS-path contents . That\u2019s the absolute minimum you should do, but it\u2019s not always enough \u2013 every other blue moon a network operator manages to mess up two-way redistribution and advertise hundreds of thousands of prefixes as belonging to their autonomous system. You should therefore filter the prefixes advertised to EBGP neighbors to ensure you advertise only the address space assigned to you. In our simple lab topology your device advertises a /24 prefix (that we\u2019ll assume is assigned to you) and a loopback (/32) prefix that should not be visible elsewhere. You don\u2019t have to trust me \u2013 log into X1 and execute sudo vtysh -c 'show ip bgp regexp 65000$' command 1 . You\u2019ll see that your autonomous system advertises two prefixes; this is what I got in my lab: x1(bash)#sudo vtysh -c 'show ip bgp regexp 65000$' BGP table version is 6, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path * 10.0.0.1/32 10.1.0.10 0 65101 65000 i *> 10.1.0.1 0 65000 i * 192.168.42.0/24 10.1.0.10 0 65101 65000 ? *> 10.1.0.1 0 65000 ? You could also use a command similar to show ip bgp show ip bgp neighbors neighbor-ip advertised-routes if it\u2019s available on your device to check what you\u2019re advertising to an individual neighbor.","title":"Filter Advertised Prefixes"},{"location":"policy/3-prefix/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. Each autonomous system advertises one loopback address and another IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID BGP RR Advertised prefixes AS65000 rtr 10.0.0.1 10.0.0.1/32 192.168.42.0/24 AS65100 x1 10.0.0.10 10.0.0.10/32 192.168.100.0/24 AS65101 x2 10.0.0.11 10.0.0.11/32 192.168.101.0/24 Your device (rtr) has these EBGP neighbors: Neighbor Neighbor IPv4 Neighbor AS x1 10.1.0.2 65100 x2 10.1.0.6 65101","title":"Existing BGP Configuration"},{"location":"policy/3-prefix/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to policy/3-prefix Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you\u2019re not using netlab just continue with the configuration you made during the previous exercise .","title":"Start the Lab"},{"location":"policy/3-prefix/#configuration-tasks","text":"You have to filter BGP prefixes sent to X1 and X2, and advertise only the 192.168.101.0/24 prefix. Most BGP implementations support prefix lists that can match IP prefixes and subnet masks; you should match both to ensure you\u2019re not advertising more-specific prefixes to your EBGP neighbors. On some BGP implementations (example: Cisco IOS and IOS XE, Cumulus Linux, FRR, Arista EOS) you can apply a prefix list as an inbound or outbound filter on a BGP neighbor. Some other implementations (example: Arista EOS) might require a more convoluted approach using a route map as an intermediate step: After configuring the prefix list , create a route map that permits BGP prefixes matching your prefix list . Apply that route map as an outbound filter to all EBGP neighbors. Please note that applying filters to BGP neighbors doesn\u2019t necessarily trigger new updates \u2013 you might have to use a command similar to clear ip bgp * soft out to tell your router to recalculate and resend BGP prefixes from its BGP table to its neighbors.","title":"Configuration Tasks"},{"location":"policy/3-prefix/#verification","text":"Examine the BGP table on X1 and X2 to verify that your router advertises only a single IPv4 prefix. This is the printout you should get on X1: $ sudo vtysh -c 'show ip bgp neighbor 10.1.0.1 routes' BGP table version is 8, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 192.168.42.0/24 10.1.0.1 0 65000 ? You can also check routes advertised to a neighbor on your device if it supports a command similar to show ip bgp show ip bgp neighbors neighbor-ip advertised-routes . This is how the printout looks on Arista EOS: rtr>show ip bgp neighbors 10.1.0.2 advertised-routes BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast, q - Queued for advertisement % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 192.168.42.0/24 10.1.0.1 - - - - 65000 ? Next : Reduce the size of your BGP table with inbound filters","title":"Verification"},{"location":"policy/3-prefix/#reference-information","text":"You might find the following information useful if you\u2019re not using netlab to build the lab:","title":"Reference Information"},{"location":"policy/3-prefix/#lab-wiring","text":"Link Name Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2","title":"Lab Wiring"},{"location":"policy/3-prefix/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1 sudo to make sure you\u2019re an admin user, vtysh is the name of the FRR CLI shell, and the -c argument passes the following argument to vtysh so you don\u2019t have to type another line. The regexp part of the show command tells the device to display BGP entries where the AS path matches the regular expression and 65000$ matches all AS paths ending with 65000 (= originating in your network). \u21a9","title":"Lab Addressing"},{"location":"policy/4-reduce/","text":"Minimize the Size of Your BGP Table In the previous lab exercises you establish EBGP sessions with two upstream Service Providers, accepted all routes they were willing to send you, and let your router do its magic selecting the best BGP routes (either based on AS-path length or weights ). That might not be a good idea if you bought cost-optimized hardware that can do packet forwarding at ludicrous speeds but only for a few tens of thousands of routes while your neighbors send you the full Internet BGP table (over 930.000 routes in August 2023). In this lab exercise you\u2019ll use inbound filters to reduce the amount of information inserted in the BGP table (and subsequently routing table) of your device. Your link to ISP-1 is much faster than the link to ISP-2, so you have to use ISP-1 for most of the outbound traffic. As X1 advertises a default route to you, you don\u2019t have to accept any other routing information from it. It would be a shame to let the link to ISP-2 remain idle while the link to ISP-1 is operational. Let\u2019s send the traffic for AS 65101 directly over the link to X2 \u2013 that means you have to accept prefixes originated in AS 65101 from X2. Finally, you\u2019ll need a default route even if the link to ISP-1 goes down. You should therefore accept the default route from ISP-2 as well, but make it less preferred than the one received from ISP-1. Existing BGP Configuration The routers in your lab use the following BGP AS numbers. Each autonomous system advertises one loopback address and another IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID BGP RR Advertised prefixes AS65000 rtr 10.0.0.1 10.0.0.1/32 192.168.42.0/24 AS65100 x1 10.0.0.10 10.0.0.10/32 192.168.100.0/24 AS65101 x2 10.0.0.11 10.0.0.11/32 192.168.101.0/24 Your device (rtr) has these EBGP neighbors: Neighbor Neighbor IPv4 Neighbor AS x1 10.1.0.2 65100 x2 10.1.0.6 65101 Start the Lab Assuming you already set up your lab infrastructure : Change directory to policy/4-reduce Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you\u2019re not using netlab just continue with the configuration you made during the previous exercise . Configuration Tasks Configure a prefix list that will accept just the default route and apply it as an inbound filter on the EBGP session with X1. You did something very similar in the Filter Advertised Prefixes exercise, so you should be familiar with the process. The inbound filter for X2 is a bit more complex: you have to accept a prefix if it originates in AS 65101 or if it\u2019s the default route. You already implemented prefix filters and AS-path based filters , now you have to combine them. Implementing such a condition usually requires a more complex routing policy; many BGP implementations call it a route map . Hint : You\u2019ll have to get fluent with regular expressions if you want to become a master of BGP routing policies, but let\u2019s do things one step at a time \u2013 the regular expression 65101$ matches prefixes originating in AS 65101. Finally, you have to make routes received from X1 preferred over routes received from X2. You did exactly that in the Select Preferred EBGP Peer with Weights exercise, so you\u2019re good to go. Verification Examine the BGP table on your device. It should contain: IP prefixes your device is originating; Two IP prefixes originated by X2 Two paths for the default route; the path advertised by X1 should be the best path. If you\u2019re using Arista EOS on your device you should get this printout: rtr#sh ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 200 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 100 65101 i * > 10.0.0.1/32 - - - - 0 i * > 10.0.0.11/32 10.1.0.6 0 - 100 100 65101 i * > 192.168.42.0/24 - - - - 0 ? * > 192.168.101.0/24 10.1.0.6 0 - 100 100 65101 i Reference Information You might find the following information useful if you\u2019re not using netlab to build the lab: Lab Wiring Link Name Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1","title":"Minimize the Size of Your BGP Table"},{"location":"policy/4-reduce/#minimize-the-size-of-your-bgp-table","text":"In the previous lab exercises you establish EBGP sessions with two upstream Service Providers, accepted all routes they were willing to send you, and let your router do its magic selecting the best BGP routes (either based on AS-path length or weights ). That might not be a good idea if you bought cost-optimized hardware that can do packet forwarding at ludicrous speeds but only for a few tens of thousands of routes while your neighbors send you the full Internet BGP table (over 930.000 routes in August 2023). In this lab exercise you\u2019ll use inbound filters to reduce the amount of information inserted in the BGP table (and subsequently routing table) of your device. Your link to ISP-1 is much faster than the link to ISP-2, so you have to use ISP-1 for most of the outbound traffic. As X1 advertises a default route to you, you don\u2019t have to accept any other routing information from it. It would be a shame to let the link to ISP-2 remain idle while the link to ISP-1 is operational. Let\u2019s send the traffic for AS 65101 directly over the link to X2 \u2013 that means you have to accept prefixes originated in AS 65101 from X2. Finally, you\u2019ll need a default route even if the link to ISP-1 goes down. You should therefore accept the default route from ISP-2 as well, but make it less preferred than the one received from ISP-1.","title":"Minimize the Size of Your BGP Table"},{"location":"policy/4-reduce/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. Each autonomous system advertises one loopback address and another IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID BGP RR Advertised prefixes AS65000 rtr 10.0.0.1 10.0.0.1/32 192.168.42.0/24 AS65100 x1 10.0.0.10 10.0.0.10/32 192.168.100.0/24 AS65101 x2 10.0.0.11 10.0.0.11/32 192.168.101.0/24 Your device (rtr) has these EBGP neighbors: Neighbor Neighbor IPv4 Neighbor AS x1 10.1.0.2 65100 x2 10.1.0.6 65101","title":"Existing BGP Configuration"},{"location":"policy/4-reduce/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to policy/4-reduce Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you\u2019re not using netlab just continue with the configuration you made during the previous exercise .","title":"Start the Lab"},{"location":"policy/4-reduce/#configuration-tasks","text":"Configure a prefix list that will accept just the default route and apply it as an inbound filter on the EBGP session with X1. You did something very similar in the Filter Advertised Prefixes exercise, so you should be familiar with the process. The inbound filter for X2 is a bit more complex: you have to accept a prefix if it originates in AS 65101 or if it\u2019s the default route. You already implemented prefix filters and AS-path based filters , now you have to combine them. Implementing such a condition usually requires a more complex routing policy; many BGP implementations call it a route map . Hint : You\u2019ll have to get fluent with regular expressions if you want to become a master of BGP routing policies, but let\u2019s do things one step at a time \u2013 the regular expression 65101$ matches prefixes originating in AS 65101. Finally, you have to make routes received from X1 preferred over routes received from X2. You did exactly that in the Select Preferred EBGP Peer with Weights exercise, so you\u2019re good to go.","title":"Configuration Tasks"},{"location":"policy/4-reduce/#verification","text":"Examine the BGP table on your device. It should contain: IP prefixes your device is originating; Two IP prefixes originated by X2 Two paths for the default route; the path advertised by X1 should be the best path. If you\u2019re using Arista EOS on your device you should get this printout: rtr#sh ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 200 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 100 65101 i * > 10.0.0.1/32 - - - - 0 i * > 10.0.0.11/32 10.1.0.6 0 - 100 100 65101 i * > 192.168.42.0/24 - - - - 0 ? * > 192.168.101.0/24 10.1.0.6 0 - 100 100 65101 i","title":"Verification"},{"location":"policy/4-reduce/#reference-information","text":"You might find the following information useful if you\u2019re not using netlab to build the lab:","title":"Reference Information"},{"location":"policy/4-reduce/#lab-wiring","text":"Link Name Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2","title":"Lab Wiring"},{"location":"policy/4-reduce/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1","title":"Lab Addressing"}]}