{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Open-Source BGP Configuration Labs This series of BGP hands-on labs will help you master numerous aspects of EBGP, IBGP, and BGP routing policy configuration on a platform of your choice 1 , including: Arista EOS Aruba AOS-CX Cisco ASAv, IOSv, IOS XE, IOS XR and Nexus OS Cumulus Linux and FRR Dell OS10 Juniper vSRX, vMX and vPTX Mikrotik RouterOS Nokia SR OS and SR Linux Vyatta VyOS More than a dozen labs are already waiting for you (with more coming in the near future ), but if this is your first visit to this site, you should start with the Installation and Setup documentation. Deploy BGP in Your Network In the first set of the BGP labs, you\u2019ll master these skills: Configure BGP sessions and advertise IPv4 and IPv6 prefixes Protect BGP sessions Run BGP in networks with more than one BGP router Configure advanced BGP features like BFD or BGP route aggregation. BGP Routing Policies These lab exercises will help you master the basic tools you can use to build BGP routing policies that will: Filter BGP Updates Adjust Outgoing Traffic Flow Influence Incoming Traffic Flow Some assembly required: the virtual machines or containers that we recommend to use as external BGP speakers are easy to download, but you\u2019ll have to build a Vagrant box or install a vendor-supplied Vagrant box or Docker container image for most other platforms. See installation and setup for details. \u21a9","title":"Labs Overview"},{"location":"#open-source-bgp-configuration-labs","text":"This series of BGP hands-on labs will help you master numerous aspects of EBGP, IBGP, and BGP routing policy configuration on a platform of your choice 1 , including: Arista EOS Aruba AOS-CX Cisco ASAv, IOSv, IOS XE, IOS XR and Nexus OS Cumulus Linux and FRR Dell OS10 Juniper vSRX, vMX and vPTX Mikrotik RouterOS Nokia SR OS and SR Linux Vyatta VyOS More than a dozen labs are already waiting for you (with more coming in the near future ), but if this is your first visit to this site, you should start with the Installation and Setup documentation.","title":"Open-Source BGP Configuration Labs"},{"location":"#deploy-bgp-in-your-network","text":"In the first set of the BGP labs, you\u2019ll master these skills: Configure BGP sessions and advertise IPv4 and IPv6 prefixes Protect BGP sessions Run BGP in networks with more than one BGP router Configure advanced BGP features like BFD or BGP route aggregation.","title":"Deploy BGP in Your Network"},{"location":"#policy","text":"These lab exercises will help you master the basic tools you can use to build BGP routing policies that will: Filter BGP Updates Adjust Outgoing Traffic Flow Influence Incoming Traffic Flow Some assembly required: the virtual machines or containers that we recommend to use as external BGP speakers are easy to download, but you\u2019ll have to build a Vagrant box or install a vendor-supplied Vagrant box or Docker container image for most other platforms. See installation and setup for details. \u21a9","title":"BGP Routing Policies"},{"location":"1-setup/","text":"Software Installation and Lab Setup It\u2019s easiest to use the BGP labs with netlab , but you can use most of them (potentially with slightly reduced functionality) with any other virtual lab environment or on physical gear. For the rest of this document we\u2019ll assume you decided to use netlab ; if you want to set up your lab in some other way you might find the Manual Setup document useful. Warning BGP labs work best with netlab release 1.6.4 or later. If you\u2019re using an earlier netlab release, please upgrade with pip3 install --upgrade networklab . Selecting the Network Devices The labs heavily rely on external BGP feeds \u2013 preconfigured devices that you have to connect to and exchange routing information with. Use Cumulus Linux on those devices if you\u2019re running a netlab release prior to 1.6.4. With release 1.6.4 (and later) you can choose any one of these devices for your external BGP feeds 3 : Environment Devices that can be used as external BGP feeds 1 Recommended Containers (clab) Arista EOS, Aruba AOS-CX, Cumulus Linux, FRR, Nokia SR Linux 2 FRR ( frr ) 4 Virtual machines (libvirt) Arista EOS, Aruba AOS-CX, Cisco IOSv, Cisco IOS-XE, Cumulus Linux, FRR Cumulus Linux ( cumulus ) 5 Virtual machines (Virtualbox) Arista EOS, Cisco IOSv, Cisco IOS-XE, Cumulus Linux, FRR Cumulus Linux ( cumulus ) You can run Cumulus Linux (and FRR) in all netlab -supported virtualization environments (VirtualBox, libvirt or Docker), and if you want to start practicing BGP with minimum hassle consider using it for all lab devices. Obviously you can use any other netlab -supported device for which we implemented basic BGP configuration as the device to practice with. Selecting the Virtualization Environment Now that you know which network device you want to use, check which virtualization environment you can use. I would prefer containerlab over libvirt with virtualbox being a distant third, but that\u2019s just me. There\u2019s a gotcha though: you can use containerlab and libvirt only on a Linux host. You can use virtualbox if you want to run the lab devices as virtual machines on your Windows- or MacOS laptop, but even then I\u2019d prefer running them in a Ubuntu VM running on the laptop . One more gotcha: your hardware and virtualization software (example: VirtualBox or VMware Fusion) must support nested virtualization if you want to use libvirt on that Ubuntu VM. You don\u2019t nested virtualization to run Docker containers, unless you\u2019re using the crazy trick we\u2019re forced to use for Aruba AOS-CX, Juniper vMX or Nokia SR OS \u2013 they\u2019re running as a virtual machine within a container . Software Installation Based on the choices you made, you\u2019ll find the installation instructions in one of these documents: Virtualbox-Based Lab on Windows or MacOS Ubuntu VM Installation on Windows or MacOS Ubuntu Server Installation Running netlab on any other Linux Server Running netlab in a Public Cloud Once you completed the software installation you have to deal with the stupidities of downloading and installing network device images ( Virtualbox , libvirt , containers ) unless you decided to use Cumulus Linux, FRR, Nokia SR Linux, or Vyos. I would love to make the whole process simpler, but the networking vendors refuse to play along. Even worse, it looks like 6 their licenses prohibit me from downloading the images and creating a packaged VM with preinstalled network devices for you. Fortunately, you only have to go through this colossal waste of time once. Setting Up the Labs We finally got to the fun part \u2013 setting up the labs: Select a directory where you want to have the BGP labs Clone the bgplab GitHub repository with git clone git@github.com:bgplab/bgplab.git . GitHub UI gives you other options in the green Code button, including Download ZIP Open the defaults.yml file in the main directory and edit it to set your preferred network device and virtualization environment. For example, I\u2019m using the following settings to run the labs with Arista EOS containers while using FRR as the external BGP feeds: device: eos # Change to your preferred network device provider: clab # Change to virtualbox or libvirt if needed groups: external: device: frr # Change to your preferred external router In a terminal window, change current directory to one of the lab directories (for example, basic/1-session ), and execute netlab up . Wait for the lab to start and use netlab connect to connect to individual lab devices Have fun. When you\u2019re done, collect the device configurations with netlab collect (if you want to save them) and shut down the lab with netlab down Change current directory to another lab directory and repeat. Once you run out of lab exercises, create a new one and contribute it with a pull request ;) You can only use devices supported by bgp.session and bgp.policy netlab plugins as external BGP feeds. \u21a9 You need netlab release 1.6.4-post2 to use Nokia SR Linux as additional routers in more complex labs. You will also need to install additional software to configure Nokia SR Linux. \u21a9 If you\u2019d like to use other devices as external BGP feeds and are willing to contribute your changes, please add the support for your devices to bgp.session and bgp.policy plugins. Thank you! \u21a9 An FRR container starts slightly faster than a Cumulus Linux container. Also, the FRR containers are built by the FRR project, while the Cumulus Linux containers are a result of a hobby project of their former employee. \u21a9 There is no official FRR virtual machine image \u2013 netlab has to download and install FRR on a Ubuntu VM every time you start an frr node as a virtual machine. Using Cumulus Linux Vagrant box is faster and consumes way less bandwidth. \u21a9 I\u2019m not going to pay a lawyer to read their boilerplate stuff, and I\u2019m definitely not going to rely on my amateur understanding of US copyright law. \u21a9","title":"Installation and Setup"},{"location":"1-setup/#software-installation-and-lab-setup","text":"It\u2019s easiest to use the BGP labs with netlab , but you can use most of them (potentially with slightly reduced functionality) with any other virtual lab environment or on physical gear. For the rest of this document we\u2019ll assume you decided to use netlab ; if you want to set up your lab in some other way you might find the Manual Setup document useful. Warning BGP labs work best with netlab release 1.6.4 or later. If you\u2019re using an earlier netlab release, please upgrade with pip3 install --upgrade networklab .","title":"Software Installation and Lab Setup"},{"location":"1-setup/#selecting-the-network-devices","text":"The labs heavily rely on external BGP feeds \u2013 preconfigured devices that you have to connect to and exchange routing information with. Use Cumulus Linux on those devices if you\u2019re running a netlab release prior to 1.6.4. With release 1.6.4 (and later) you can choose any one of these devices for your external BGP feeds 3 : Environment Devices that can be used as external BGP feeds 1 Recommended Containers (clab) Arista EOS, Aruba AOS-CX, Cumulus Linux, FRR, Nokia SR Linux 2 FRR ( frr ) 4 Virtual machines (libvirt) Arista EOS, Aruba AOS-CX, Cisco IOSv, Cisco IOS-XE, Cumulus Linux, FRR Cumulus Linux ( cumulus ) 5 Virtual machines (Virtualbox) Arista EOS, Cisco IOSv, Cisco IOS-XE, Cumulus Linux, FRR Cumulus Linux ( cumulus ) You can run Cumulus Linux (and FRR) in all netlab -supported virtualization environments (VirtualBox, libvirt or Docker), and if you want to start practicing BGP with minimum hassle consider using it for all lab devices. Obviously you can use any other netlab -supported device for which we implemented basic BGP configuration as the device to practice with.","title":"Selecting the Network Devices"},{"location":"1-setup/#selecting-the-virtualization-environment","text":"Now that you know which network device you want to use, check which virtualization environment you can use. I would prefer containerlab over libvirt with virtualbox being a distant third, but that\u2019s just me. There\u2019s a gotcha though: you can use containerlab and libvirt only on a Linux host. You can use virtualbox if you want to run the lab devices as virtual machines on your Windows- or MacOS laptop, but even then I\u2019d prefer running them in a Ubuntu VM running on the laptop . One more gotcha: your hardware and virtualization software (example: VirtualBox or VMware Fusion) must support nested virtualization if you want to use libvirt on that Ubuntu VM. You don\u2019t nested virtualization to run Docker containers, unless you\u2019re using the crazy trick we\u2019re forced to use for Aruba AOS-CX, Juniper vMX or Nokia SR OS \u2013 they\u2019re running as a virtual machine within a container .","title":"Selecting the Virtualization Environment"},{"location":"1-setup/#software-installation","text":"Based on the choices you made, you\u2019ll find the installation instructions in one of these documents: Virtualbox-Based Lab on Windows or MacOS Ubuntu VM Installation on Windows or MacOS Ubuntu Server Installation Running netlab on any other Linux Server Running netlab in a Public Cloud Once you completed the software installation you have to deal with the stupidities of downloading and installing network device images ( Virtualbox , libvirt , containers ) unless you decided to use Cumulus Linux, FRR, Nokia SR Linux, or Vyos. I would love to make the whole process simpler, but the networking vendors refuse to play along. Even worse, it looks like 6 their licenses prohibit me from downloading the images and creating a packaged VM with preinstalled network devices for you. Fortunately, you only have to go through this colossal waste of time once.","title":"Software Installation"},{"location":"1-setup/#setting-up-the-labs","text":"We finally got to the fun part \u2013 setting up the labs: Select a directory where you want to have the BGP labs Clone the bgplab GitHub repository with git clone git@github.com:bgplab/bgplab.git . GitHub UI gives you other options in the green Code button, including Download ZIP Open the defaults.yml file in the main directory and edit it to set your preferred network device and virtualization environment. For example, I\u2019m using the following settings to run the labs with Arista EOS containers while using FRR as the external BGP feeds: device: eos # Change to your preferred network device provider: clab # Change to virtualbox or libvirt if needed groups: external: device: frr # Change to your preferred external router In a terminal window, change current directory to one of the lab directories (for example, basic/1-session ), and execute netlab up . Wait for the lab to start and use netlab connect to connect to individual lab devices Have fun. When you\u2019re done, collect the device configurations with netlab collect (if you want to save them) and shut down the lab with netlab down Change current directory to another lab directory and repeat. Once you run out of lab exercises, create a new one and contribute it with a pull request ;) You can only use devices supported by bgp.session and bgp.policy netlab plugins as external BGP feeds. \u21a9 You need netlab release 1.6.4-post2 to use Nokia SR Linux as additional routers in more complex labs. You will also need to install additional software to configure Nokia SR Linux. \u21a9 If you\u2019d like to use other devices as external BGP feeds and are willing to contribute your changes, please add the support for your devices to bgp.session and bgp.policy plugins. Thank you! \u21a9 An FRR container starts slightly faster than a Cumulus Linux container. Also, the FRR containers are built by the FRR project, while the Cumulus Linux containers are a result of a hobby project of their former employee. \u21a9 There is no official FRR virtual machine image \u2013 netlab has to download and install FRR on a Ubuntu VM every time you start an frr node as a virtual machine. Using Cumulus Linux Vagrant box is faster and consumes way less bandwidth. \u21a9 I\u2019m not going to pay a lawyer to read their boilerplate stuff, and I\u2019m definitely not going to rely on my amateur understanding of US copyright law. \u21a9","title":"Setting Up the Labs"},{"location":"2-labs-by-technology/","text":"Labs Sorted by BGP Attributes and Technologies This page contains the alphabetical list of BGP attributes and technologies, and the labs you can use to practice them: Address families Configure BGP for IPv6 Advertising IP prefixes Advertise your IPv4 address space Configure BGP for IPv6 Redistribute IGP Information Into BGP BGP route aggregation AS-path filters Prevent route leaking between upstream providers with an AS-path filter Use the backup link to reach the adjacent autonomous system . AS-path prepending Use AS-Path Prepending to Influence Incoming Traffic Flow BFD (Bidirectional Forwarding Detection) Use BFD to Speed Up BGP Convergence EBGP sessions Establish an EBGP session with an ISP Connect to two upstream providers GTSM (Generic TTL Security Mechanism) Use MD5 passwords and TTL-based session protection IBGP sessions Establish an IBGP session between WAN edge routers Build a Transit Network with IBGP LOCAL_PREF (Local Preference) Implement a consistent AS-wide routing policy with BGP local preference. Use the backup link to reach the adjacent autonomous system . MD5 passwords Use MD5 passwords and TTL-based session protection MULTI_EXIT_DISC (Multi-Exit Discriminator, MED) Use MED to Influence Incoming Traffic Flow Prefix filters Filter prefixes advertised by your autonomous system with a prefix list Minimize the size of your BGP table with inbound filters Use the backup link to reach the adjacent autonomous system . TCP-AO Use TCP Authentication Option (TCP-AO) TTL security Use MD5 passwords and TTL-based session protection Weights Use BGP weights to prefer one of the upstream providers","title":"Labs by BGP Attributes and Technologies"},{"location":"2-labs-by-technology/#labs-sorted-by-bgp-attributes-and-technologies","text":"This page contains the alphabetical list of BGP attributes and technologies, and the labs you can use to practice them: Address families Configure BGP for IPv6 Advertising IP prefixes Advertise your IPv4 address space Configure BGP for IPv6 Redistribute IGP Information Into BGP BGP route aggregation AS-path filters Prevent route leaking between upstream providers with an AS-path filter Use the backup link to reach the adjacent autonomous system . AS-path prepending Use AS-Path Prepending to Influence Incoming Traffic Flow BFD (Bidirectional Forwarding Detection) Use BFD to Speed Up BGP Convergence EBGP sessions Establish an EBGP session with an ISP Connect to two upstream providers GTSM (Generic TTL Security Mechanism) Use MD5 passwords and TTL-based session protection IBGP sessions Establish an IBGP session between WAN edge routers Build a Transit Network with IBGP LOCAL_PREF (Local Preference) Implement a consistent AS-wide routing policy with BGP local preference. Use the backup link to reach the adjacent autonomous system . MD5 passwords Use MD5 passwords and TTL-based session protection MULTI_EXIT_DISC (Multi-Exit Discriminator, MED) Use MED to Influence Incoming Traffic Flow Prefix filters Filter prefixes advertised by your autonomous system with a prefix list Minimize the size of your BGP table with inbound filters Use the backup link to reach the adjacent autonomous system . TCP-AO Use TCP Authentication Option (TCP-AO) TTL security Use MD5 passwords and TTL-based session protection Weights Use BGP weights to prefer one of the upstream providers","title":"Labs Sorted by BGP Attributes and Technologies"},{"location":"3-upcoming/","text":"Upcoming Labs While we\u2019re working on new stuff you can already enjoy over a dozen labs. In case you\u2019re curious about what\u2019s coming next, here are a few ideas: Basic BGP Setup Optional exercises: Use session templates and BGP peer groups Advanced exercises: Change the BGP AS number presented to the BGP neighbor ( local-as functionality) Disable AS path check on incoming updates ( allowas-in functionality) Remove private AS numbers from the AS path Run EBGP over unnumbered IPv4 interfaces or over IPv6 link-local addresses Run IPv4 and IPv6 over the same BGP session Fine-tune BGP Fast External Failover Configure BGP graceful restart Simple BGP Routing Policies Perform simple load balancing across parallel links and upstream providers Use BGP link bandwidth to influence the load-balancing weights Advanced exercises: Use BGP route refresh and soft reconfiguration Use outbound route filters (ORF) BGP in Enterprise Networks Use AS-path prepending to influence route selection across multiple upstream ISPs Controlling Inbound Traffic Use BGP communities to influence route selection in upstream ISPs Use controlled disaggregation to influence inbound traffic flow Use conditional route advertisements to select primary/backup links for the inbound traffic BGP in Service Provider Networks Build a simple service provider network with IBGP Use BGP route reflectors to reduce the number of IBGP sessions Use a hierarchy of route reflectors Build a transit autonomous system using BGP communities to change routing policies Reduce routing instabilities with BGP route flap dampening Implement policy-based routing with BGP Use MPLS with BGP Use MPLS to build a BGP-free core Use SR-MPLS to minimize the number of control-plane protocols Use BGP Labeled Unicast to extend MPLS paths across multiple autonomous systems","title":"Upcoming Labs"},{"location":"3-upcoming/#upcoming-labs","text":"While we\u2019re working on new stuff you can already enjoy over a dozen labs. In case you\u2019re curious about what\u2019s coming next, here are a few ideas:","title":"Upcoming Labs"},{"location":"3-upcoming/#basic-bgp-setup","text":"Optional exercises: Use session templates and BGP peer groups Advanced exercises: Change the BGP AS number presented to the BGP neighbor ( local-as functionality) Disable AS path check on incoming updates ( allowas-in functionality) Remove private AS numbers from the AS path Run EBGP over unnumbered IPv4 interfaces or over IPv6 link-local addresses Run IPv4 and IPv6 over the same BGP session Fine-tune BGP Fast External Failover Configure BGP graceful restart","title":"Basic BGP Setup"},{"location":"3-upcoming/#simple-bgp-routing-policies","text":"Perform simple load balancing across parallel links and upstream providers Use BGP link bandwidth to influence the load-balancing weights Advanced exercises: Use BGP route refresh and soft reconfiguration Use outbound route filters (ORF)","title":"Simple BGP Routing Policies"},{"location":"3-upcoming/#bgp-in-enterprise-networks","text":"Use AS-path prepending to influence route selection across multiple upstream ISPs","title":"BGP in Enterprise Networks"},{"location":"3-upcoming/#controlling-inbound-traffic","text":"Use BGP communities to influence route selection in upstream ISPs Use controlled disaggregation to influence inbound traffic flow Use conditional route advertisements to select primary/backup links for the inbound traffic","title":"Controlling Inbound Traffic"},{"location":"3-upcoming/#bgp-in-service-provider-networks","text":"Build a simple service provider network with IBGP Use BGP route reflectors to reduce the number of IBGP sessions Use a hierarchy of route reflectors Build a transit autonomous system using BGP communities to change routing policies Reduce routing instabilities with BGP route flap dampening Implement policy-based routing with BGP","title":"BGP in Service Provider Networks"},{"location":"3-upcoming/#use-mpls-with-bgp","text":"Use MPLS to build a BGP-free core Use SR-MPLS to minimize the number of control-plane protocols Use BGP Labeled Unicast to extend MPLS paths across multiple autonomous systems","title":"Use MPLS with BGP"},{"location":"basic/","text":"Deploy BGP in Your Network The first set of the BGP labs focuses on the basics: Configuring BGP sessions and advertising IPv4 and IPv6 prefixes Protecting BGP sessions Running BGP in networks with more than one BGP router Other valuable topics like using BFD or BGP route aggregation. It\u2019s best if you take the labs in this order: Simple BGP Deployments In these labs, you\u2019ll learn how to: Establish an EBGP session with an ISP Connect to two upstream providers Advertise your IPv4 address space Configure BGP for IPv6 Redistribute IGP Information Into BGP Protecting BGP Sessions (Optional) You should always protect the control plane of your router and the routing protocols it\u2019s running. While it\u2019s impossible to achieve perfect results without using access control lists, you should also master the BGP tools at your disposal: Use MD5 passwords and TTL-based session protection Use TCP Authentication Option (TCP-AO) Running BGP in Larger Networks If your network has multiple BGP routers, they must exchange BGP information. While it\u2019s possible to build a network where each BGP router uses a different autonomous system number (hint: don\u2019t), running Internal BGP (IBGP) between routers in your network is more common. Establish an IBGP session between WAN edge routers Build a Transit Network with IBGP Other Useful Topics Willing to learn more? Challenge yourself with these advanced topics: Use BFD to Speed Up BGP Convergence BGP route aggregation","title":"Overview"},{"location":"basic/#deploy-bgp-in-your-network","text":"The first set of the BGP labs focuses on the basics: Configuring BGP sessions and advertising IPv4 and IPv6 prefixes Protecting BGP sessions Running BGP in networks with more than one BGP router Other valuable topics like using BFD or BGP route aggregation. It\u2019s best if you take the labs in this order:","title":"Deploy BGP in Your Network"},{"location":"basic/#simple","text":"In these labs, you\u2019ll learn how to: Establish an EBGP session with an ISP Connect to two upstream providers Advertise your IPv4 address space Configure BGP for IPv6 Redistribute IGP Information Into BGP","title":"Simple BGP Deployments"},{"location":"basic/#protect","text":"You should always protect the control plane of your router and the routing protocols it\u2019s running. While it\u2019s impossible to achieve perfect results without using access control lists, you should also master the BGP tools at your disposal: Use MD5 passwords and TTL-based session protection Use TCP Authentication Option (TCP-AO)","title":"Protecting BGP Sessions (Optional)"},{"location":"basic/#ibgp","text":"If your network has multiple BGP routers, they must exchange BGP information. While it\u2019s possible to build a network where each BGP router uses a different autonomous system number (hint: don\u2019t), running Internal BGP (IBGP) between routers in your network is more common. Establish an IBGP session between WAN edge routers Build a Transit Network with IBGP","title":"Running BGP in Larger Networks"},{"location":"basic/#advanced","text":"Willing to learn more? Challenge yourself with these advanced topics: Use BFD to Speed Up BGP Convergence BGP route aggregation","title":"Other Useful Topics"},{"location":"basic/1-session/","text":"Configure a Single EBGP Session We\u2019ll start with the simplest possible scenario: configure an EBGP session between your device and an upstream router (X1). Note: if you\u2019re creating your lab infrastructure manually , it might be better to skip this exercise and go straight to configuring two uplinks . Start the Lab Assuming you already set up your lab infrastructure : Change directory to basic/1-session Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify that the IP addresses are configured on all its interfaces. Configuration Tasks Configure an EBGP session using the following parameters: neighbor IP address neighbor AS number 10.1.0.2 65100 Warning If your device happens to be fully compliant with RFC 8212 (example: Cisco IOS XR), you\u2019ll have to configure a permit everything incoming filter on the EBGP session or your device won\u2019t accept updates from its EBGP neighbor(s). On some devices you\u2019ll also have to activate the EBGP session within the IPv4 address family to tell the BGP daemon on your router to accept IPv4 prefixes from its neighbor. Finally, it\u2019s always a good idea to configure: Neighbor description to simplify troubleshooting and BGP session logging to get an information message when the BGP session is established. Verification Check the state of the BGP session with a command similar to show ip bgp summary . This is a printout taken from Arista EOS: rtr#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 10.1.0.2 4 65100 33 37 0 0 00:01:25 Estab 2 2 Finally, use a command similar to show ip bgp to verify that your router received two prefixes from the EBGP neighbor: the default route and the loopback remote interface (10.0.0.10/32). This is how the printout looks like on Arista EOS: rtr#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 0 65100 i * > 10.0.0.10/32 10.1.0.2 0 - 100 0 65100 i Next: Connect with the second upstream provider and advertise your address space. Reference Information You might find the following information useful if you\u2019re not using netlab to build the lab: Lab Wiring This lab uses a subset of the 4-router lab topology : Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr","title":"Configure a Single EBGP Session"},{"location":"basic/1-session/#configure-a-single-ebgp-session","text":"We\u2019ll start with the simplest possible scenario: configure an EBGP session between your device and an upstream router (X1). Note: if you\u2019re creating your lab infrastructure manually , it might be better to skip this exercise and go straight to configuring two uplinks .","title":"Configure a Single EBGP Session"},{"location":"basic/1-session/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/1-session Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify that the IP addresses are configured on all its interfaces.","title":"Start the Lab"},{"location":"basic/1-session/#configuration-tasks","text":"Configure an EBGP session using the following parameters: neighbor IP address neighbor AS number 10.1.0.2 65100 Warning If your device happens to be fully compliant with RFC 8212 (example: Cisco IOS XR), you\u2019ll have to configure a permit everything incoming filter on the EBGP session or your device won\u2019t accept updates from its EBGP neighbor(s). On some devices you\u2019ll also have to activate the EBGP session within the IPv4 address family to tell the BGP daemon on your router to accept IPv4 prefixes from its neighbor. Finally, it\u2019s always a good idea to configure: Neighbor description to simplify troubleshooting and BGP session logging to get an information message when the BGP session is established.","title":"Configuration Tasks"},{"location":"basic/1-session/#verification","text":"Check the state of the BGP session with a command similar to show ip bgp summary . This is a printout taken from Arista EOS: rtr#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 10.1.0.2 4 65100 33 37 0 0 00:01:25 Estab 2 2 Finally, use a command similar to show ip bgp to verify that your router received two prefixes from the EBGP neighbor: the default route and the loopback remote interface (10.0.0.10/32). This is how the printout looks like on Arista EOS: rtr#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 0 65100 i * > 10.0.0.10/32 10.1.0.2 0 - 100 0 65100 i Next: Connect with the second upstream provider and advertise your address space.","title":"Verification"},{"location":"basic/1-session/#reference-information","text":"You might find the following information useful if you\u2019re not using netlab to build the lab:","title":"Reference Information"},{"location":"basic/1-session/#lab-wiring","text":"This lab uses a subset of the 4-router lab topology : Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1","title":"Lab Wiring"},{"location":"basic/1-session/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr","title":"Lab Addressing"},{"location":"basic/2-multihomed/","text":"Configure Multiple EBGP Sessions Now that you know how to configure an EBGP session let\u2019s move on to a more realistic scenario: you have a site with a WAN edge router connected to two upstream ISPs, and you\u2019re running EBGP with them. The routers in your lab use the following BGP AS numbers. Each upstream router advertises an IPv4 prefix and the default route. Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Start the Lab Assuming you already set up your lab infrastructure : Change directory to basic/2-multihomed Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify that the IP addresses are configured on all its interfaces. Configuration Tasks Configure EBGP sessions using the following parameters: Node Neighbor Neighbor IPv4 Neighbor AS rtr x1 10.1.0.2 65100 rtr x2 10.1.0.6 65101 Warning If your device happens to be fully compliant with RFC 8212 (example: Cisco IOS XR), you\u2019ll have to configure a permit everything incoming filter on all EBGP neighbors or your device won\u2019t accept anything they send you. You might also want to configure neighbor description and BGP session logging to get an information message when the BGP session is established. Verification Check the state of the BGP session with a command similar to show ip bgp summary . This is a printout taken from Arista EOS: rtr#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 10.1.0.2 4 65100 9 8 0 0 00:00:10 Estab 2 2 10.1.0.6 4 65101 7 6 0 0 00:00:06 Estab 2 2 Finally, use a command similar to show ip bgp to verify that your router received three prefixes from each EBGP neighbor: the IPv4 prefix configured on the remote loopback interface, another IPv4 prefix, and the default route. This is how the printout looks like on Arista EOS: rtr#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 0 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 0 65101 i * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i * > 192.168.101.0/24 10.1.0.6 0 - 100 0 65101 i Next: Advertise your IPv4 address space to the EBGP neighbors Reference Information You might find the following information useful if you\u2019re not using netlab to build the lab: Lab Wiring This lab uses a subset of the 4-router lab topology : Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback eth1 10.1.0.2/30 x1 -> rtr x2 192.168.101.1/24 Loopback eth1 10.1.0.6/30 x2 -> rtr","title":"Configure Multiple EBGP Sessions"},{"location":"basic/2-multihomed/#configure-multiple-ebgp-sessions","text":"Now that you know how to configure an EBGP session let\u2019s move on to a more realistic scenario: you have a site with a WAN edge router connected to two upstream ISPs, and you\u2019re running EBGP with them. The routers in your lab use the following BGP AS numbers. Each upstream router advertises an IPv4 prefix and the default route. Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24","title":"Configure Multiple EBGP Sessions"},{"location":"basic/2-multihomed/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/2-multihomed Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify that the IP addresses are configured on all its interfaces.","title":"Start the Lab"},{"location":"basic/2-multihomed/#configuration-tasks","text":"Configure EBGP sessions using the following parameters: Node Neighbor Neighbor IPv4 Neighbor AS rtr x1 10.1.0.2 65100 rtr x2 10.1.0.6 65101 Warning If your device happens to be fully compliant with RFC 8212 (example: Cisco IOS XR), you\u2019ll have to configure a permit everything incoming filter on all EBGP neighbors or your device won\u2019t accept anything they send you. You might also want to configure neighbor description and BGP session logging to get an information message when the BGP session is established.","title":"Configuration Tasks"},{"location":"basic/2-multihomed/#verification","text":"Check the state of the BGP session with a command similar to show ip bgp summary . This is a printout taken from Arista EOS: rtr#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 10.1.0.2 4 65100 9 8 0 0 00:00:10 Estab 2 2 10.1.0.6 4 65101 7 6 0 0 00:00:06 Estab 2 2 Finally, use a command similar to show ip bgp to verify that your router received three prefixes from each EBGP neighbor: the IPv4 prefix configured on the remote loopback interface, another IPv4 prefix, and the default route. This is how the printout looks like on Arista EOS: rtr#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 0 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 0 65101 i * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i * > 192.168.101.0/24 10.1.0.6 0 - 100 0 65101 i Next: Advertise your IPv4 address space to the EBGP neighbors","title":"Verification"},{"location":"basic/2-multihomed/#reference-information","text":"You might find the following information useful if you\u2019re not using netlab to build the lab:","title":"Reference Information"},{"location":"basic/2-multihomed/#lab-wiring","text":"This lab uses a subset of the 4-router lab topology : Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1","title":"Lab Wiring"},{"location":"basic/2-multihomed/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback eth1 10.1.0.2/30 x1 -> rtr x2 192.168.101.1/24 Loopback eth1 10.1.0.6/30 x2 -> rtr","title":"Lab Addressing"},{"location":"basic/3-originate/","text":"Advertise IPv4 Prefixes to BGP Neighbors In the previous lab exercise , you configured EBGP sessions with two routers belonging to upstream ISPs. Now it\u2019s time to advertise your address space (IPv4 prefixes) to them so you\u2019ll start receiving some traffic. The routers in your lab use the following BGP AS numbers. Each upstream router advertises an IPv4 prefix and the default route. Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure them manually. Node Neighbor Neighbor IPv4 Neighbor AS rtr x1 10.1.0.2 65100 rtr x2 10.1.0.6 65101 Start the Lab Assuming you already set up your lab infrastructure : Change directory to basic/3-originate Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and basic BGP configuration. Note: netlab will configure IP addressing and EBGP sessions on your router. If you\u2019re not using netlab , just continue with the configuration you made during the previous exercise . Configuration Tasks You have to advertise 192.168.42.0/24 \u2013 the IP address space belonging to your organization \u2013 to the upstream providers. BGP never originates IP prefixes without being told to do so. The usual ways to do that are: Redistribution of other routing information sources into BGP \u2013 for example, redistributing directly connected subnets or OSPF routes. You\u2019ll practice that in the Redistribute IGP Information Into BGP lab exercise. Origination of configured prefixes, often using network router configuration command. This approach assumes there\u2019s an exact match in the IP routing table While the first method is usually used within enterprise networks that use BGP as an internal routing protocol or to connect to an MPLS/VPN service, you should have tight control over the prefixes advertised to the public Internet. Please use the second method in this lab exercise. Warning If your device happens to be fully compliant with RFC 8212 (example: Cisco IOS XR), you\u2019ll have to configure a permit everything outgoing filter on all EBGP neighbors or your device won\u2019t send them anything. Verification The IPv4 prefixes you want to advertise to EBGP neighbors must be in your router\u2019s BGP table first. A command similar to show ip bgp is thus a good starting point. This is how Arista EOS displays the BGP table: rtr#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 0 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 0 65101 i * > 192.168.42.0/24 - - - - 0 ? * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i * > 192.168.101.0/24 10.1.0.6 0 - 100 0 65101 i However, you probably want to know if your router advertises its prefixes to its EBGP neighbors. Some network devices have a show command that displays prefixes advertised to a neighbor. Here\u2019s how that command works on Arista EOS: rtr#show ip bgp neighbor 10.1.0.2 advertised-routes BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast, q - Queued for advertisement % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 192.168.42.0/24 10.1.0.1 - - - - 65000 ? * > 192.168.101.0/24 10.1.0.1 - - - - 65000 65101 i You should check the BGP table on the remote router to be absolutely sure everything is OK. While that\u2019s a bit hard to do in real life (unless your ISP offers a looking glass ), it\u2019s way easier in a lab \u2013 connect to X1 or X2 with netlab connect (or SSH into them if you\u2019re not using netlab ), start vtysh if you\u2019re running FRR or Cumulus Linux on them, and execute the show ip bgp command: $ netlab connect x1 Connecting to container clab-originate-x1, starting bash Use vtysh to connect to FRR daemon x1(bash)#sudo vtysh Hello, this is FRRouting (version 9.0.1_git). Copyright 1996-2005 Kunihiro Ishiguro, et al. x1# show ip bgp BGP table version is 5, local router ID is 192.168.100.1, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *> 192.168.42.0/24 10.1.0.1 0 65000 ? *> 192.168.100.0/24 0.0.0.0(x1) 0 32768 i *> 192.168.101.0/24 10.1.0.1 0 65000 65101 i Displayed 3 routes and 3 total paths Next: If you\u2019re interested in BGP routing policies proceed to Use BGP Weights to prefer one of the upstream ISPs. If you want to build networks with more than one BGP router, continue with Running BGP in Larger Networks You could also do these optional exercises: Configure BGP for IPv6 Redistribute IGP Information Into BGP Protect EBGP sessions Use BFD to Speed Up BGP Convergence BGP route aggregation Reference Information You might find the following information helpful if you\u2019re not using netlab to build the lab: Lab Wiring This lab uses a subset of the 4-router lab topology : Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback eth1 10.1.0.2/30 x1 -> rtr x2 192.168.101.1/24 Loopback eth1 10.1.0.6/30 x2 -> rtr","title":"Advertise IPv4 Prefixes to BGP Neighbors"},{"location":"basic/3-originate/#advertise-ipv4-prefixes-to-bgp-neighbors","text":"In the previous lab exercise , you configured EBGP sessions with two routers belonging to upstream ISPs. Now it\u2019s time to advertise your address space (IPv4 prefixes) to them so you\u2019ll start receiving some traffic. The routers in your lab use the following BGP AS numbers. Each upstream router advertises an IPv4 prefix and the default route. Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure them manually. Node Neighbor Neighbor IPv4 Neighbor AS rtr x1 10.1.0.2 65100 rtr x2 10.1.0.6 65101","title":"Advertise IPv4 Prefixes to BGP Neighbors"},{"location":"basic/3-originate/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/3-originate Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and basic BGP configuration. Note: netlab will configure IP addressing and EBGP sessions on your router. If you\u2019re not using netlab , just continue with the configuration you made during the previous exercise .","title":"Start the Lab"},{"location":"basic/3-originate/#configuration-tasks","text":"You have to advertise 192.168.42.0/24 \u2013 the IP address space belonging to your organization \u2013 to the upstream providers. BGP never originates IP prefixes without being told to do so. The usual ways to do that are: Redistribution of other routing information sources into BGP \u2013 for example, redistributing directly connected subnets or OSPF routes. You\u2019ll practice that in the Redistribute IGP Information Into BGP lab exercise. Origination of configured prefixes, often using network router configuration command. This approach assumes there\u2019s an exact match in the IP routing table While the first method is usually used within enterprise networks that use BGP as an internal routing protocol or to connect to an MPLS/VPN service, you should have tight control over the prefixes advertised to the public Internet. Please use the second method in this lab exercise. Warning If your device happens to be fully compliant with RFC 8212 (example: Cisco IOS XR), you\u2019ll have to configure a permit everything outgoing filter on all EBGP neighbors or your device won\u2019t send them anything.","title":"Configuration Tasks"},{"location":"basic/3-originate/#verification","text":"The IPv4 prefixes you want to advertise to EBGP neighbors must be in your router\u2019s BGP table first. A command similar to show ip bgp is thus a good starting point. This is how Arista EOS displays the BGP table: rtr#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 0 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 0 65101 i * > 192.168.42.0/24 - - - - 0 ? * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i * > 192.168.101.0/24 10.1.0.6 0 - 100 0 65101 i However, you probably want to know if your router advertises its prefixes to its EBGP neighbors. Some network devices have a show command that displays prefixes advertised to a neighbor. Here\u2019s how that command works on Arista EOS: rtr#show ip bgp neighbor 10.1.0.2 advertised-routes BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast, q - Queued for advertisement % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 192.168.42.0/24 10.1.0.1 - - - - 65000 ? * > 192.168.101.0/24 10.1.0.1 - - - - 65000 65101 i You should check the BGP table on the remote router to be absolutely sure everything is OK. While that\u2019s a bit hard to do in real life (unless your ISP offers a looking glass ), it\u2019s way easier in a lab \u2013 connect to X1 or X2 with netlab connect (or SSH into them if you\u2019re not using netlab ), start vtysh if you\u2019re running FRR or Cumulus Linux on them, and execute the show ip bgp command: $ netlab connect x1 Connecting to container clab-originate-x1, starting bash Use vtysh to connect to FRR daemon x1(bash)#sudo vtysh Hello, this is FRRouting (version 9.0.1_git). Copyright 1996-2005 Kunihiro Ishiguro, et al. x1# show ip bgp BGP table version is 5, local router ID is 192.168.100.1, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *> 192.168.42.0/24 10.1.0.1 0 65000 ? *> 192.168.100.0/24 0.0.0.0(x1) 0 32768 i *> 192.168.101.0/24 10.1.0.1 0 65000 65101 i Displayed 3 routes and 3 total paths Next: If you\u2019re interested in BGP routing policies proceed to Use BGP Weights to prefer one of the upstream ISPs. If you want to build networks with more than one BGP router, continue with Running BGP in Larger Networks You could also do these optional exercises: Configure BGP for IPv6 Redistribute IGP Information Into BGP Protect EBGP sessions Use BFD to Speed Up BGP Convergence BGP route aggregation","title":"Verification"},{"location":"basic/3-originate/#reference-information","text":"You might find the following information helpful if you\u2019re not using netlab to build the lab:","title":"Reference Information"},{"location":"basic/3-originate/#lab-wiring","text":"This lab uses a subset of the 4-router lab topology : Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1","title":"Lab Wiring"},{"location":"basic/3-originate/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback eth1 10.1.0.2/30 x1 -> rtr x2 192.168.101.1/24 Loopback eth1 10.1.0.6/30 x2 -> rtr","title":"Lab Addressing"},{"location":"basic/4-ipv6/","text":"Configure BGP for IPv6 In the previous lab exercises you configured EBGP sessions with two upstream ISPs and advertised IPv4 prefixes to them . Now let\u2019s add IPv6 to the mix. The routers in your lab use the following BGP AS numbers. Each upstream router advertises an IPv4 prefix, an IPv6 prefix, and the default route. BGP AS Numbers Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 192.168.42.0/24 10.0.0.1/32 AS65100 x1 10.0.0.10 192.168.100.0/24 2001:db8:100::/48 AS65101 x2 10.0.0.11 192.168.101.0/24 2001:db8:101::/48 Your router has these EBGP IPv4 neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure you\u2019ll have to configure them manually. Node Neighbor Neighbor IPv4 Neighbor AS rtr x1 10.1.0.2 65100 rtr x2 10.1.0.6 65101 You will also have to establish IPv6 EBGP sessions with the upstream ISPs using these parameters: Node Neighbor Neighbor AS Neighbor IPv6 rtr x1 65100 2001:db8:42::2 rtr x2 65101 2001:db8:42:1::2 Start the Lab Assuming you already set up your lab infrastructure : Change directory to basic/4-ipv6 Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and basic BGP configuration. netlab will configure IPv4 addressing, IPv6 addressing, and BGP for IPv4 on your router, resulting in a configuration similar to what you should have done in Advertise IPv4 Prefixes to BGP Neighbors . If you\u2019re not using netlab just continue with the configuration you made during the previous exercise and add IPv6 addresses to the loopback- and WAN interfaces of your router before proceeding. Configuration Tasks You have to: Establish IPv6 EBGP sessions with the upstream providers. Advertise IPv6 prefix 2001:db8:1::/48 to them. Most BGP implementations treat IPv4 and IPv6 in almost the same way and use address families within BGP configuration to configure them. The details vary: On many devices (including Cisco IOS, Arista EOS, Cumulus Linux, and FRR) you have to configure IPv4 and IPv6 BGP sessions within the BGP configuration and then activate those sessions within individual address families. Some devices (example: Nexus OS) expect you to configure BGP neighbors within the address families You might encounter older implementations (example: old Cisco IOS versions) that configure IPv4 parameters within BGP configuration and IPv6 parameters within the IPv6 address family. I\u2019m positive you\u2019ll figure out those details. Just keep in mind that there\u2019s not much difference (usually) between IPv4 and IPv6, and you already know how to setup EBGP sessions and advertise IPv4 prefixes in BGP . Just do the same thing for IPv6. Verification Before going into the details, you\u2019d want to know that the IPv6 BGP sessions are up. Use a command similar to show bgp ipv6 summary to verify that: rtr#sh bgp ipv6 unicast summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 2001:db8:42::2 4 65100 9 8 0 0 00:00:09 Estab 2 2 2001:db8:42:1::2 4 65101 9 8 0 0 00:00:09 Estab 2 2 Warning For historic reasons, many network devices have inconsistent command structure \u2013 the IPv4 BGP commands are simpler than IPv6 BGP commands. For example, you can use show bgp summary on Arista EOS to display BGP summary information for the IPv4 address family while you have to use show ipv6 unicast summary to display the same information for the IPv6 address family. The IPv6 prefixes you want to advertise to EBGP neighbors have to be in the BGP table of your router first. A command similar to show bgp ipv6 or show bgp ipv6 unicast is thus a good starting point. This is how Arista EOS displays it: rtr#show bgp ipv6 unicast BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > ::/0 2001:db8:42::2 0 - 100 0 65100 i * ::/0 2001:db8:42:1::2 0 - 100 0 65101 i * > 2001:db8:1::/48 - - - - 0 ? * > 2001:db8:100::/48 2001:db8:42::2 0 - 100 0 65100 i * > 2001:db8:101::/48 2001:db8:42:1::2 0 - 100 0 65101 i However, you really want to know if the prefixes are advertised to the EBGP neighbors. Some network devices have a show command that displays prefixes advertised to a neighbor. Here\u2019s how that command works on Arista EOS: rtr#show bgp neighbor 2001:db8:42::2 advertised-routes BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast, q - Queued for advertisement % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 2001:db8:1::/48 2001:db8:42::1 - - - - 65000 ? * > 2001:db8:101::/48 2001:db8:42::1 - - - - 65000 65101 i You should check the BGP table on the remote router to be absolutely sure everything is OK. While that\u2019s a bit hard to do in real life, it\u2019s trivial in a lab \u2013 connect to X1 or X2 with netlab connect (or SSH into them if you\u2019re not using netlab ), start vtysh (if you\u2019re using Cumulus Linux or FRR) and execute the show ip bgp command: $ netlab connect x1 Connecting to container clab-originate-x1, starting bash Use vtysh to connect to FRR daemon x1(bash)#sudo vtysh Hello, this is FRRouting (version 7.5+cl4.4.0u4). Copyright 1996-2005 Kunihiro Ishiguro, et al. x1# show bgp ipv6 unicast BGP table version is 3, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 2001:db8:1::/48 2001:db8:42::1 0 65000 ? *> 2001:db8:100::/48 :: 0 32768 i *> 2001:db8:101::/48 2001:db8:42::1 0 65000 65101 i Displayed 3 routes and 3 total paths Next: If you\u2019re interested in BGP routing policies proceed to Use BGP Weights to prefer one of the upstream ISPs. If you want to build networks with more than one BGP router, continue with Running BGP in Larger Networks Reference Information You might find the following information useful if you\u2019re not using netlab to build the lab: Lab Wiring This lab uses a subset of the 4-router lab topology : Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 2001:db8:42::1/64 rtr -> x1 Ethernet2 10.1.0.5/30 2001:db8:42:1::1/64 rtr -> x2 x1 192.168.100.1/24 2001:db8:100:1::1/48 Loopback swp1 10.1.0.2/30 2001:db8:42::2/64 x1 -> rtr x2 192.168.101.1/24 2001:db8:101:1::1/48 Loopback swp1 10.1.0.6/30 2001:db8:42:1::2/64 x2 -> rtr","title":"Configure BGP for IPv6"},{"location":"basic/4-ipv6/#configure-bgp-for-ipv6","text":"In the previous lab exercises you configured EBGP sessions with two upstream ISPs and advertised IPv4 prefixes to them . Now let\u2019s add IPv6 to the mix. The routers in your lab use the following BGP AS numbers. Each upstream router advertises an IPv4 prefix, an IPv6 prefix, and the default route.","title":"Configure BGP for IPv6"},{"location":"basic/4-ipv6/#bgp-as-numbers","text":"Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 192.168.42.0/24 10.0.0.1/32 AS65100 x1 10.0.0.10 192.168.100.0/24 2001:db8:100::/48 AS65101 x2 10.0.0.11 192.168.101.0/24 2001:db8:101::/48 Your router has these EBGP IPv4 neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure you\u2019ll have to configure them manually. Node Neighbor Neighbor IPv4 Neighbor AS rtr x1 10.1.0.2 65100 rtr x2 10.1.0.6 65101 You will also have to establish IPv6 EBGP sessions with the upstream ISPs using these parameters: Node Neighbor Neighbor AS Neighbor IPv6 rtr x1 65100 2001:db8:42::2 rtr x2 65101 2001:db8:42:1::2","title":"BGP AS Numbers"},{"location":"basic/4-ipv6/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/4-ipv6 Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and basic BGP configuration. netlab will configure IPv4 addressing, IPv6 addressing, and BGP for IPv4 on your router, resulting in a configuration similar to what you should have done in Advertise IPv4 Prefixes to BGP Neighbors . If you\u2019re not using netlab just continue with the configuration you made during the previous exercise and add IPv6 addresses to the loopback- and WAN interfaces of your router before proceeding.","title":"Start the Lab"},{"location":"basic/4-ipv6/#configuration-tasks","text":"You have to: Establish IPv6 EBGP sessions with the upstream providers. Advertise IPv6 prefix 2001:db8:1::/48 to them. Most BGP implementations treat IPv4 and IPv6 in almost the same way and use address families within BGP configuration to configure them. The details vary: On many devices (including Cisco IOS, Arista EOS, Cumulus Linux, and FRR) you have to configure IPv4 and IPv6 BGP sessions within the BGP configuration and then activate those sessions within individual address families. Some devices (example: Nexus OS) expect you to configure BGP neighbors within the address families You might encounter older implementations (example: old Cisco IOS versions) that configure IPv4 parameters within BGP configuration and IPv6 parameters within the IPv6 address family. I\u2019m positive you\u2019ll figure out those details. Just keep in mind that there\u2019s not much difference (usually) between IPv4 and IPv6, and you already know how to setup EBGP sessions and advertise IPv4 prefixes in BGP . Just do the same thing for IPv6.","title":"Configuration Tasks"},{"location":"basic/4-ipv6/#verification","text":"Before going into the details, you\u2019d want to know that the IPv6 BGP sessions are up. Use a command similar to show bgp ipv6 summary to verify that: rtr#sh bgp ipv6 unicast summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 2001:db8:42::2 4 65100 9 8 0 0 00:00:09 Estab 2 2 2001:db8:42:1::2 4 65101 9 8 0 0 00:00:09 Estab 2 2 Warning For historic reasons, many network devices have inconsistent command structure \u2013 the IPv4 BGP commands are simpler than IPv6 BGP commands. For example, you can use show bgp summary on Arista EOS to display BGP summary information for the IPv4 address family while you have to use show ipv6 unicast summary to display the same information for the IPv6 address family. The IPv6 prefixes you want to advertise to EBGP neighbors have to be in the BGP table of your router first. A command similar to show bgp ipv6 or show bgp ipv6 unicast is thus a good starting point. This is how Arista EOS displays it: rtr#show bgp ipv6 unicast BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > ::/0 2001:db8:42::2 0 - 100 0 65100 i * ::/0 2001:db8:42:1::2 0 - 100 0 65101 i * > 2001:db8:1::/48 - - - - 0 ? * > 2001:db8:100::/48 2001:db8:42::2 0 - 100 0 65100 i * > 2001:db8:101::/48 2001:db8:42:1::2 0 - 100 0 65101 i However, you really want to know if the prefixes are advertised to the EBGP neighbors. Some network devices have a show command that displays prefixes advertised to a neighbor. Here\u2019s how that command works on Arista EOS: rtr#show bgp neighbor 2001:db8:42::2 advertised-routes BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast, q - Queued for advertisement % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 2001:db8:1::/48 2001:db8:42::1 - - - - 65000 ? * > 2001:db8:101::/48 2001:db8:42::1 - - - - 65000 65101 i You should check the BGP table on the remote router to be absolutely sure everything is OK. While that\u2019s a bit hard to do in real life, it\u2019s trivial in a lab \u2013 connect to X1 or X2 with netlab connect (or SSH into them if you\u2019re not using netlab ), start vtysh (if you\u2019re using Cumulus Linux or FRR) and execute the show ip bgp command: $ netlab connect x1 Connecting to container clab-originate-x1, starting bash Use vtysh to connect to FRR daemon x1(bash)#sudo vtysh Hello, this is FRRouting (version 7.5+cl4.4.0u4). Copyright 1996-2005 Kunihiro Ishiguro, et al. x1# show bgp ipv6 unicast BGP table version is 3, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 2001:db8:1::/48 2001:db8:42::1 0 65000 ? *> 2001:db8:100::/48 :: 0 32768 i *> 2001:db8:101::/48 2001:db8:42::1 0 65000 65101 i Displayed 3 routes and 3 total paths Next: If you\u2019re interested in BGP routing policies proceed to Use BGP Weights to prefer one of the upstream ISPs. If you want to build networks with more than one BGP router, continue with Running BGP in Larger Networks","title":"Verification"},{"location":"basic/4-ipv6/#reference-information","text":"You might find the following information useful if you\u2019re not using netlab to build the lab:","title":"Reference Information"},{"location":"basic/4-ipv6/#lab-wiring","text":"This lab uses a subset of the 4-router lab topology : Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1","title":"Lab Wiring"},{"location":"basic/4-ipv6/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 2001:db8:42::1/64 rtr -> x1 Ethernet2 10.1.0.5/30 2001:db8:42:1::1/64 rtr -> x2 x1 192.168.100.1/24 2001:db8:100:1::1/48 Loopback swp1 10.1.0.2/30 2001:db8:42::2/64 x1 -> rtr x2 192.168.101.1/24 2001:db8:101:1::1/48 Loopback swp1 10.1.0.6/30 2001:db8:42:1::2/64 x2 -> rtr","title":"Lab Addressing"},{"location":"basic/5-redistribute/","text":"Redistribute IGP Information Into BGP When using BGP to connect to the public Internet, you should advertise the minimum number of prefixes needed to make your site reachable from the Internet \u2013 the best approach is to configure the prefixes you want to advertise as you did in the Advertise IPv4 Prefixes to BGP Neighbors lab exercise. That makes little sense when using BGP as a generic routing protocol, for example, when connecting your sites to an MPLS/VPN service. In these scenarios, it\u2019s better to redistribute local routing information (connected subnets, static routes, and IGP routes) into the BGP table; you\u2019ll practice route redistribution approach in this exercise. Your lab has two sites connected to an MPLS/VPN provider. Each site has a WAN edge router and a core router, running OSPF between them. Your task is to establish connectivity between your sites to enable the core routers to ping each other. If you\u2019re using netlab, you\u2019ll start with a preconfigured lab \u2013 netlab will configure IP addressing, OSPF routing, and EBGP sessions. If you\u2019re using any other lab environment, you\u2019ll have to configure all of that manually. The following tables describe the OSPF and BGP setup; the Reference Information section contains IP addressing information. BGP Routers and AS Numbers Node/ASN Router ID Advertised prefixes AS65000 c1 10.0.0.1 AS65001 c2 10.0.0.2 AS65100 x1 10.0.0.10 x2 10.0.0.11 BGP Neighbors Node Neighbor Neighbor AS Neighbor IPv4 c1 x1 65100 10.1.0.2 c2 x2 65100 10.1.0.10 x1 x2 65100 10.0.0.11 c1 65000 10.1.0.1 x2 x1 65100 10.0.0.10 c2 65001 10.1.0.9 OSPF Setup Area 1 (AS 65000) Router Interface IPv4 Address Neighbor(s) c1 Loopback 10.0.0.1/32 Ethernet2 10.1.0.13/30 s1 s1 Loopback 10.0.0.3/32 Ethernet1 10.1.0.14/30 c1 Ethernet2 172.16.0.3/24 passive Area 2 (AS 65001) Router Interface IPv4 Address Neighbor(s) c2 Loopback 10.0.0.2/32 Ethernet2 10.1.0.17/30 s2 s2 Loopback 10.0.0.4/32 Ethernet1 10.1.0.18/30 c2 Ethernet2 172.16.1.4/24 passive Start the Lab Assuming you already set up your lab infrastructure : Change directory to basic/5-redistribute Execute netlab up ( other options ) Log into your devices with netlab connect and verify IP addresses, OSPF routing, and basic BGP configuration. Note: netlab will configure IP addressing, OSPF routing, and EBGP sessions on your routers. If you\u2019re not using netlab , you\u2019ll have to configure them manually. Configuration Tasks You have to exchange OSPF routing information between the two sites using BGP. To get that done, you have to: Configure OSPF-to-BGP redistribution on C1 and C2, usually using a command similar to redistribute ospf 1 within the BGP configuration. Configure BGP-to-OSPF redistribution on C1 and C2, usually using a command similar to redistribute bgp 2 within the OSPF configuration. Warning Two-way redistribution between routing protocols could quickly become exceedingly complex. Advertising the default route into the edge routing protocol is often better than redistributing core routes. You might want to test this alternative as an optional part of the lab exercise. Verification The local OSPF prefixes you want to advertise to the remote site must be in your router\u2019s BGP table first. A command similar to show ip bgp is thus a good starting point; it\u2019s even better to use a command that displays only the locally-originated prefixes, such as show ip bgp regexp ^$ . The following printout contains the information displayed on C1 running Arista EOS: c1#show ip bgp regexp ^$ BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.14 - - - 0 i * > 172.16.0.0/24 10.1.0.14 - - - 0 i c1#show ip bgp ... Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.14 - - - 0 i * > 10.0.0.4/32 10.1.0.2 0 - 100 0 65100 65001 i * > 172.16.0.0/24 10.1.0.14 - - - 0 i * > 172.16.1.0/24 10.1.0.2 0 - 100 0 65100 65001 i After validating the BGP table on C1 and C2, check that the BGP routes are redistributed into intra-site OSPF \u2013 inspect the routing table and OSPF topology database on S1 and S2. This is what Arista EOS displays on S1: s1>show ip route VRF: default Codes: C - connected, S - static, K - kernel, O - OSPF, IA - OSPF inter area, E1 - OSPF external type 1, E2 - OSPF external type 2, N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type2, B - Other BGP Routes, B I - iBGP, B E - eBGP, R - RIP, I L1 - IS-IS level 1, I L2 - IS-IS level 2, O3 - OSPFv3, A B - BGP Aggregate, A O - OSPF Summary, NG - Nexthop Group Static Route, V - VXLAN Control Service, M - Martian, DH - DHCP client installed default route, DP - Dynamic Policy Route, L - VRF Leaked, G - gRIBI, RC - Route Cache Route Gateway of last resort: S 0.0.0.0/0 [1/0] via 192.168.121.1, Management0 O 10.0.0.1/32 [110/20] via 10.1.0.13, Ethernet1 C 10.0.0.3/32 is directly connected, Loopback0 O E2 10.0.0.4/32 [110/1] via 10.1.0.13, Ethernet1 C 10.1.0.12/30 is directly connected, Ethernet1 C 172.16.0.0/24 is directly connected, Ethernet2 O E2 172.16.1.0/24 [110/1] via 10.1.0.13, Ethernet1 C 192.168.121.0/24 is directly connected, Management0 Reference Information You might find the following information useful if you\u2019re not using netlab to build the lab: Lab Wiring This lab uses a superset of the 4-router lab topology . You can still use that topology without the S1/S2 routers, and redistribute connected prefixes into BGP. Point-to-Point Links Origin Device Origin Port Destination Device Destination Port c1 Ethernet1 x1 swp1 x1 swp2 x2 swp2 c2 Ethernet1 x2 swp3 c1 Ethernet2 s1 Ethernet1 c2 Ethernet2 s2 Ethernet1 Stub Links Origin Device Origin Port Description s1 Ethernet2 s1 -> stub s2 Ethernet2 s2 -> stub Lab Addressing Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 c1 -> x1 Ethernet2 10.1.0.13/30 c1 -> s1 c2 10.0.0.2/32 Loopback Ethernet1 10.1.0.9/30 c2 -> x2 Ethernet2 10.1.0.17/30 c2 -> s2 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> c1 swp2 10.1.0.5/30 x1 -> x2 x2 10.0.0.11/32 Loopback swp2 10.1.0.6/30 x2 -> x1 swp3 10.1.0.10/30 x2 -> c2 s1 10.0.0.3/32 Loopback Ethernet1 10.1.0.14/30 s1 -> c1 Ethernet2 172.16.0.3/24 s1 -> stub s2 10.0.0.4/32 Loopback Ethernet1 10.1.0.18/30 s2 -> c2 Ethernet2 172.16.1.4/24 s2 -> stub You might have to add OSPF process number to the command. \u21a9 You might have to add BGP AS number to the command. Some older platforms have to be told to redistribute subnets into OSPF. \u21a9","title":"Redistribute IGP Information Into BGP"},{"location":"basic/5-redistribute/#redistribute-igp-information-into-bgp","text":"When using BGP to connect to the public Internet, you should advertise the minimum number of prefixes needed to make your site reachable from the Internet \u2013 the best approach is to configure the prefixes you want to advertise as you did in the Advertise IPv4 Prefixes to BGP Neighbors lab exercise. That makes little sense when using BGP as a generic routing protocol, for example, when connecting your sites to an MPLS/VPN service. In these scenarios, it\u2019s better to redistribute local routing information (connected subnets, static routes, and IGP routes) into the BGP table; you\u2019ll practice route redistribution approach in this exercise. Your lab has two sites connected to an MPLS/VPN provider. Each site has a WAN edge router and a core router, running OSPF between them. Your task is to establish connectivity between your sites to enable the core routers to ping each other. If you\u2019re using netlab, you\u2019ll start with a preconfigured lab \u2013 netlab will configure IP addressing, OSPF routing, and EBGP sessions. If you\u2019re using any other lab environment, you\u2019ll have to configure all of that manually. The following tables describe the OSPF and BGP setup; the Reference Information section contains IP addressing information.","title":"Redistribute IGP Information Into BGP"},{"location":"basic/5-redistribute/#bgp-routers-and-as-numbers","text":"Node/ASN Router ID Advertised prefixes AS65000 c1 10.0.0.1 AS65001 c2 10.0.0.2 AS65100 x1 10.0.0.10 x2 10.0.0.11","title":"BGP Routers and AS Numbers"},{"location":"basic/5-redistribute/#bgp-neighbors","text":"Node Neighbor Neighbor AS Neighbor IPv4 c1 x1 65100 10.1.0.2 c2 x2 65100 10.1.0.10 x1 x2 65100 10.0.0.11 c1 65000 10.1.0.1 x2 x1 65100 10.0.0.10 c2 65001 10.1.0.9","title":"BGP Neighbors"},{"location":"basic/5-redistribute/#ospf-setup","text":"","title":"OSPF Setup"},{"location":"basic/5-redistribute/#area-1-as-65000","text":"Router Interface IPv4 Address Neighbor(s) c1 Loopback 10.0.0.1/32 Ethernet2 10.1.0.13/30 s1 s1 Loopback 10.0.0.3/32 Ethernet1 10.1.0.14/30 c1 Ethernet2 172.16.0.3/24 passive","title":"Area 1 (AS 65000)"},{"location":"basic/5-redistribute/#area-2-as-65001","text":"Router Interface IPv4 Address Neighbor(s) c2 Loopback 10.0.0.2/32 Ethernet2 10.1.0.17/30 s2 s2 Loopback 10.0.0.4/32 Ethernet1 10.1.0.18/30 c2 Ethernet2 172.16.1.4/24 passive","title":"Area 2 (AS 65001)"},{"location":"basic/5-redistribute/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/5-redistribute Execute netlab up ( other options ) Log into your devices with netlab connect and verify IP addresses, OSPF routing, and basic BGP configuration. Note: netlab will configure IP addressing, OSPF routing, and EBGP sessions on your routers. If you\u2019re not using netlab , you\u2019ll have to configure them manually.","title":"Start the Lab"},{"location":"basic/5-redistribute/#configuration-tasks","text":"You have to exchange OSPF routing information between the two sites using BGP. To get that done, you have to: Configure OSPF-to-BGP redistribution on C1 and C2, usually using a command similar to redistribute ospf 1 within the BGP configuration. Configure BGP-to-OSPF redistribution on C1 and C2, usually using a command similar to redistribute bgp 2 within the OSPF configuration. Warning Two-way redistribution between routing protocols could quickly become exceedingly complex. Advertising the default route into the edge routing protocol is often better than redistributing core routes. You might want to test this alternative as an optional part of the lab exercise.","title":"Configuration Tasks"},{"location":"basic/5-redistribute/#verification","text":"The local OSPF prefixes you want to advertise to the remote site must be in your router\u2019s BGP table first. A command similar to show ip bgp is thus a good starting point; it\u2019s even better to use a command that displays only the locally-originated prefixes, such as show ip bgp regexp ^$ . The following printout contains the information displayed on C1 running Arista EOS: c1#show ip bgp regexp ^$ BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.14 - - - 0 i * > 172.16.0.0/24 10.1.0.14 - - - 0 i c1#show ip bgp ... Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.14 - - - 0 i * > 10.0.0.4/32 10.1.0.2 0 - 100 0 65100 65001 i * > 172.16.0.0/24 10.1.0.14 - - - 0 i * > 172.16.1.0/24 10.1.0.2 0 - 100 0 65100 65001 i After validating the BGP table on C1 and C2, check that the BGP routes are redistributed into intra-site OSPF \u2013 inspect the routing table and OSPF topology database on S1 and S2. This is what Arista EOS displays on S1: s1>show ip route VRF: default Codes: C - connected, S - static, K - kernel, O - OSPF, IA - OSPF inter area, E1 - OSPF external type 1, E2 - OSPF external type 2, N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type2, B - Other BGP Routes, B I - iBGP, B E - eBGP, R - RIP, I L1 - IS-IS level 1, I L2 - IS-IS level 2, O3 - OSPFv3, A B - BGP Aggregate, A O - OSPF Summary, NG - Nexthop Group Static Route, V - VXLAN Control Service, M - Martian, DH - DHCP client installed default route, DP - Dynamic Policy Route, L - VRF Leaked, G - gRIBI, RC - Route Cache Route Gateway of last resort: S 0.0.0.0/0 [1/0] via 192.168.121.1, Management0 O 10.0.0.1/32 [110/20] via 10.1.0.13, Ethernet1 C 10.0.0.3/32 is directly connected, Loopback0 O E2 10.0.0.4/32 [110/1] via 10.1.0.13, Ethernet1 C 10.1.0.12/30 is directly connected, Ethernet1 C 172.16.0.0/24 is directly connected, Ethernet2 O E2 172.16.1.0/24 [110/1] via 10.1.0.13, Ethernet1 C 192.168.121.0/24 is directly connected, Management0","title":"Verification"},{"location":"basic/5-redistribute/#reference-information","text":"You might find the following information useful if you\u2019re not using netlab to build the lab:","title":"Reference Information"},{"location":"basic/5-redistribute/#lab-wiring","text":"This lab uses a superset of the 4-router lab topology . You can still use that topology without the S1/S2 routers, and redistribute connected prefixes into BGP.","title":"Lab Wiring"},{"location":"basic/5-redistribute/#point-to-point-links","text":"Origin Device Origin Port Destination Device Destination Port c1 Ethernet1 x1 swp1 x1 swp2 x2 swp2 c2 Ethernet1 x2 swp3 c1 Ethernet2 s1 Ethernet1 c2 Ethernet2 s2 Ethernet1","title":"Point-to-Point Links"},{"location":"basic/5-redistribute/#stub-links","text":"Origin Device Origin Port Description s1 Ethernet2 s1 -> stub s2 Ethernet2 s2 -> stub","title":"Stub Links"},{"location":"basic/5-redistribute/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 c1 -> x1 Ethernet2 10.1.0.13/30 c1 -> s1 c2 10.0.0.2/32 Loopback Ethernet1 10.1.0.9/30 c2 -> x2 Ethernet2 10.1.0.17/30 c2 -> s2 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> c1 swp2 10.1.0.5/30 x1 -> x2 x2 10.0.0.11/32 Loopback swp2 10.1.0.6/30 x2 -> x1 swp3 10.1.0.10/30 x2 -> c2 s1 10.0.0.3/32 Loopback Ethernet1 10.1.0.14/30 s1 -> c1 Ethernet2 172.16.0.3/24 s1 -> stub s2 10.0.0.4/32 Loopback Ethernet1 10.1.0.18/30 s2 -> c2 Ethernet2 172.16.1.4/24 s2 -> stub You might have to add OSPF process number to the command. \u21a9 You might have to add BGP AS number to the command. Some older platforms have to be told to redistribute subnets into OSPF. \u21a9","title":"Lab Addressing"},{"location":"basic/6-protect/","text":"Protect BGP Sessions with Passwords and GTSM Now that you know how to configure EBGP sessions let\u2019s see how you can make it harder for someone to mess them up. Two mechanisms are commonly used to protect EBGP sessions (or the control plane/CPU of the router running them): Generalized TTL Security Mechanism (GTSM) described in RFC 5082 ( more details ) Cryptographic protection (but not encryption) of underlying TCP sessions with MD5 checksums or TCP Authentication Option described in RFC 5925 . In this lab you\u2019ll use: GTSM on the EBGP session with ISP-1 MD5 checksum on the EBGP session with ISP-2 1 If you want to practice BGP session protection with TCP-AO, check out the TCP-AO lab 1 . The routers in your lab use the following BGP AS numbers. Each upstream router advertises an IPv4 prefix and the default route. Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 192.168.42.0/24 10.0.0.1/32 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Start the Lab Assuming you already set up your lab infrastructure : Change directory to basic/6-protect Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify that the IP addresses are configured on all its interfaces. If you\u2019re using netlab , you\u2019ll get a fully-configured lab, including BGP prefix origination on RTR and EBGP sessions between RTR and X1/X2. If you\u2019re using some other lab platform, it\u2019s best if you do this lab exercise after the Advertise IPv4 Prefixes to BGP Neighbors one. Configuration Tasks The EBGP sessions with X1 and X2 will not be established because X1 and X2 use EBGP session protection. They might be stuck in Connect , OpenSent or OpenConfirm state as illustrated by the following printout produced on Arista cEOS: rtr>show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc x1 10.1.0.2 4 65100 11 13 0 76 00:00:14 OpenConfirm x2 10.1.0.6 4 65101 10 8 0 0 00:00:12 Connect To make the lab work: Configure TTL protection (GTSM) on the EBGP session with X1 Configure MD5 TCP checksum on the EBGP session with X2. The password used by X2 is GuessWhat . Verification Check the state of the BGP sessions with a command similar to show ip bgp summary . This is a printout taken from Arista EOS: rtr#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc x1 10.1.0.2 4 65100 42 63 0 0 00:00:16 Estab 2 2 x2 10.1.0.6 4 65101 17 16 0 0 00:00:04 Estab 2 2 Finally, use a command similar to show ip bgp to display the prefixes your router received from its EBGP neighbors. Reference Information You might find the following information useful if you\u2019re not using netlab to build the lab: Lab Wiring This lab uses a subset of the 4-router lab topology : Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 x1 -> rtr x2 192.168.101.1/24 Loopback swp1 10.1.0.6/30 x2 -> rtr I would love to add TCP-AO-protected session to this lab, but you cannot use TCP-AO on Cumulus Linux or FRR because it\u2019s not yet (as of September 2023) implemented in the Linux kernel. That\u2019s the price you\u2019re paying for riding on top of other people\u2019s infrastructure. \u21a9 \u21a9","title":"MD5 Passwords and GTSM"},{"location":"basic/6-protect/#protect-bgp-sessions-with-passwords-and-gtsm","text":"Now that you know how to configure EBGP sessions let\u2019s see how you can make it harder for someone to mess them up. Two mechanisms are commonly used to protect EBGP sessions (or the control plane/CPU of the router running them): Generalized TTL Security Mechanism (GTSM) described in RFC 5082 ( more details ) Cryptographic protection (but not encryption) of underlying TCP sessions with MD5 checksums or TCP Authentication Option described in RFC 5925 . In this lab you\u2019ll use: GTSM on the EBGP session with ISP-1 MD5 checksum on the EBGP session with ISP-2 1 If you want to practice BGP session protection with TCP-AO, check out the TCP-AO lab 1 . The routers in your lab use the following BGP AS numbers. Each upstream router advertises an IPv4 prefix and the default route. Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 192.168.42.0/24 10.0.0.1/32 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24","title":"Protect BGP Sessions with Passwords and GTSM"},{"location":"basic/6-protect/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/6-protect Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify that the IP addresses are configured on all its interfaces. If you\u2019re using netlab , you\u2019ll get a fully-configured lab, including BGP prefix origination on RTR and EBGP sessions between RTR and X1/X2. If you\u2019re using some other lab platform, it\u2019s best if you do this lab exercise after the Advertise IPv4 Prefixes to BGP Neighbors one.","title":"Start the Lab"},{"location":"basic/6-protect/#configuration-tasks","text":"The EBGP sessions with X1 and X2 will not be established because X1 and X2 use EBGP session protection. They might be stuck in Connect , OpenSent or OpenConfirm state as illustrated by the following printout produced on Arista cEOS: rtr>show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc x1 10.1.0.2 4 65100 11 13 0 76 00:00:14 OpenConfirm x2 10.1.0.6 4 65101 10 8 0 0 00:00:12 Connect To make the lab work: Configure TTL protection (GTSM) on the EBGP session with X1 Configure MD5 TCP checksum on the EBGP session with X2. The password used by X2 is GuessWhat .","title":"Configuration Tasks"},{"location":"basic/6-protect/#verification","text":"Check the state of the BGP sessions with a command similar to show ip bgp summary . This is a printout taken from Arista EOS: rtr#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc x1 10.1.0.2 4 65100 42 63 0 0 00:00:16 Estab 2 2 x2 10.1.0.6 4 65101 17 16 0 0 00:00:04 Estab 2 2 Finally, use a command similar to show ip bgp to display the prefixes your router received from its EBGP neighbors.","title":"Verification"},{"location":"basic/6-protect/#reference-information","text":"You might find the following information useful if you\u2019re not using netlab to build the lab:","title":"Reference Information"},{"location":"basic/6-protect/#lab-wiring","text":"This lab uses a subset of the 4-router lab topology : Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1","title":"Lab Wiring"},{"location":"basic/6-protect/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 x1 -> rtr x2 192.168.101.1/24 Loopback swp1 10.1.0.6/30 x2 -> rtr I would love to add TCP-AO-protected session to this lab, but you cannot use TCP-AO on Cumulus Linux or FRR because it\u2019s not yet (as of September 2023) implemented in the Linux kernel. That\u2019s the price you\u2019re paying for riding on top of other people\u2019s infrastructure. \u21a9 \u21a9","title":"Lab Addressing"},{"location":"basic/7-bfd/","text":"Use BFD to Speed Up BGP Convergence Out-of-the-box EBGP is notoriously slow to converge \u2013 it can take up to three minutes to detect a failed EBGP neighbor. It\u2019s possible to tweak BGP timers to detect a failed neighbor in a few seconds, but it\u2019s much better to combine BGP with Bidirectional Forwarding Detection (BFD) \u2013 a lightweight protocol that can detect a link- or node failure in milliseconds . In this lab you\u2019ll use both mechanisms: You\u2019ll tweak the BGP timers to detect a link failure within 10 seconds. You\u2019ll enable BFD on an EBGP neighbor to reduce the failure detection time to approximately a second. The routers in your lab use the following BGP AS numbers. Your routers advertise an IPv4 prefix each; X1 does not advertise BGP prefixes. Node/ASN Router ID Advertised prefixes AS65000 r1 10.0.0.1 192.168.42.0/24 AS65001 r2 10.0.0.2 192.168.43.0/24 AS65100 x1 10.0.0.10 Start the Lab Assuming you already set up your lab infrastructure : Change directory to basic/7-bfd Execute netlab up ( other options ) Log into your devices (R1,R2) with netlab connect node and verify their configuration. If you\u2019re using netlab , you\u2019ll get a fully-configured lab, including BGP prefix origination on R1 and R2, and EBGP sessions between R1/R2 and X1. If you\u2019re using some other lab platform, you\u2019ll have to do a fair amount of prep work 1 . Checking the Convergence Time Log into R2 and enable debugging/logging of BGP updates (example: Cisco IOS), or monitoring of IP routing table (example: Arista EOS event monitor ). You\u2019ll have to inspect the BGP table on R2 every few seconds if your platform does not have similar functionality. Log into R1 and remove the IP address from the R1-X1 link. Note It would be easier to shut down the R1-X1 link, but that trick doesn\u2019t work with devices like Arista EOS that tear down the BGP session before shutting down the link. I used Arista EOS event monitor on R2, added IP address on the R1 Ethernet1 interface, and removed it as soon as the BGP session was established. It took BGP almost exactly three minutes to detect the failed EBGP session between X1 and R1: r2#sh event-monitor route match-ip 192.168.42.0/24 2023-09-16 16:02:25.953617|192.168.42.0/24|default|ebgp|0|200|updated|24 2023-09-16 16:05:27.071501|192.168.42.0/24|default|ebgp|0|0|removed|25 Reduce the BGP Timers You can reduce BGP session timers to improve BGP convergence: On the R1-X1 EBGP session, set the keepalive timer to three seconds and hold timer (timeout) to nine seconds. Clear the EBGP session if needed 2 \u2013 the BGP timers are negotiated during the BGP session establishment phase. Verification: Verify that you managed to reduce the BGP timers with a command similar to show ip bgp neighbor detail . Repeat the BGP convergence measurements \u2013 X1 should revoke the BGP prefix advertised by R1 within nine seconds. Configure BFD While some BGP implementations allow you to use very small BGP timers (example: one second keep alive timer), you shouldn\u2019t use that approach if you care about BGP convergence speed. It\u2019s much better to combine BGP with BFD: Configure BFD on the EBGP neighbor session on R1 Clear the BGP session if needed Verification: Verify that you have a working BFD session between R1 and X1. Most implementations display the BFD status of a BGP neighbor somewhere within the show ip bgp neighbor details (or similar) command. Some implementations have BFD-specific show commands like show bad neighbors . Repeat the BGP convergence measurements \u2013 X1 should revoke the BGP prefix advertised by R1 almost immediately. Reference Information You might find the following information useful if you\u2019re not using netlab to build the lab: Lab Wiring This lab uses a subset of the 4-router lab topology : Origin Device Origin Port Destination Device Destination Port r1 Ethernet1 x1 swp1 r2 Ethernet1 x1 swp3 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description r1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 r1 -> x1 r2 10.0.0.2/32 Loopback Ethernet1 10.1.0.5/30 r2 -> x1 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> r1 swp3 10.1.0.6/30 x1 -> r2 I did tell you to use netlab , didn\u2019t I? \u21a9 Some BGP implementations tear down BGP session when you change the BGP timers. \u21a9","title":"Use BFD to Speed Up BGP Convergence"},{"location":"basic/7-bfd/#use-bfd-to-speed-up-bgp-convergence","text":"Out-of-the-box EBGP is notoriously slow to converge \u2013 it can take up to three minutes to detect a failed EBGP neighbor. It\u2019s possible to tweak BGP timers to detect a failed neighbor in a few seconds, but it\u2019s much better to combine BGP with Bidirectional Forwarding Detection (BFD) \u2013 a lightweight protocol that can detect a link- or node failure in milliseconds . In this lab you\u2019ll use both mechanisms: You\u2019ll tweak the BGP timers to detect a link failure within 10 seconds. You\u2019ll enable BFD on an EBGP neighbor to reduce the failure detection time to approximately a second. The routers in your lab use the following BGP AS numbers. Your routers advertise an IPv4 prefix each; X1 does not advertise BGP prefixes. Node/ASN Router ID Advertised prefixes AS65000 r1 10.0.0.1 192.168.42.0/24 AS65001 r2 10.0.0.2 192.168.43.0/24 AS65100 x1 10.0.0.10","title":"Use BFD to Speed Up BGP Convergence"},{"location":"basic/7-bfd/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/7-bfd Execute netlab up ( other options ) Log into your devices (R1,R2) with netlab connect node and verify their configuration. If you\u2019re using netlab , you\u2019ll get a fully-configured lab, including BGP prefix origination on R1 and R2, and EBGP sessions between R1/R2 and X1. If you\u2019re using some other lab platform, you\u2019ll have to do a fair amount of prep work 1 .","title":"Start the Lab"},{"location":"basic/7-bfd/#checking-the-convergence-time","text":"Log into R2 and enable debugging/logging of BGP updates (example: Cisco IOS), or monitoring of IP routing table (example: Arista EOS event monitor ). You\u2019ll have to inspect the BGP table on R2 every few seconds if your platform does not have similar functionality. Log into R1 and remove the IP address from the R1-X1 link. Note It would be easier to shut down the R1-X1 link, but that trick doesn\u2019t work with devices like Arista EOS that tear down the BGP session before shutting down the link. I used Arista EOS event monitor on R2, added IP address on the R1 Ethernet1 interface, and removed it as soon as the BGP session was established. It took BGP almost exactly three minutes to detect the failed EBGP session between X1 and R1: r2#sh event-monitor route match-ip 192.168.42.0/24 2023-09-16 16:02:25.953617|192.168.42.0/24|default|ebgp|0|200|updated|24 2023-09-16 16:05:27.071501|192.168.42.0/24|default|ebgp|0|0|removed|25","title":"Checking the Convergence Time"},{"location":"basic/7-bfd/#reduce-the-bgp-timers","text":"You can reduce BGP session timers to improve BGP convergence: On the R1-X1 EBGP session, set the keepalive timer to three seconds and hold timer (timeout) to nine seconds. Clear the EBGP session if needed 2 \u2013 the BGP timers are negotiated during the BGP session establishment phase. Verification: Verify that you managed to reduce the BGP timers with a command similar to show ip bgp neighbor detail . Repeat the BGP convergence measurements \u2013 X1 should revoke the BGP prefix advertised by R1 within nine seconds.","title":"Reduce the BGP Timers"},{"location":"basic/7-bfd/#configure-bfd","text":"While some BGP implementations allow you to use very small BGP timers (example: one second keep alive timer), you shouldn\u2019t use that approach if you care about BGP convergence speed. It\u2019s much better to combine BGP with BFD: Configure BFD on the EBGP neighbor session on R1 Clear the BGP session if needed Verification: Verify that you have a working BFD session between R1 and X1. Most implementations display the BFD status of a BGP neighbor somewhere within the show ip bgp neighbor details (or similar) command. Some implementations have BFD-specific show commands like show bad neighbors . Repeat the BGP convergence measurements \u2013 X1 should revoke the BGP prefix advertised by R1 almost immediately.","title":"Configure BFD"},{"location":"basic/7-bfd/#reference-information","text":"You might find the following information useful if you\u2019re not using netlab to build the lab:","title":"Reference Information"},{"location":"basic/7-bfd/#lab-wiring","text":"This lab uses a subset of the 4-router lab topology : Origin Device Origin Port Destination Device Destination Port r1 Ethernet1 x1 swp1 r2 Ethernet1 x1 swp3","title":"Lab Wiring"},{"location":"basic/7-bfd/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description r1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 r1 -> x1 r2 10.0.0.2/32 Loopback Ethernet1 10.1.0.5/30 r2 -> x1 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> r1 swp3 10.1.0.6/30 x1 -> r2 I did tell you to use netlab , didn\u2019t I? \u21a9 Some BGP implementations tear down BGP session when you change the BGP timers. \u21a9","title":"Lab Addressing"},{"location":"basic/8-aggregate/","text":"BGP Route Aggregation In the Advertise IPv4 Prefixes to BGP Neighbors you configured a router to unconditionally advertise the IP prefix assigned to your site. That\u2019s good enough for small non-redundant networks; in more complex scenarios you\u2019d want a WAN edge router to advertise a prefix only if it can reach at least some parts of that address space. For example, in this lab exercise you\u2019ll configure the WAN edge router on Site-1 (R1) to advertise IP prefix 10.42.42.0/24 only if it has at least one more-specific prefix in the IP routing table. You could achieve that goal in various ways; we\u2019ll use the easiest approach \u2013 route aggregation (called summarization in other routing protocols). You\u2019ll configure BGP route aggregation on R1 and observe the results on R2. Lab Setup If you\u2019re using netlab, you\u2019ll start with a preconfigured lab \u2013 netlab will configure IP addressing, OSPF routing, and EBGP sessions. If you\u2019re using any other lab environment, you\u2019ll have to configure all of that manually. The following tables describe the OSPF and BGP setup; the Reference Information section contains IP addressing information. BGP Routers and AS Numbers Node/ASN Router ID Advertised prefixes AS65000 ce1 10.0.0.1 AS65001 ce2 10.0.0.2 AS65100 x1 10.0.0.10 BGP Neighbors Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 ce1 10.0.0.1 65000 x1 65100 10.1.0.2 ce2 10.0.0.2 65001 x1 65100 10.1.0.10 x1 10.0.0.10 65100 ce1 65000 10.1.0.1 ce2 65001 10.1.0.9 OSPF Setup (Area 0.0.0.0) Router Interface IPv4 Address Neighbor(s) ce1 Loopback 10.0.0.1/32 Ethernet2 10.1.0.5/30 sw sw Loopback 10.42.42.1/32 swp1 10.1.0.6/30 ce1 swp3 10.42.42.129/25 passive Start the Lab Assuming you already set up your lab infrastructure : Change directory to basic/8-aggregate Execute netlab up ( other options ) Log into your devices with netlab connect and verify IP addresses, OSPF routing, and basic BGP configuration. Note netlab will configure IP addressing, OSPF routing, and EBGP sessions on your routers. If you\u2019re not using netlab , you\u2019ll have to configure them manually. Redistribute OSPF into BGP BGP will summarize (aggregate) only prefixes already in the BGP table. At the moment your BGP tables are empty (you have not configured any prefixes to advertise). Redistribute OSPF into BGP on R1 to populate the BGP table with the prefixes from the 10.42.42.0/24 address space like you did in the Redistribute IGP Information Into BGP lab exercise. Note When you configure OSPF-to-BGP redistribution some network devices redistribute only routes received from other OSPF routers while other devices also redistribute local subnets on which you\u2019re running OSPF. This implementation difference will not impact our lab exercise but might result in slightly different printouts. After configuring the OSPF-to-BGP redistribution on R1 (running Arista cEOS), the BGP table on R1 contains numerous prefixes learned via OSPF 1 : ce1#show ip bgp|begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.6 - - - 0 i * > 10.42.42.16/28 10.1.0.6 - - - 0 i * > 10.42.42.128/25 10.1.0.6 - - - 0 i R1 advertises all these prefixes to X1 which propagates them to R2. The BGP table on R2 (and the global Internet) thus contains internal prefixes from Site-1 (a bad idea, but we\u2019ll fix it). ce2>show ip bgp|begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.10 0 - 100 0 65100 65000 i * > 10.42.42.16/28 10.1.0.10 0 - 100 0 65100 65000 i * > 10.42.42.128/25 10.1.0.10 0 - 100 0 65100 65000 i Configure BGP Route Aggregation This step is the crux of this lab exercise: using a BGP configuration command similar to aggregate-address create a summary prefix 10.42.42.0/24 that will be advertised if at least one more specific prefix is in the BGP table. The aggregate BGP prefix should appear in the BGP table on R1: ce1#show ip bgp|begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.6 - - - 0 i * > 10.42.42.0/24 - 0 - - 0 i * > 10.42.42.16/28 10.1.0.6 - - - 0 i * > 10.42.42.128/25 10.1.0.6 - - - 0 i The aggregated prefix is propagated to X1 and R2 (the good part), but R1 still advertises more-specific prefixes (the bad part) and a loopback prefix (the ugly part). ce2>show ip bgp|begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.10 0 - 100 0 65100 65000 i * > 10.42.42.0/24 10.1.0.10 0 - 100 0 65100 65000 i * > 10.42.42.16/28 10.1.0.10 0 - 100 0 65100 65000 i * > 10.42.42.128/25 10.1.0.10 0 - 100 0 65100 65000 i Suppress More Specific Prefixes Most BGP implementations can suppress more-specific prefixes within an aggregate prefix. This functionality is often configured with the summary-only option of the aggregate-address BGP configuration command. To fix the bad part of your current implementation, suppress more-specific prefixes of the prefix 10.42.42.0/24 on R1. After configuring the prefix suppression, examine the BGP table on R1. The more specific prefixes should be marked with s (suppressed): ce1#show ip bgp|begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.6 - - - 0 i * > 10.42.42.0/24 - 0 - - 0 i *s> 10.42.42.16/28 10.1.0.6 - - - 0 i *s> 10.42.42.128/25 10.1.0.6 - - - 0 i The suppressed prefixes should not be visible on R2 (unless you\u2019re dealing with a nasty BGP bug ): ce2>show ip bgp|begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.10 0 - 100 0 65100 65000 i * > 10.42.42.0/24 10.1.0.10 0 - 100 0 65100 65000 i Filter Outbound Updates Finally, let\u2019s fix the ugly part \u2013 deploy an outbound filter on the R1-X1 EBGP session that accepts only the prefixes you want to advertise ( 10.42.42.0/24 ) 2 . See the Filter Advertised Prefixes lab exercise for more details. With the outbound filter in place, the BGP table on R2 should contain only the desired IP prefix assigned to Site-1. Mission Accomplished! ce2>show ip bgp|begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.42.42.0/24 10.1.0.10 0 - 100 0 65100 65000 i Final Verification Disable the R1-SW link. Verify that the OSPF routes advertised by SW disappear from the BGP table on R1 Verify that R1 advertises no BGP prefixes to X1/R2. Reference Information You might find the following information useful if you\u2019re not using netlab to build the lab: Lab Wiring This lab uses a the 4-router lab topology . Origin Device Origin Port Destination Device Destination Port ce1 Ethernet1 x1 swp1 ce1 Ethernet2 sw swp1 ce2 Ethernet1 x1 swp3 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description ce1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 ce1 -> x1 Ethernet2 10.1.0.5/30 ce1 -> sw ce2 10.0.0.2/32 Loopback Ethernet1 10.1.0.9/30 ce2 -> x1 sw 10.0.0.3/32 Loopback swp1 10.1.0.6/30 sw -> ce1 lo1 10.42.42.129/25 Loopback lo2 10.42.42.17/28 Loopback x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> ce1 swp3 10.1.0.10/30 x1 -> ce2 I\u2019m using |begin Network filter on the show ip bgp command to skip the printout legend. \u21a9 You should be a good Internet citizen and always do that anyway \u2013 you wouldn\u2019t want to make headline news when your upstream providers fail to do their job . \u21a9","title":"BGP Route Aggregation"},{"location":"basic/8-aggregate/#bgp-route-aggregation","text":"In the Advertise IPv4 Prefixes to BGP Neighbors you configured a router to unconditionally advertise the IP prefix assigned to your site. That\u2019s good enough for small non-redundant networks; in more complex scenarios you\u2019d want a WAN edge router to advertise a prefix only if it can reach at least some parts of that address space. For example, in this lab exercise you\u2019ll configure the WAN edge router on Site-1 (R1) to advertise IP prefix 10.42.42.0/24 only if it has at least one more-specific prefix in the IP routing table. You could achieve that goal in various ways; we\u2019ll use the easiest approach \u2013 route aggregation (called summarization in other routing protocols). You\u2019ll configure BGP route aggregation on R1 and observe the results on R2.","title":"BGP Route Aggregation"},{"location":"basic/8-aggregate/#lab-setup","text":"If you\u2019re using netlab, you\u2019ll start with a preconfigured lab \u2013 netlab will configure IP addressing, OSPF routing, and EBGP sessions. If you\u2019re using any other lab environment, you\u2019ll have to configure all of that manually. The following tables describe the OSPF and BGP setup; the Reference Information section contains IP addressing information.","title":"Lab Setup"},{"location":"basic/8-aggregate/#bgp-routers-and-as-numbers","text":"Node/ASN Router ID Advertised prefixes AS65000 ce1 10.0.0.1 AS65001 ce2 10.0.0.2 AS65100 x1 10.0.0.10","title":"BGP Routers and AS Numbers"},{"location":"basic/8-aggregate/#bgp-neighbors","text":"Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 ce1 10.0.0.1 65000 x1 65100 10.1.0.2 ce2 10.0.0.2 65001 x1 65100 10.1.0.10 x1 10.0.0.10 65100 ce1 65000 10.1.0.1 ce2 65001 10.1.0.9","title":"BGP Neighbors"},{"location":"basic/8-aggregate/#ospf-setup-area-0000","text":"Router Interface IPv4 Address Neighbor(s) ce1 Loopback 10.0.0.1/32 Ethernet2 10.1.0.5/30 sw sw Loopback 10.42.42.1/32 swp1 10.1.0.6/30 ce1 swp3 10.42.42.129/25 passive","title":"OSPF Setup (Area 0.0.0.0)"},{"location":"basic/8-aggregate/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/8-aggregate Execute netlab up ( other options ) Log into your devices with netlab connect and verify IP addresses, OSPF routing, and basic BGP configuration. Note netlab will configure IP addressing, OSPF routing, and EBGP sessions on your routers. If you\u2019re not using netlab , you\u2019ll have to configure them manually.","title":"Start the Lab"},{"location":"basic/8-aggregate/#redistribute-ospf-into-bgp","text":"BGP will summarize (aggregate) only prefixes already in the BGP table. At the moment your BGP tables are empty (you have not configured any prefixes to advertise). Redistribute OSPF into BGP on R1 to populate the BGP table with the prefixes from the 10.42.42.0/24 address space like you did in the Redistribute IGP Information Into BGP lab exercise. Note When you configure OSPF-to-BGP redistribution some network devices redistribute only routes received from other OSPF routers while other devices also redistribute local subnets on which you\u2019re running OSPF. This implementation difference will not impact our lab exercise but might result in slightly different printouts. After configuring the OSPF-to-BGP redistribution on R1 (running Arista cEOS), the BGP table on R1 contains numerous prefixes learned via OSPF 1 : ce1#show ip bgp|begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.6 - - - 0 i * > 10.42.42.16/28 10.1.0.6 - - - 0 i * > 10.42.42.128/25 10.1.0.6 - - - 0 i R1 advertises all these prefixes to X1 which propagates them to R2. The BGP table on R2 (and the global Internet) thus contains internal prefixes from Site-1 (a bad idea, but we\u2019ll fix it). ce2>show ip bgp|begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.10 0 - 100 0 65100 65000 i * > 10.42.42.16/28 10.1.0.10 0 - 100 0 65100 65000 i * > 10.42.42.128/25 10.1.0.10 0 - 100 0 65100 65000 i","title":"Redistribute OSPF into BGP"},{"location":"basic/8-aggregate/#configure-bgp-route-aggregation","text":"This step is the crux of this lab exercise: using a BGP configuration command similar to aggregate-address create a summary prefix 10.42.42.0/24 that will be advertised if at least one more specific prefix is in the BGP table. The aggregate BGP prefix should appear in the BGP table on R1: ce1#show ip bgp|begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.6 - - - 0 i * > 10.42.42.0/24 - 0 - - 0 i * > 10.42.42.16/28 10.1.0.6 - - - 0 i * > 10.42.42.128/25 10.1.0.6 - - - 0 i The aggregated prefix is propagated to X1 and R2 (the good part), but R1 still advertises more-specific prefixes (the bad part) and a loopback prefix (the ugly part). ce2>show ip bgp|begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.10 0 - 100 0 65100 65000 i * > 10.42.42.0/24 10.1.0.10 0 - 100 0 65100 65000 i * > 10.42.42.16/28 10.1.0.10 0 - 100 0 65100 65000 i * > 10.42.42.128/25 10.1.0.10 0 - 100 0 65100 65000 i","title":"Configure BGP Route Aggregation"},{"location":"basic/8-aggregate/#suppress-more-specific-prefixes","text":"Most BGP implementations can suppress more-specific prefixes within an aggregate prefix. This functionality is often configured with the summary-only option of the aggregate-address BGP configuration command. To fix the bad part of your current implementation, suppress more-specific prefixes of the prefix 10.42.42.0/24 on R1. After configuring the prefix suppression, examine the BGP table on R1. The more specific prefixes should be marked with s (suppressed): ce1#show ip bgp|begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.6 - - - 0 i * > 10.42.42.0/24 - 0 - - 0 i *s> 10.42.42.16/28 10.1.0.6 - - - 0 i *s> 10.42.42.128/25 10.1.0.6 - - - 0 i The suppressed prefixes should not be visible on R2 (unless you\u2019re dealing with a nasty BGP bug ): ce2>show ip bgp|begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.10 0 - 100 0 65100 65000 i * > 10.42.42.0/24 10.1.0.10 0 - 100 0 65100 65000 i","title":"Suppress More Specific Prefixes"},{"location":"basic/8-aggregate/#filter-outbound-updates","text":"Finally, let\u2019s fix the ugly part \u2013 deploy an outbound filter on the R1-X1 EBGP session that accepts only the prefixes you want to advertise ( 10.42.42.0/24 ) 2 . See the Filter Advertised Prefixes lab exercise for more details. With the outbound filter in place, the BGP table on R2 should contain only the desired IP prefix assigned to Site-1. Mission Accomplished! ce2>show ip bgp|begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.42.42.0/24 10.1.0.10 0 - 100 0 65100 65000 i","title":"Filter Outbound Updates"},{"location":"basic/8-aggregate/#final-verification","text":"Disable the R1-SW link. Verify that the OSPF routes advertised by SW disappear from the BGP table on R1 Verify that R1 advertises no BGP prefixes to X1/R2.","title":"Final Verification"},{"location":"basic/8-aggregate/#reference-information","text":"You might find the following information useful if you\u2019re not using netlab to build the lab:","title":"Reference Information"},{"location":"basic/8-aggregate/#lab-wiring","text":"This lab uses a the 4-router lab topology . Origin Device Origin Port Destination Device Destination Port ce1 Ethernet1 x1 swp1 ce1 Ethernet2 sw swp1 ce2 Ethernet1 x1 swp3","title":"Lab Wiring"},{"location":"basic/8-aggregate/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description ce1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 ce1 -> x1 Ethernet2 10.1.0.5/30 ce1 -> sw ce2 10.0.0.2/32 Loopback Ethernet1 10.1.0.9/30 ce2 -> x1 sw 10.0.0.3/32 Loopback swp1 10.1.0.6/30 sw -> ce1 lo1 10.42.42.129/25 Loopback lo2 10.42.42.17/28 Loopback x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> ce1 swp3 10.1.0.10/30 x1 -> ce2 I\u2019m using |begin Network filter on the show ip bgp command to skip the printout legend. \u21a9 You should be a good Internet citizen and always do that anyway \u2013 you wouldn\u2019t want to make headline news when your upstream providers fail to do their job . \u21a9","title":"Lab Addressing"},{"location":"basic/9-ao/","text":"Protect BGP Sessions with TCP Authentication Option (TCP-AO) In a previous lab we used MD5 checksum to password-protect EBGP sessions . In this one we\u2019ll implement EBGP session protection using a newer mechanism: TCP Authentication Option defined in RFC 5925 . Lab Requirements This lab uses a slightly different supporting infrastructure than all other BGP labs. Linux kernel does not support TCP-AO (as of September 2023), which means that we cannot use virtual machines or containers running Cumulus Linux or Ubuntu/FRR as the external BGP routers. It\u2019s also impossible to use Arista cEOS container as it relies on the TCP/IP stack of the underlying Linux kernel. The only way to run this lab is to start external routers as virtual machines using Virtualbox or KVM/libvirt virtualization. netlab currently supports TCP-AO on these devices: Arista EOS virtual machines Cisco CSR 1000v Nokia SR-OS (virtual machine running in a container) Warning This lab was designed to be used with netlab . You need netlab release 1.6.3 or later to run it \u2013 we added TCP-AO support in that release. Adjusting Lab Topology The topology file ( topology.yml ) in the basic/9-ao directory uses Arista EOS virtual machines. You can use it as-is if: You\u2019re running labs with Virtualbox or KVM/libvirt and You installed Arista EOS Vagrant box (instructions: Virtualbox , KVM/libvirt ) If you created Cisco CSR1000v Vagrant box for your environment, replace device: eos in the external group in topology.yml with device: csr . If you want to run your labs with containers, you could use Nokia SR-OS as the external router 1 \u2013 replace the device: eos with device: sros . netlab uses containerlab provider to run Nokia SR-OS, so you might have to add provider: clab to the external group. Warning Nokia SR-OS runs as a virtual machine inside a container. You\u2019ll still need nested virtualization to run it if you\u2019re running your labs in a Ubuntu virtual machine. TCP-AO does not work on Arista EOS container as it uses underlying Linux TCP/IP stack. Start the Lab Assuming you already set up your lab infrastructure . Change directory to basic/9-ao Execute netlab up Log into your device (RTR) with netlab connect rtr and verify its configuration. If you\u2019re using a device supported by netlab , you\u2019ll get configured interfaces, IP addresses, BGP routing process, and BGP neighbors. If you\u2019re using an unsupported device, it\u2019s best if you do this lab exercise after the Advertise IPv4 Prefixes to BGP Neighbors one. If you\u2019re using your own lab infrastructure, use the wiring information from the protect EBGP sessions lab. Configuration Tasks The EBGP sessions with X1 and X2 will not be established because X1 and X2 use TCP-AO BGP session protection. They might be stuck in Connect , OpenSent or OpenConfirm state as illustrated by the following printout produced on Arista EOS: rtr#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc x1 10.1.0.2 4 65100 11 17 0 0 00:00:04 Connect x2 10.1.0.6 4 65101 11 15 0 0 00:00:07 Connect To make BGP sessions work, configure TCP-AO on both EBGP sessions on your router using the following parameters: BGP neighbor IP address TCP-AO secret Algorithm x1 10.1.0.2 BigSecret HMAC-SHA1-96 x2 10.1.0.6 GuessWhat HMAC-SHA1-96 Verification Check the state of the BGP sessions with a command similar to show ip bgp summary \u2013 the BGP sessions should be established, and you should have received several prefixes from both neighbors. This is a printout taken from Arista EOS: rtr#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc x1 10.1.0.2 4 65100 16 24 0 0 00:00:09 Estab 1 1 x2 10.1.0.6 4 65101 16 22 0 0 00:00:04 Estab 1 1 You can also inspect the TCP-AO details on some network devices. This is what Arista EOS displays as part of the show ip bgp neighbor command: rtr#show ip bgp neighbors 10.1.0.2|section TCP-AO TCP-AO Authentication: Profile: x1 MAC algorithm: hmac-sha1-96 Current key ID: 0 Next receive key ID: 0 Active receive key IDs: 0 Assuming you manage to get a license to do it from Nokia. \u21a9","title":"TCP Autentication Option (TCP-AO)"},{"location":"basic/9-ao/#protect-bgp-sessions-with-tcp-authentication-option-tcp-ao","text":"In a previous lab we used MD5 checksum to password-protect EBGP sessions . In this one we\u2019ll implement EBGP session protection using a newer mechanism: TCP Authentication Option defined in RFC 5925 .","title":"Protect BGP Sessions with TCP Authentication Option (TCP-AO)"},{"location":"basic/9-ao/#lab-requirements","text":"This lab uses a slightly different supporting infrastructure than all other BGP labs. Linux kernel does not support TCP-AO (as of September 2023), which means that we cannot use virtual machines or containers running Cumulus Linux or Ubuntu/FRR as the external BGP routers. It\u2019s also impossible to use Arista cEOS container as it relies on the TCP/IP stack of the underlying Linux kernel. The only way to run this lab is to start external routers as virtual machines using Virtualbox or KVM/libvirt virtualization. netlab currently supports TCP-AO on these devices: Arista EOS virtual machines Cisco CSR 1000v Nokia SR-OS (virtual machine running in a container) Warning This lab was designed to be used with netlab . You need netlab release 1.6.3 or later to run it \u2013 we added TCP-AO support in that release.","title":"Lab Requirements"},{"location":"basic/9-ao/#adjusting-lab-topology","text":"The topology file ( topology.yml ) in the basic/9-ao directory uses Arista EOS virtual machines. You can use it as-is if: You\u2019re running labs with Virtualbox or KVM/libvirt and You installed Arista EOS Vagrant box (instructions: Virtualbox , KVM/libvirt ) If you created Cisco CSR1000v Vagrant box for your environment, replace device: eos in the external group in topology.yml with device: csr . If you want to run your labs with containers, you could use Nokia SR-OS as the external router 1 \u2013 replace the device: eos with device: sros . netlab uses containerlab provider to run Nokia SR-OS, so you might have to add provider: clab to the external group. Warning Nokia SR-OS runs as a virtual machine inside a container. You\u2019ll still need nested virtualization to run it if you\u2019re running your labs in a Ubuntu virtual machine. TCP-AO does not work on Arista EOS container as it uses underlying Linux TCP/IP stack.","title":"Adjusting Lab Topology"},{"location":"basic/9-ao/#start-the-lab","text":"Assuming you already set up your lab infrastructure . Change directory to basic/9-ao Execute netlab up Log into your device (RTR) with netlab connect rtr and verify its configuration. If you\u2019re using a device supported by netlab , you\u2019ll get configured interfaces, IP addresses, BGP routing process, and BGP neighbors. If you\u2019re using an unsupported device, it\u2019s best if you do this lab exercise after the Advertise IPv4 Prefixes to BGP Neighbors one. If you\u2019re using your own lab infrastructure, use the wiring information from the protect EBGP sessions lab.","title":"Start the Lab"},{"location":"basic/9-ao/#configuration-tasks","text":"The EBGP sessions with X1 and X2 will not be established because X1 and X2 use TCP-AO BGP session protection. They might be stuck in Connect , OpenSent or OpenConfirm state as illustrated by the following printout produced on Arista EOS: rtr#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc x1 10.1.0.2 4 65100 11 17 0 0 00:00:04 Connect x2 10.1.0.6 4 65101 11 15 0 0 00:00:07 Connect To make BGP sessions work, configure TCP-AO on both EBGP sessions on your router using the following parameters: BGP neighbor IP address TCP-AO secret Algorithm x1 10.1.0.2 BigSecret HMAC-SHA1-96 x2 10.1.0.6 GuessWhat HMAC-SHA1-96","title":"Configuration Tasks"},{"location":"basic/9-ao/#verification","text":"Check the state of the BGP sessions with a command similar to show ip bgp summary \u2013 the BGP sessions should be established, and you should have received several prefixes from both neighbors. This is a printout taken from Arista EOS: rtr#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc x1 10.1.0.2 4 65100 16 24 0 0 00:00:09 Estab 1 1 x2 10.1.0.6 4 65101 16 22 0 0 00:00:04 Estab 1 1 You can also inspect the TCP-AO details on some network devices. This is what Arista EOS displays as part of the show ip bgp neighbor command: rtr#show ip bgp neighbors 10.1.0.2|section TCP-AO TCP-AO Authentication: Profile: x1 MAC algorithm: hmac-sha1-96 Current key ID: 0 Next receive key ID: 0 Active receive key IDs: 0 Assuming you manage to get a license to do it from Nokia. \u21a9","title":"Verification"},{"location":"external/","text":"Manual Setup You don\u2019t have to use netlab to create your labs; you can build them with any other tool, or use physical devices or a mix of physical- and virtual devices. Lab Topologies Lab instructions contain wiring tables that you can use to set up your infrastructure, and I tried to use the same setup for as many labs as possible to reduce your hassle. For the moment, all exercises use the 4-router lab. External BGP Routers The labs rely on preconfigured external BGP routers using Cumulus Linux. They are automatically configured by netlab ; if you decide to use some other infrastructure you\u2019ll have to configure them yourself. Lab directories in the GitHub repository contain config subdirectory with /etc/frr/frr.conf and /etc/network/interfaces files. I would use git clone to clone the GitHub repository to the local disk; GitHub also offers ZIP download. If you prefer point-and-click approach feel free to download individual files from the GitHub web UI. Finally, you could use curl on Cumulus Linux to pull them into the devices straight from GitHub. Whatever you decide to do, in the end you have to get the configuration files to individual Cumulus Linux devices, reconfigure interfaces with ifreload -a , and restart FRR. Initial Device Configurations When using netlab , you\u2019ll get IP addressing configured on your devices. Most labs (apart from the configure BGP sessions ones) also configure basic BGP setup on your devices. Without netlab you\u2019ll have to start from scratch; the information you need is in the lab instructions but it might become tedious. Long story short: Use netlab \ud83d\ude09","title":"Manual Setup"},{"location":"external/#manual-setup","text":"You don\u2019t have to use netlab to create your labs; you can build them with any other tool, or use physical devices or a mix of physical- and virtual devices.","title":"Manual Setup"},{"location":"external/#lab-topologies","text":"Lab instructions contain wiring tables that you can use to set up your infrastructure, and I tried to use the same setup for as many labs as possible to reduce your hassle. For the moment, all exercises use the 4-router lab.","title":"Lab Topologies"},{"location":"external/#external-bgp-routers","text":"The labs rely on preconfigured external BGP routers using Cumulus Linux. They are automatically configured by netlab ; if you decide to use some other infrastructure you\u2019ll have to configure them yourself. Lab directories in the GitHub repository contain config subdirectory with /etc/frr/frr.conf and /etc/network/interfaces files. I would use git clone to clone the GitHub repository to the local disk; GitHub also offers ZIP download. If you prefer point-and-click approach feel free to download individual files from the GitHub web UI. Finally, you could use curl on Cumulus Linux to pull them into the devices straight from GitHub. Whatever you decide to do, in the end you have to get the configuration files to individual Cumulus Linux devices, reconfigure interfaces with ifreload -a , and restart FRR.","title":"External BGP Routers"},{"location":"external/#initial-device-configurations","text":"When using netlab , you\u2019ll get IP addressing configured on your devices. Most labs (apart from the configure BGP sessions ones) also configure basic BGP setup on your devices. Without netlab you\u2019ll have to start from scratch; the information you need is in the lab instructions but it might become tedious. Long story short: Use netlab \ud83d\ude09","title":"Initial Device Configurations"},{"location":"external/4-router/","text":"Small (4-Router) Lab Topology The exercises that have one or two configurable devices use the following 4-router lab topology: C1 and C2 are the lab devices you\u2019ll configure in the hands-on labs. C1 is usually named rtr ; when a lab uses both routers they\u2019re usually named r1 and r2 . X1 and X2 are external BGP routers. The individual labs assume you\u2019re using Cumulus Linux 4.x as external BGP routers (FRR running on a Ubuntu VM/container would work as well) and provide initial interface- and FRR configurations for them as well as extra configuration needed in your lab. You can use any device you want for the external BGP routers, but you\u2019ll have to create your own initial configuration files (if you\u2019re not using netlab ) and extra device configuration templates. Should you decide to go down this route, we\u2019d appreciate if you\u2019d submit your changes as a pull request. Lab Wiring Creating a full mesh of links between four devices is not hard, but please do retain the interface sequence if you plan to use netlab to configure the devices. Link Name Origin Device Origin Port Destination Device Destination Port C1-to-X1 c1 Ethernet1 x1 swp1 C1-to-X2 c1 Ethernet2 x2 swp1 X1-to-X2 x1 swp2 x2 swp2 C2-to-X1 c2 Ethernet1 x1 swp3 C2-to-X2 c2 Ethernet2 x2 swp3 C1-C2 LAN c1 Ethernet3 c2 Ethernet3 IP Addressing The initial device configurations supplied with individual labs assume you\u2019re using the following IP addressing on the lab links: Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 C1-to-X1 Ethernet2 10.1.0.5/30 C1-to-X2 Ethernet3 172.16.0.1/24 C1-C2 LAN c2 10.0.0.2/32 Loopback Ethernet1 10.1.0.13/30 C2-to-X1 Ethernet2 10.1.0.17/30 C2-to-X2 Ethernet3 172.16.0.2/24 C1-C2 LAN x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 C1-to-X1 swp2 10.1.0.9/30 X1-to-X2 swp3 10.1.0.14/30 C2-to-X1 x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 C1-to-X2 swp2 10.1.0.10/30 X1-to-X2 swp3 10.1.0.18/30 C2-to-X2","title":"Small (4-Router) Lab Topology"},{"location":"external/4-router/#small-4-router-lab-topology","text":"The exercises that have one or two configurable devices use the following 4-router lab topology: C1 and C2 are the lab devices you\u2019ll configure in the hands-on labs. C1 is usually named rtr ; when a lab uses both routers they\u2019re usually named r1 and r2 . X1 and X2 are external BGP routers. The individual labs assume you\u2019re using Cumulus Linux 4.x as external BGP routers (FRR running on a Ubuntu VM/container would work as well) and provide initial interface- and FRR configurations for them as well as extra configuration needed in your lab. You can use any device you want for the external BGP routers, but you\u2019ll have to create your own initial configuration files (if you\u2019re not using netlab ) and extra device configuration templates. Should you decide to go down this route, we\u2019d appreciate if you\u2019d submit your changes as a pull request.","title":"Small (4-Router) Lab Topology"},{"location":"external/4-router/#lab-wiring","text":"Creating a full mesh of links between four devices is not hard, but please do retain the interface sequence if you plan to use netlab to configure the devices. Link Name Origin Device Origin Port Destination Device Destination Port C1-to-X1 c1 Ethernet1 x1 swp1 C1-to-X2 c1 Ethernet2 x2 swp1 X1-to-X2 x1 swp2 x2 swp2 C2-to-X1 c2 Ethernet1 x1 swp3 C2-to-X2 c2 Ethernet2 x2 swp3 C1-C2 LAN c1 Ethernet3 c2 Ethernet3","title":"Lab Wiring"},{"location":"external/4-router/#ip-addressing","text":"The initial device configurations supplied with individual labs assume you\u2019re using the following IP addressing on the lab links: Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 C1-to-X1 Ethernet2 10.1.0.5/30 C1-to-X2 Ethernet3 172.16.0.1/24 C1-C2 LAN c2 10.0.0.2/32 Loopback Ethernet1 10.1.0.13/30 C2-to-X1 Ethernet2 10.1.0.17/30 C2-to-X2 Ethernet3 172.16.0.2/24 C1-C2 LAN x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 C1-to-X1 swp2 10.1.0.9/30 X1-to-X2 swp3 10.1.0.14/30 C2-to-X1 x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 C1-to-X2 swp2 10.1.0.10/30 X1-to-X2 swp3 10.1.0.18/30 C2-to-X2","title":"IP Addressing"},{"location":"ibgp/1-edge/","text":"Establish an IBGP Session Between WAN Edge Routers The Setting Up BGP lab exercises covered the simplest possible scenario: your site has a single WAN edge router running BGP with one or more upstream Internet Service Providers (ISPs). That scenario is implausible \u2013 an organization investing in its own IP address space and AS number usually does that to achieve higher resilience of its Internet connectivity, and having a single WAN edge router is not good enough for that. In this lab exercise, you\u2019ll build a more realistic solution: your organization uses two WAN edge routers running BGP with two upstream ISPs. Most organizations want to optimize the use of their (still relatively expensive) WAN links \u2013 you\u2019ll have to ensure that all your routers reach the destinations in ISP-1 via the R1-X1 uplink (and similarly for ISP-2). Existing Lab Configuration When starting the lab with netlab you\u2019ll get a preconfigured lab with EBGP sessions between the three autonomous systems and OSPF running between R1 and R2. BGP Configuration The routers in your lab use the following BGP AS numbers. Each upstream router advertises an IPv4 prefix; your routers advertise the IPv4 prefix of the LAN subnet connecting them. Node/ASN Router ID Advertised prefixes AS65000 r1 10.0.0.1 10.0.100.0/24 r2 10.0.0.2 10.0.100.0/24 AS65100 x1 192.168.100.1 192.168.100.0/24 AS65101 x2 172.16.101.1 172.16.101.0/24 netlab configures these EBGP sessions when starting the lab; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. Node Neighbor Neighbor AS Neighbor IPv4 r1 x1 65100 10.1.0.2 r2 x2 65101 10.1.0.10 x1 r1 65000 10.1.0.1 x2 65101 10.1.0.6 x2 x1 65100 10.1.0.5 r2 65000 10.1.0.9 OSPF Configuration OSPF running in backbone area is configured on the following routers: Router Interface IPv4 Address Neighbor(s) r1 Loopback 10.0.0.1/32 Ethernet3 10.0.100.1/24 r2 r2 Loopback 10.0.0.2/32 Ethernet3 10.0.100.2/24 r1 Start the Lab Assuming you already set up your lab infrastructure : Change directory to ibgp/1-edge Execute netlab up ( other options ) Log into your devices (R1, R2) with netlab connect and verify that netlab correctly configured their IP addresses, OSPF routing, and EBGP sessions. Warning If you\u2019re not using netlab you\u2019ll have to configure R1 and R2 yourself. Why Do We Need IBGP? Inspect the BGP tables on R1 and R2. They contain the routes received from upstream ISPs, but not those received by the other WAN router \u2013 R1 cannot use the R2-X2 uplink to reach ISP-2 (and vice versa for R2). The following printouts contain BGP tables on R1 and R2 (all printouts in this lab exercise were generated by Arista vEOS): r1>show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.100.0/24 - - - - 0 i * > 172.16.101.0/24 10.1.0.2 0 - 100 0 65100 65101 i * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i r2>show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.100.0/24 - - - - 0 i * > 172.16.101.0/24 10.1.0.10 0 - 100 0 65101 i * > 192.168.100.0/24 10.1.0.10 0 - 100 0 65101 65100 i The content of the BGP tables on R1 and R2 shouldn\u2019t surprise you; R1 and R2 are exchanging internal routes (using OSPF) but not external routes. We could \u201csolve\u201d the challenge by redistributing external routes into OSPF (hint: don\u2019t do that ), but then we\u2019d lose the BGP information like the AS path the routers need to compare the routes. The only sane way forward is to establish a BGP session between R1 and R2, and because that session is set up between two routers in the same autonomous system, we call it an internal BGP (IBGP) session. Establish IBGP Session Configuration tasks: Configure an IBGP session between the loopback interfaces of R1 and R2 (10.0.0.1 and 10.0.0.2) using a BGP configuration command similar to neighbor address remote-as 65000 . Tip You\u2019ll find more details in the Configure a Single EBGP Session lab exercise. On some devices you\u2019ll have to activate the IBGP session within the IPv4 address family Verification: Check the status of the IBGP session with a command similar to show ip bgp summary or show ip bgp neighbors The following printout contains the BGP summary information on R1 after the IBGP session has been configured. As you can see, the router tries to establish the IBGP session but does not succeed. r1#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc r2 10.0.0.2 4 65000 0 0 0 0 00:06:03 Active x1 10.1.0.2 4 65100 2616 3068 0 0 02:10:34 Estab 2 2 Fix the Source IP Address of the IBGP Session BGP uses TCP as the transport protocol, and without further configuration, the TCP session\u2019s source IP address becomes the outgoing interface\u2019s IP address. Attempts to establish an IBGP session using the source IP address of the LAN interface are rejected by the IBGP neighbor as the source IP address in the TCP SYN packet does not match the neighbor IP address configured on the remote router. Configuration task: Configure the source address of the IBGP TCP session with a BGP configuration command similar to neighbor update-source . Note You could also configure the IBGP session between LAN IP addresses to make the lab work but never do that in a real-life network. You want the IBGP sessions to be stable, and using loopbacks as the endpoints of the TCP sessions (and relying on IGP to figure out how to reach remote loopbacks) is the best way to achieve that goal. Verification: After configuring the source IP address of the IBGP session on R1 and R2 the routers should be able to establish the IBGP session, as illustrated by the following printout: r1#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc r2 10.0.0.2 4 65000 8 8 0 0 00:00:07 Estab 2 2 x1 10.1.0.2 4 65100 2795 3276 0 0 02:19:28 Estab 2 2 After the IBGP session has been established, R1 and R2 exchange BGP prefixes received from X1 and X2, but the prefixes advertised by R2 are not selected as the best routes by R1 (and vice versa): r1#show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.100.0/24 - - - - 0 i * 10.0.100.0/24 10.0.0.2 0 - 100 0 i * > 172.16.101.0/24 10.1.0.2 0 - 100 0 65100 65101 i 172.16.101.0/24 10.1.0.10 0 - 100 0 65101 i * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i 192.168.100.0/24 10.1.0.10 0 - 100 0 65101 65100 i Further investigation shows that the IBGP prefixes are not used because they are considered invalid . r1#show ip bgp 172.16.101.0 BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 BGP routing table entry for 172.16.101.0/24 Paths: 2 available 65100 65101 10.1.0.2 from 10.1.0.2 (192.168.100.1) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 0, tag 0 Received 00:07:37 ago, valid, external, best Rx SAFI: Unicast 65101 10.1.0.10 from 10.0.0.2 (10.0.0.2) Origin IGP, metric 0, localpref 100, IGP metric -, weight 0, tag 0 Received 00:05:29 ago, invalid, internal Rx SAFI: Unicast Arista EOS is not exactly helpful in this scenario; you have to guess that the underlying root cause is that the BGP next hop is not reachable 1 . Fix the BGP Next Hop of IBGP Prefixes BGP routers do not change the BGP next hop of EBGP routes when advertising them over IBGP \u2013 the BGP next hop of routes in AS 65101 as advertised by R2 to R1 is thus the IP address of X2 on the R2-X1 link ( more details ). R1 does not have a route to that IP subnet in its IP routing table, so it considers the IBGP prefix using that BGP next hop invalid. There are two approaches to make the BGP next hop of IBGP prefixes valid: You can include the external subnets in the IGP process (for example, you can make them part of the OSPF area). Warning When using this approach, you must make the external subnets passive \u2013 you don\u2019t want to run IGP routing with another autonomous system. You can change the BGP next hop of the prefixes advertised over IBGP to the IP address of the advertising router. We\u2019ll use this approach. Configuration task: Change the BGP next hop of prefixes advertised over IBGP sessions with a BGP configuration command similar to neighbor next-hop-self . Verification: Inspect the BGP tables and IP routing tables on R1 and R2 and verify that R1 and R2 use BGP prefixes with the shortest AS path as the best BGP routes BGP-derived IP prefixes in the IP routing tables point to the WAN uplinks or LAN link between R1 and R2. You should get printouts similar to the ones generated by Arista EOS on R1: r1#show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.100.0/24 - - - - 0 i * 10.0.100.0/24 10.0.0.2 0 - 100 0 i * > 172.16.101.0/24 10.0.0.2 0 - 100 0 65101 i * 172.16.101.0/24 10.1.0.2 0 - 100 0 65100 65101 i * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i r1#show ip bgp 172.16.101.0 BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 BGP routing table entry for 172.16.101.0/24 Paths: 2 available 65101 10.0.0.2 from 10.0.0.2 (10.0.0.2) Origin IGP, metric 0, localpref 100, IGP metric 20, weight 0, tag 0 Received 00:00:29 ago, valid, internal, best Rx SAFI: Unicast 65100 65101 10.1.0.2 from 10.1.0.2 (192.168.100.1) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 0, tag 0 Received 00:51:03 ago, valid, external Rx SAFI: Unicast r1#show ip route | begin Gateway Gateway of last resort is not set C 10.0.0.1/32 is directly connected, Loopback0 O 10.0.0.2/32 [110/20] via 10.0.100.2, Ethernet3 C 10.0.100.0/24 is directly connected, Ethernet3 C 10.1.0.0/30 is directly connected, Ethernet1 B I 172.16.101.0/24 [200/0] via 10.0.100.2, Ethernet3 B E 192.168.100.0/24 [200/0] via 10.1.0.2, Ethernet1 Next: Build a Transit Network with IBGP Reference Information You might find the following information useful if you\u2019re not using netlab to build the lab: Lab Wiring This lab uses the 4-router lab topology : Link Name Origin Device Origin Port Destination Device Destination Port WAN uplink R1-to-X1 r1 Ethernet1 x1 swp1 WAN uplink R2-to-X2 r2 Ethernet2 x2 swp3 Inter-ISP link X1-to-X2 x1 swp2 x2 swp2 Intra-site LAN C1-C2 r1 Ethernet3 r2 Ethernet3 Note : Some interfaces are not used to conform with the predefined 4-router lab topology. Lab Addressing Node/Interface IPv4 Address IPv6 Address Description r1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 WAN uplink R1-to-X1 Ethernet2 Ethernet3 10.0.100.1/24 Intra-site LAN C1-C2 r2 10.0.0.2/32 Loopback Ethernet1 Ethernet2 10.1.0.9/30 WAN uplink R2-to-X2 Ethernet3 10.0.100.2/24 Intra-site LAN C1-C2 x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 WAN uplink R1-to-X1 swp2 10.1.0.5/30 Inter-ISP link X1-to-X2 swp3 x2 172.16.101.1/24 Loopback swp1 swp2 10.1.0.6/30 Inter-ISP link X1-to-X2 swp3 10.1.0.10/30 WAN uplink R2-to-X2 Note : Some interfaces are not configured with IP addresses to conform with the predefined 4-router lab topology. Some network devices consider any BGP next hop reachable if they have a default route. That can happen in a virtual lab if the lab device does not use a management VRF \u2013 most lab environments use DHCP to add the default route pointing to the management interface. When that default route appears in the global IP routing table, the IBGP prefix could be considered valid, but the resulting route would point to the management interface. \u21a9","title":"Establish an IBGP Session"},{"location":"ibgp/1-edge/#establish-an-ibgp-session-between-wan-edge-routers","text":"The Setting Up BGP lab exercises covered the simplest possible scenario: your site has a single WAN edge router running BGP with one or more upstream Internet Service Providers (ISPs). That scenario is implausible \u2013 an organization investing in its own IP address space and AS number usually does that to achieve higher resilience of its Internet connectivity, and having a single WAN edge router is not good enough for that. In this lab exercise, you\u2019ll build a more realistic solution: your organization uses two WAN edge routers running BGP with two upstream ISPs. Most organizations want to optimize the use of their (still relatively expensive) WAN links \u2013 you\u2019ll have to ensure that all your routers reach the destinations in ISP-1 via the R1-X1 uplink (and similarly for ISP-2).","title":"Establish an IBGP Session Between WAN Edge Routers"},{"location":"ibgp/1-edge/#existing-lab-configuration","text":"When starting the lab with netlab you\u2019ll get a preconfigured lab with EBGP sessions between the three autonomous systems and OSPF running between R1 and R2.","title":"Existing Lab Configuration"},{"location":"ibgp/1-edge/#bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. Each upstream router advertises an IPv4 prefix; your routers advertise the IPv4 prefix of the LAN subnet connecting them. Node/ASN Router ID Advertised prefixes AS65000 r1 10.0.0.1 10.0.100.0/24 r2 10.0.0.2 10.0.100.0/24 AS65100 x1 192.168.100.1 192.168.100.0/24 AS65101 x2 172.16.101.1 172.16.101.0/24 netlab configures these EBGP sessions when starting the lab; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. Node Neighbor Neighbor AS Neighbor IPv4 r1 x1 65100 10.1.0.2 r2 x2 65101 10.1.0.10 x1 r1 65000 10.1.0.1 x2 65101 10.1.0.6 x2 x1 65100 10.1.0.5 r2 65000 10.1.0.9","title":"BGP Configuration"},{"location":"ibgp/1-edge/#ospf-configuration","text":"OSPF running in backbone area is configured on the following routers: Router Interface IPv4 Address Neighbor(s) r1 Loopback 10.0.0.1/32 Ethernet3 10.0.100.1/24 r2 r2 Loopback 10.0.0.2/32 Ethernet3 10.0.100.2/24 r1","title":"OSPF Configuration"},{"location":"ibgp/1-edge/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to ibgp/1-edge Execute netlab up ( other options ) Log into your devices (R1, R2) with netlab connect and verify that netlab correctly configured their IP addresses, OSPF routing, and EBGP sessions. Warning If you\u2019re not using netlab you\u2019ll have to configure R1 and R2 yourself.","title":"Start the Lab"},{"location":"ibgp/1-edge/#why-do-we-need-ibgp","text":"Inspect the BGP tables on R1 and R2. They contain the routes received from upstream ISPs, but not those received by the other WAN router \u2013 R1 cannot use the R2-X2 uplink to reach ISP-2 (and vice versa for R2). The following printouts contain BGP tables on R1 and R2 (all printouts in this lab exercise were generated by Arista vEOS): r1>show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.100.0/24 - - - - 0 i * > 172.16.101.0/24 10.1.0.2 0 - 100 0 65100 65101 i * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i r2>show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.100.0/24 - - - - 0 i * > 172.16.101.0/24 10.1.0.10 0 - 100 0 65101 i * > 192.168.100.0/24 10.1.0.10 0 - 100 0 65101 65100 i The content of the BGP tables on R1 and R2 shouldn\u2019t surprise you; R1 and R2 are exchanging internal routes (using OSPF) but not external routes. We could \u201csolve\u201d the challenge by redistributing external routes into OSPF (hint: don\u2019t do that ), but then we\u2019d lose the BGP information like the AS path the routers need to compare the routes. The only sane way forward is to establish a BGP session between R1 and R2, and because that session is set up between two routers in the same autonomous system, we call it an internal BGP (IBGP) session.","title":"Why Do We Need IBGP?"},{"location":"ibgp/1-edge/#establish-ibgp-session","text":"Configuration tasks: Configure an IBGP session between the loopback interfaces of R1 and R2 (10.0.0.1 and 10.0.0.2) using a BGP configuration command similar to neighbor address remote-as 65000 . Tip You\u2019ll find more details in the Configure a Single EBGP Session lab exercise. On some devices you\u2019ll have to activate the IBGP session within the IPv4 address family Verification: Check the status of the IBGP session with a command similar to show ip bgp summary or show ip bgp neighbors The following printout contains the BGP summary information on R1 after the IBGP session has been configured. As you can see, the router tries to establish the IBGP session but does not succeed. r1#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc r2 10.0.0.2 4 65000 0 0 0 0 00:06:03 Active x1 10.1.0.2 4 65100 2616 3068 0 0 02:10:34 Estab 2 2","title":"Establish IBGP Session"},{"location":"ibgp/1-edge/#fix-the-source-ip-address-of-the-ibgp-session","text":"BGP uses TCP as the transport protocol, and without further configuration, the TCP session\u2019s source IP address becomes the outgoing interface\u2019s IP address. Attempts to establish an IBGP session using the source IP address of the LAN interface are rejected by the IBGP neighbor as the source IP address in the TCP SYN packet does not match the neighbor IP address configured on the remote router. Configuration task: Configure the source address of the IBGP TCP session with a BGP configuration command similar to neighbor update-source . Note You could also configure the IBGP session between LAN IP addresses to make the lab work but never do that in a real-life network. You want the IBGP sessions to be stable, and using loopbacks as the endpoints of the TCP sessions (and relying on IGP to figure out how to reach remote loopbacks) is the best way to achieve that goal. Verification: After configuring the source IP address of the IBGP session on R1 and R2 the routers should be able to establish the IBGP session, as illustrated by the following printout: r1#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc r2 10.0.0.2 4 65000 8 8 0 0 00:00:07 Estab 2 2 x1 10.1.0.2 4 65100 2795 3276 0 0 02:19:28 Estab 2 2 After the IBGP session has been established, R1 and R2 exchange BGP prefixes received from X1 and X2, but the prefixes advertised by R2 are not selected as the best routes by R1 (and vice versa): r1#show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.100.0/24 - - - - 0 i * 10.0.100.0/24 10.0.0.2 0 - 100 0 i * > 172.16.101.0/24 10.1.0.2 0 - 100 0 65100 65101 i 172.16.101.0/24 10.1.0.10 0 - 100 0 65101 i * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i 192.168.100.0/24 10.1.0.10 0 - 100 0 65101 65100 i Further investigation shows that the IBGP prefixes are not used because they are considered invalid . r1#show ip bgp 172.16.101.0 BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 BGP routing table entry for 172.16.101.0/24 Paths: 2 available 65100 65101 10.1.0.2 from 10.1.0.2 (192.168.100.1) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 0, tag 0 Received 00:07:37 ago, valid, external, best Rx SAFI: Unicast 65101 10.1.0.10 from 10.0.0.2 (10.0.0.2) Origin IGP, metric 0, localpref 100, IGP metric -, weight 0, tag 0 Received 00:05:29 ago, invalid, internal Rx SAFI: Unicast Arista EOS is not exactly helpful in this scenario; you have to guess that the underlying root cause is that the BGP next hop is not reachable 1 .","title":"Fix the Source IP Address of the IBGP Session"},{"location":"ibgp/1-edge/#fix-the-bgp-next-hop-of-ibgp-prefixes","text":"BGP routers do not change the BGP next hop of EBGP routes when advertising them over IBGP \u2013 the BGP next hop of routes in AS 65101 as advertised by R2 to R1 is thus the IP address of X2 on the R2-X1 link ( more details ). R1 does not have a route to that IP subnet in its IP routing table, so it considers the IBGP prefix using that BGP next hop invalid. There are two approaches to make the BGP next hop of IBGP prefixes valid: You can include the external subnets in the IGP process (for example, you can make them part of the OSPF area). Warning When using this approach, you must make the external subnets passive \u2013 you don\u2019t want to run IGP routing with another autonomous system. You can change the BGP next hop of the prefixes advertised over IBGP to the IP address of the advertising router. We\u2019ll use this approach. Configuration task: Change the BGP next hop of prefixes advertised over IBGP sessions with a BGP configuration command similar to neighbor next-hop-self . Verification: Inspect the BGP tables and IP routing tables on R1 and R2 and verify that R1 and R2 use BGP prefixes with the shortest AS path as the best BGP routes BGP-derived IP prefixes in the IP routing tables point to the WAN uplinks or LAN link between R1 and R2. You should get printouts similar to the ones generated by Arista EOS on R1: r1#show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.100.0/24 - - - - 0 i * 10.0.100.0/24 10.0.0.2 0 - 100 0 i * > 172.16.101.0/24 10.0.0.2 0 - 100 0 65101 i * 172.16.101.0/24 10.1.0.2 0 - 100 0 65100 65101 i * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i r1#show ip bgp 172.16.101.0 BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 BGP routing table entry for 172.16.101.0/24 Paths: 2 available 65101 10.0.0.2 from 10.0.0.2 (10.0.0.2) Origin IGP, metric 0, localpref 100, IGP metric 20, weight 0, tag 0 Received 00:00:29 ago, valid, internal, best Rx SAFI: Unicast 65100 65101 10.1.0.2 from 10.1.0.2 (192.168.100.1) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 0, tag 0 Received 00:51:03 ago, valid, external Rx SAFI: Unicast r1#show ip route | begin Gateway Gateway of last resort is not set C 10.0.0.1/32 is directly connected, Loopback0 O 10.0.0.2/32 [110/20] via 10.0.100.2, Ethernet3 C 10.0.100.0/24 is directly connected, Ethernet3 C 10.1.0.0/30 is directly connected, Ethernet1 B I 172.16.101.0/24 [200/0] via 10.0.100.2, Ethernet3 B E 192.168.100.0/24 [200/0] via 10.1.0.2, Ethernet1 Next: Build a Transit Network with IBGP","title":"Fix the BGP Next Hop of IBGP Prefixes"},{"location":"ibgp/1-edge/#reference-information","text":"You might find the following information useful if you\u2019re not using netlab to build the lab:","title":"Reference Information"},{"location":"ibgp/1-edge/#lab-wiring","text":"This lab uses the 4-router lab topology : Link Name Origin Device Origin Port Destination Device Destination Port WAN uplink R1-to-X1 r1 Ethernet1 x1 swp1 WAN uplink R2-to-X2 r2 Ethernet2 x2 swp3 Inter-ISP link X1-to-X2 x1 swp2 x2 swp2 Intra-site LAN C1-C2 r1 Ethernet3 r2 Ethernet3 Note : Some interfaces are not used to conform with the predefined 4-router lab topology.","title":"Lab Wiring"},{"location":"ibgp/1-edge/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description r1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 WAN uplink R1-to-X1 Ethernet2 Ethernet3 10.0.100.1/24 Intra-site LAN C1-C2 r2 10.0.0.2/32 Loopback Ethernet1 Ethernet2 10.1.0.9/30 WAN uplink R2-to-X2 Ethernet3 10.0.100.2/24 Intra-site LAN C1-C2 x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 WAN uplink R1-to-X1 swp2 10.1.0.5/30 Inter-ISP link X1-to-X2 swp3 x2 172.16.101.1/24 Loopback swp1 swp2 10.1.0.6/30 Inter-ISP link X1-to-X2 swp3 10.1.0.10/30 WAN uplink R2-to-X2 Note : Some interfaces are not configured with IP addresses to conform with the predefined 4-router lab topology. Some network devices consider any BGP next hop reachable if they have a default route. That can happen in a virtual lab if the lab device does not use a management VRF \u2013 most lab environments use DHCP to add the default route pointing to the management interface. When that default route appears in the global IP routing table, the IBGP prefix could be considered valid, but the resulting route would point to the management interface. \u21a9","title":"Lab Addressing"},{"location":"ibgp/2-transit/","text":"Build a Transit Network with IBGP In the Establish an IBGP Session Between WAN Edge Routers lab exercise you built a simple network with two adjacent BGP routers. In this exercise you\u2019ll explore the impact of adding a core router between edge routers running BGP. After starting the lab, you\u2019ll have to configure all the IBGP sessions needed to establish connectivity between loopback interfaces of PE2 and EXT routers. You MUST NOT use route redistribution between OSPF and BGP to solve the connectivity issues (there\u2019s a really good reason for that restriction). Existing Lab Configuration When starting the lab with netlab you\u2019ll get a preconfigured lab: All routers will have their interfaces and IP addresses configured OSPF will be running between PE1, PE2, and CORE routers. BGP will be configured on PE1, PE2 and EXT routers. All three routers will advertise their loopback interfaces in BGP. There will be an EBGP session between PE1 and EXT routers. Warning The lab is using unnumbered IPv4 link between PE2 and CORE routers to simplify the verification process. If your devices don\u2019t support unnumbered IPv4 links or cannot run OSPF over unnumbered IPv4 links , remove the prefix.ipv4: True line from the lab topology file. The following tables summarize the existing lab configuration BGP Configuration The routers in your lab use the following BGP AS numbers. The external router advertises an IPv4 prefix, your PE-routers advertise their loopback IPv4 addresses. Node/ASN Router ID Advertised prefixes AS65000 pe1 10.0.0.2 10.0.0.2/32 pe2 10.0.0.3 10.0.0.3/32 AS65100 ext 10.0.0.10 172.16.42.0/24 netlab also configures the EBGP session between PE1 and EXT routers. Node Neighbor Neighbor AS Neighbor IPv4 ext pe1 65000 10.1.0.6 pe1 ext 65100 10.1.0.5 OSPF Configuration OSPF backbone area is configured on the following routers in AS 65000: Router Interface IPv4 Address Neighbor(s) core Loopback 10.0.0.1/32 Ethernet1 10.1.0.1/30 pe1 Ethernet3 True pe2 pe1 Loopback 10.0.0.2/32 swp1 10.1.0.2/30 core pe2 Loopback 10.0.0.3/32 Ethernet3 True core Start the Lab Assuming you already set up your lab infrastructure : Change directory to ibgp/2-transit Execute netlab up ( other options ) Log into your devices (R1, R2) with netlab connect and verify that netlab correctly configured their IP addresses, OSPF routing, and EBGP sessions. Warning If you\u2019re not using netlab you\u2019ll have to configure CORE and PE2 routers yourself. Configurations for PE1 and EXT routers are in the config subdirectory. Propagate External BGP Routes to PE2 Try to ping the external router ( 172.16.42.42 ) from PE2. You have to check the connectivity between the loopback addresses, so you should use a version of the ping command that specifies the source interface or the source IP address. For example, you have to use ping 172.16.42.42 source loop 0 on Arista EOS. Tip You don\u2019t have to worry about the source IP address of the ICMP Echo packets on devices that support unnumbered IPv4 interfaces \u2013 these devices will automatically set the packet\u2019s source IP address to the device\u2019s loopback IP address. The extended ping command is often available only in privileged ( enable ) CLI mode. The ping command will most likely fail 1 . Arista EOS displays the root cause of the failure: the destination network is not in the IP routing table: pe2#ping 172.16.42.42 source loop 0 PING 172.16.42.42 (172.16.42.42) from 10.0.0.3 : 72(100) bytes of data. ping: sendmsg: Network is unreachable ping: sendmsg: Network is unreachable ping: sendmsg: Network is unreachable ping: sendmsg: Network is unreachable ping: sendmsg: Network is unreachable --- 172.16.42.42 ping statistics --- 5 packets transmitted, 0 received, 100% packet loss, time 40ms A quick look into the routing- and BGP table on PE2 2 confirms that PE2 knows nothing about the IPv4 prefix 172.16.42.0/24 . pe2#show ip route | begin Gateway Gateway of last resort is not set O 10.0.0.1/32 is directly connected, Ethernet3 O 10.0.0.2/32 [110/20] via 10.0.0.1, Ethernet3 C 10.0.0.3/32 is directly connected, Loopback0 O 10.1.0.0/30 [110/20] via 10.0.0.1, Ethernet3 pe2#show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 - - - - 0 i Warning You might not have the 10.0.0.3/32 prefix in the BGP table on PE2 due to a bug in netlab releases prior to 1.6.4-post2. If that\u2019s the case, configure BGP on PE2 to advertise the PE2 loopback interface (see Advertise IPv4 Prefixes to BGP Neighbors for more details). Even better: stop the lab, upgrade netlab , and restart the lab. The lack of BGP routes on PE2 shouldn\u2019t surprise you if you successfully completed the Establish an IBGP Session Between WAN Edge Routers lab exercise \u2013 you already know you need an IBGP session between PE1 and PE2. Configuration task: Configure an IBGP session between the loopback interfaces of PE1 and PE2 3 . Tip The IBGP session is preconfigured on PE1 and should be established as soon as you configure it on PE2. Verification: Check the BGP neighbors and the BGP table on PE2. You should see an established IBGP session between PE1 and PE2, and the BGP route for 172.16.42.0/24 in the BGP table. This is the printout you should get on Arista EOS: pe2#show ip bgp sum BGP summary information for VRF default Router identifier 10.0.0.3, local AS number 65000 Neighbor Status Codes: m - Under maintenance Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 10.0.0.2 4 65000 20 20 0 0 00:00:08 Estab 2 2 pe2#show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.2/32 10.0.0.2 0 - 100 0 i * > 10.0.0.3/32 - - - - 0 i * > 172.16.42.0/24 10.0.0.2 0 - 100 0 65100 i Retry the ping command. It should no longer complain that the network is unreachable, but could generate another interesting bit of information on devices that parse and display ICMP error reports. For example, Arista EOS reports that the CORE router (10.0.0.1) claims it cannot reach the destination: pe2#ping 172.16.42.42 source loop 0 PING 172.16.42.42 (172.16.42.42) from 10.0.0.3 : 72(100) bytes of data. From 10.0.0.1 icmp_seq=1 Destination Net Unreachable --- 172.16.42.42 ping statistics --- 5 packets transmitted, 0 received, +1 errors, 100% packet loss, time 30ms Fixing the Core Routing Log into the router complaining it cannot reach the destination (the CORE router) and check its IP routing table. The route for 172.16.42.0/24 is missing. core#show ip route | begin Gateway Gateway of last resort is not set C 10.0.0.1/32 is directly connected, Loopback0 O 10.0.0.2/32 [110/10] via 10.1.0.2, Ethernet1 O 10.0.0.3/32 is directly connected, Ethernet3 C 10.1.0.0/30 is directly connected, Ethernet1 That shouldn\u2019t be a big surprise; after all, the external prefix is advertised only in BGP, and CORE router runs only OSPF. There are at least four ways to fix the routing in the core of your autonomous system: Redistribute EBGP information into OSPF. That\u2019s dangerous in real-life networks with large BGP tables and thus you are not allowed to do it in this lab exercise. Advertise an OSPF default route from PE1. That would solve your immediate problem but wouldn\u2019t result in a true transit network \u2013 you would run into interesting challenges when trying to connect external networks to PE2. This option is thus also off the table. Hide the transit packets from the CORE router using MPLS or IP-over-something tunnels. While the MPLS approach is commonly used to build BGP-free core networks , it\u2019s too complex for this lab exercise 4 . Make CORE router part of the BGP routing. This is the approach we\u2019ll use. Configuration tasks: Configure BGP with AS number 65000 on the CORE router Configure IBGP sessions between all BGP routers in AS 65000. Tip Due to the IBGP loop avoidance mechanism (never advertise IBGP routes to other IBGP neighbors) you have to configure a full mesh of IBGP sessions, adding PE1-CORE and PE2-CORE IBGP sessions. Your lab might work without the PE2-CORE IBGP session, but would probably stop working the moment you connect an EBGP neighbor to PE2 5 . The IBGP session between PE1 and CORE routers is preconfigured on PE1 and should be established as soon as you configure it on CORE router. You\u2019ll have to configure the PE2-CORE IBGP session on both ends. Verification: Check the BGP neighbors and the BGP table on the CORE router. The router should have two established IBGP sessions and three prefixes in its BGP table: core#show ip bgp sum BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 10.0.0.2 4 65000 14 14 0 0 00:00:10 Estab 2 2 10.0.0.3 4 65000 10 9 0 0 00:00:08 Estab 1 1 core#show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.2/32 10.0.0.2 0 - 100 0 i * > 10.0.0.3/32 10.0.0.3 0 - 100 0 i * > 172.16.42.0/24 10.0.0.2 0 - 100 0 65100 i Retry the ping command on PE2. PE2 should be able to reach the EXT router: pe2#ping 172.16.42.42 source loop 0 PING 172.16.42.42 (172.16.42.42) from 10.0.0.3 : 72(100) bytes of data. 80 bytes from 172.16.42.42: icmp_seq=1 ttl=62 time=0.086 ms 80 bytes from 172.16.42.42: icmp_seq=2 ttl=62 time=0.007 ms 80 bytes from 172.16.42.42: icmp_seq=3 ttl=62 time=0.008 ms 80 bytes from 172.16.42.42: icmp_seq=4 ttl=62 time=0.006 ms 80 bytes from 172.16.42.42: icmp_seq=5 ttl=62 time=0.007 ms --- 172.16.42.42 ping statistics --- 5 packets transmitted, 5 received, 0% packet loss, time 0ms rtt min/avg/max/mdev = 0.006/0.022/0.086/0.032 ms, ipg/ewma 0.032/0.053 ms Reference Information You might find the following information useful if you\u2019re not using netlab to build the lab: Lab Wiring This lab uses the 4-router lab topology with the following mapping between the routers in the 4-router lab topology and this lab: 4-router-topology device Lab device C1 Core C2 PE2 X1 PE1 X2 EXT Link Name Origin Device Origin Port Destination Device Destination Port core Ethernet1 pe1 swp1 Unused link core Ethernet2 ext swp1 Inter-AS link pe1 swp2 ext swp2 Unused link pe2 Ethernet1 pe1 swp3 Unused link pe2 Ethernet2 ext swp3 core Ethernet3 pe2 Ethernet3 Note : Some interfaces are not used to conform with the predefined 4-router lab topology. Lab Addressing Node/Interface IPv4 Address IPv6 Address Description core 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 core -> pe1 Ethernet2 Unused link Ethernet3 True core -> pe2 ext 172.16.42.42/24 Loopback swp1 Unused link swp2 10.1.0.5/30 Inter-AS link swp3 Unused link pe1 10.0.0.2/32 Loopback swp1 10.1.0.2/30 pe1 -> core swp2 10.1.0.6/30 Inter-AS link swp3 Unused link pe2 10.0.0.3/32 Loopback Ethernet1 Unused link Ethernet2 Unused link Ethernet3 True pe2 -> core Note : Some interfaces are not configured with IP addresses to conform with the predefined 4-router lab topology. If it doesn\u2019t you have a more interesting problem to troubleshoot \u2013 why does it work? \u21a9 Most show printouts in this lab exercise use the | begin Something pipe to skip the (mostly irrelevant) header information. \u21a9 Don\u2019t forget to activate the IBGP session within the IPv4 address family (AF) if your device requires per-AF neighbor activation. \u21a9 \u2026 but as you have a running lab that\u2019s easy to restart, please feel free to try to get it to work. You get bonus points if you decide to use Segment Routing and a virtual 6-pack of Kool-Aid if you use SRv6 ;) \u21a9 Proving that is left as an exercise for the reader \u21a9","title":"Build a Transit Network with IBGP"},{"location":"ibgp/2-transit/#build-a-transit-network-with-ibgp","text":"In the Establish an IBGP Session Between WAN Edge Routers lab exercise you built a simple network with two adjacent BGP routers. In this exercise you\u2019ll explore the impact of adding a core router between edge routers running BGP. After starting the lab, you\u2019ll have to configure all the IBGP sessions needed to establish connectivity between loopback interfaces of PE2 and EXT routers. You MUST NOT use route redistribution between OSPF and BGP to solve the connectivity issues (there\u2019s a really good reason for that restriction).","title":"Build a Transit Network with IBGP"},{"location":"ibgp/2-transit/#existing-lab-configuration","text":"When starting the lab with netlab you\u2019ll get a preconfigured lab: All routers will have their interfaces and IP addresses configured OSPF will be running between PE1, PE2, and CORE routers. BGP will be configured on PE1, PE2 and EXT routers. All three routers will advertise their loopback interfaces in BGP. There will be an EBGP session between PE1 and EXT routers. Warning The lab is using unnumbered IPv4 link between PE2 and CORE routers to simplify the verification process. If your devices don\u2019t support unnumbered IPv4 links or cannot run OSPF over unnumbered IPv4 links , remove the prefix.ipv4: True line from the lab topology file. The following tables summarize the existing lab configuration","title":"Existing Lab Configuration"},{"location":"ibgp/2-transit/#bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. The external router advertises an IPv4 prefix, your PE-routers advertise their loopback IPv4 addresses. Node/ASN Router ID Advertised prefixes AS65000 pe1 10.0.0.2 10.0.0.2/32 pe2 10.0.0.3 10.0.0.3/32 AS65100 ext 10.0.0.10 172.16.42.0/24 netlab also configures the EBGP session between PE1 and EXT routers. Node Neighbor Neighbor AS Neighbor IPv4 ext pe1 65000 10.1.0.6 pe1 ext 65100 10.1.0.5","title":"BGP Configuration"},{"location":"ibgp/2-transit/#ospf-configuration","text":"OSPF backbone area is configured on the following routers in AS 65000: Router Interface IPv4 Address Neighbor(s) core Loopback 10.0.0.1/32 Ethernet1 10.1.0.1/30 pe1 Ethernet3 True pe2 pe1 Loopback 10.0.0.2/32 swp1 10.1.0.2/30 core pe2 Loopback 10.0.0.3/32 Ethernet3 True core","title":"OSPF Configuration"},{"location":"ibgp/2-transit/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to ibgp/2-transit Execute netlab up ( other options ) Log into your devices (R1, R2) with netlab connect and verify that netlab correctly configured their IP addresses, OSPF routing, and EBGP sessions. Warning If you\u2019re not using netlab you\u2019ll have to configure CORE and PE2 routers yourself. Configurations for PE1 and EXT routers are in the config subdirectory.","title":"Start the Lab"},{"location":"ibgp/2-transit/#propagate-external-bgp-routes-to-pe2","text":"Try to ping the external router ( 172.16.42.42 ) from PE2. You have to check the connectivity between the loopback addresses, so you should use a version of the ping command that specifies the source interface or the source IP address. For example, you have to use ping 172.16.42.42 source loop 0 on Arista EOS. Tip You don\u2019t have to worry about the source IP address of the ICMP Echo packets on devices that support unnumbered IPv4 interfaces \u2013 these devices will automatically set the packet\u2019s source IP address to the device\u2019s loopback IP address. The extended ping command is often available only in privileged ( enable ) CLI mode. The ping command will most likely fail 1 . Arista EOS displays the root cause of the failure: the destination network is not in the IP routing table: pe2#ping 172.16.42.42 source loop 0 PING 172.16.42.42 (172.16.42.42) from 10.0.0.3 : 72(100) bytes of data. ping: sendmsg: Network is unreachable ping: sendmsg: Network is unreachable ping: sendmsg: Network is unreachable ping: sendmsg: Network is unreachable ping: sendmsg: Network is unreachable --- 172.16.42.42 ping statistics --- 5 packets transmitted, 0 received, 100% packet loss, time 40ms A quick look into the routing- and BGP table on PE2 2 confirms that PE2 knows nothing about the IPv4 prefix 172.16.42.0/24 . pe2#show ip route | begin Gateway Gateway of last resort is not set O 10.0.0.1/32 is directly connected, Ethernet3 O 10.0.0.2/32 [110/20] via 10.0.0.1, Ethernet3 C 10.0.0.3/32 is directly connected, Loopback0 O 10.1.0.0/30 [110/20] via 10.0.0.1, Ethernet3 pe2#show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 - - - - 0 i Warning You might not have the 10.0.0.3/32 prefix in the BGP table on PE2 due to a bug in netlab releases prior to 1.6.4-post2. If that\u2019s the case, configure BGP on PE2 to advertise the PE2 loopback interface (see Advertise IPv4 Prefixes to BGP Neighbors for more details). Even better: stop the lab, upgrade netlab , and restart the lab. The lack of BGP routes on PE2 shouldn\u2019t surprise you if you successfully completed the Establish an IBGP Session Between WAN Edge Routers lab exercise \u2013 you already know you need an IBGP session between PE1 and PE2. Configuration task: Configure an IBGP session between the loopback interfaces of PE1 and PE2 3 . Tip The IBGP session is preconfigured on PE1 and should be established as soon as you configure it on PE2. Verification: Check the BGP neighbors and the BGP table on PE2. You should see an established IBGP session between PE1 and PE2, and the BGP route for 172.16.42.0/24 in the BGP table. This is the printout you should get on Arista EOS: pe2#show ip bgp sum BGP summary information for VRF default Router identifier 10.0.0.3, local AS number 65000 Neighbor Status Codes: m - Under maintenance Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 10.0.0.2 4 65000 20 20 0 0 00:00:08 Estab 2 2 pe2#show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.2/32 10.0.0.2 0 - 100 0 i * > 10.0.0.3/32 - - - - 0 i * > 172.16.42.0/24 10.0.0.2 0 - 100 0 65100 i Retry the ping command. It should no longer complain that the network is unreachable, but could generate another interesting bit of information on devices that parse and display ICMP error reports. For example, Arista EOS reports that the CORE router (10.0.0.1) claims it cannot reach the destination: pe2#ping 172.16.42.42 source loop 0 PING 172.16.42.42 (172.16.42.42) from 10.0.0.3 : 72(100) bytes of data. From 10.0.0.1 icmp_seq=1 Destination Net Unreachable --- 172.16.42.42 ping statistics --- 5 packets transmitted, 0 received, +1 errors, 100% packet loss, time 30ms","title":"Propagate External BGP Routes to PE2"},{"location":"ibgp/2-transit/#fixing-the-core-routing","text":"Log into the router complaining it cannot reach the destination (the CORE router) and check its IP routing table. The route for 172.16.42.0/24 is missing. core#show ip route | begin Gateway Gateway of last resort is not set C 10.0.0.1/32 is directly connected, Loopback0 O 10.0.0.2/32 [110/10] via 10.1.0.2, Ethernet1 O 10.0.0.3/32 is directly connected, Ethernet3 C 10.1.0.0/30 is directly connected, Ethernet1 That shouldn\u2019t be a big surprise; after all, the external prefix is advertised only in BGP, and CORE router runs only OSPF. There are at least four ways to fix the routing in the core of your autonomous system: Redistribute EBGP information into OSPF. That\u2019s dangerous in real-life networks with large BGP tables and thus you are not allowed to do it in this lab exercise. Advertise an OSPF default route from PE1. That would solve your immediate problem but wouldn\u2019t result in a true transit network \u2013 you would run into interesting challenges when trying to connect external networks to PE2. This option is thus also off the table. Hide the transit packets from the CORE router using MPLS or IP-over-something tunnels. While the MPLS approach is commonly used to build BGP-free core networks , it\u2019s too complex for this lab exercise 4 . Make CORE router part of the BGP routing. This is the approach we\u2019ll use. Configuration tasks: Configure BGP with AS number 65000 on the CORE router Configure IBGP sessions between all BGP routers in AS 65000. Tip Due to the IBGP loop avoidance mechanism (never advertise IBGP routes to other IBGP neighbors) you have to configure a full mesh of IBGP sessions, adding PE1-CORE and PE2-CORE IBGP sessions. Your lab might work without the PE2-CORE IBGP session, but would probably stop working the moment you connect an EBGP neighbor to PE2 5 . The IBGP session between PE1 and CORE routers is preconfigured on PE1 and should be established as soon as you configure it on CORE router. You\u2019ll have to configure the PE2-CORE IBGP session on both ends. Verification: Check the BGP neighbors and the BGP table on the CORE router. The router should have two established IBGP sessions and three prefixes in its BGP table: core#show ip bgp sum BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 10.0.0.2 4 65000 14 14 0 0 00:00:10 Estab 2 2 10.0.0.3 4 65000 10 9 0 0 00:00:08 Estab 1 1 core#show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.2/32 10.0.0.2 0 - 100 0 i * > 10.0.0.3/32 10.0.0.3 0 - 100 0 i * > 172.16.42.0/24 10.0.0.2 0 - 100 0 65100 i Retry the ping command on PE2. PE2 should be able to reach the EXT router: pe2#ping 172.16.42.42 source loop 0 PING 172.16.42.42 (172.16.42.42) from 10.0.0.3 : 72(100) bytes of data. 80 bytes from 172.16.42.42: icmp_seq=1 ttl=62 time=0.086 ms 80 bytes from 172.16.42.42: icmp_seq=2 ttl=62 time=0.007 ms 80 bytes from 172.16.42.42: icmp_seq=3 ttl=62 time=0.008 ms 80 bytes from 172.16.42.42: icmp_seq=4 ttl=62 time=0.006 ms 80 bytes from 172.16.42.42: icmp_seq=5 ttl=62 time=0.007 ms --- 172.16.42.42 ping statistics --- 5 packets transmitted, 5 received, 0% packet loss, time 0ms rtt min/avg/max/mdev = 0.006/0.022/0.086/0.032 ms, ipg/ewma 0.032/0.053 ms","title":"Fixing the Core Routing"},{"location":"ibgp/2-transit/#reference-information","text":"You might find the following information useful if you\u2019re not using netlab to build the lab:","title":"Reference Information"},{"location":"ibgp/2-transit/#lab-wiring","text":"This lab uses the 4-router lab topology with the following mapping between the routers in the 4-router lab topology and this lab: 4-router-topology device Lab device C1 Core C2 PE2 X1 PE1 X2 EXT Link Name Origin Device Origin Port Destination Device Destination Port core Ethernet1 pe1 swp1 Unused link core Ethernet2 ext swp1 Inter-AS link pe1 swp2 ext swp2 Unused link pe2 Ethernet1 pe1 swp3 Unused link pe2 Ethernet2 ext swp3 core Ethernet3 pe2 Ethernet3 Note : Some interfaces are not used to conform with the predefined 4-router lab topology.","title":"Lab Wiring"},{"location":"ibgp/2-transit/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description core 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 core -> pe1 Ethernet2 Unused link Ethernet3 True core -> pe2 ext 172.16.42.42/24 Loopback swp1 Unused link swp2 10.1.0.5/30 Inter-AS link swp3 Unused link pe1 10.0.0.2/32 Loopback swp1 10.1.0.2/30 pe1 -> core swp2 10.1.0.6/30 Inter-AS link swp3 Unused link pe2 10.0.0.3/32 Loopback Ethernet1 Unused link Ethernet2 Unused link Ethernet3 True pe2 -> core Note : Some interfaces are not configured with IP addresses to conform with the predefined 4-router lab topology. If it doesn\u2019t you have a more interesting problem to troubleshoot \u2013 why does it work? \u21a9 Most show printouts in this lab exercise use the | begin Something pipe to skip the (mostly irrelevant) header information. \u21a9 Don\u2019t forget to activate the IBGP session within the IPv4 address family (AF) if your device requires per-AF neighbor activation. \u21a9 \u2026 but as you have a running lab that\u2019s easy to restart, please feel free to try to get it to work. You get bonus points if you decide to use Segment Routing and a virtual 6-pack of Kool-Aid if you use SRv6 ;) \u21a9 Proving that is left as an exercise for the reader \u21a9","title":"Lab Addressing"},{"location":"policy/","text":"BGP Routing Policies These lab exercises will help you master the essential tools you can use in BGP routing policies. You will also be able to practice creating more complex routing policies. The labs are grouped into three sections: Filtering BGP updates Adjusting outgoing traffic flow Influencing incoming traffic flow Filtering BGP Updates The first thing you should do when you use BGP to connect to the public Internet is limit the information you advertise to your neighbors to the prefixes you own. These labs will help you get there: Prevent route leaking between upstream providers with an AS-path filter Filter prefixes advertised by your autonomous system with a prefix list Minimize the size of your BGP table with inbound filters Adjusting Outgoing (Egress) Traffic Flow It\u2019s relatively easy to change how traffic leaves your network (autonomous system) \u2013 you have to modify the BGP- and routing tables on your routers. These labs \u2013 ranging from simple one-router scenarios to complex network-wide policies \u2013 will help you master the BGP tools you can use to get the job done: Use BGP weights to prefer one of the upstream providers Implement a consistent AS-wide routing policy with BGP local preference. Once you master the basics, you\u2019ll be ready for more complex scenarios: Use the backup link to reach the adjacent autonomous system . This exercise combines AS-path filters, prefix lists, route maps, and BGP local preference. Influencing Incoming (Ingress) Traffic Flow Trying to persuade neighboring autonomous systems to change how they send you the traffic is much more complicated than changing the routing in your network. While there\u2019s no definitive one-size-fits-all solution, you will find these tools indispensable: Use MED to Influence Incoming Traffic Flow Use AS-Path Prepending to Influence Incoming Traffic Flow","title":"Overview"},{"location":"policy/#bgp-routing-policies","text":"These lab exercises will help you master the essential tools you can use in BGP routing policies. You will also be able to practice creating more complex routing policies. The labs are grouped into three sections: Filtering BGP updates Adjusting outgoing traffic flow Influencing incoming traffic flow","title":"BGP Routing Policies"},{"location":"policy/#filter","text":"The first thing you should do when you use BGP to connect to the public Internet is limit the information you advertise to your neighbors to the prefixes you own. These labs will help you get there: Prevent route leaking between upstream providers with an AS-path filter Filter prefixes advertised by your autonomous system with a prefix list Minimize the size of your BGP table with inbound filters","title":"Filtering BGP Updates"},{"location":"policy/#egress","text":"It\u2019s relatively easy to change how traffic leaves your network (autonomous system) \u2013 you have to modify the BGP- and routing tables on your routers. These labs \u2013 ranging from simple one-router scenarios to complex network-wide policies \u2013 will help you master the BGP tools you can use to get the job done: Use BGP weights to prefer one of the upstream providers Implement a consistent AS-wide routing policy with BGP local preference. Once you master the basics, you\u2019ll be ready for more complex scenarios: Use the backup link to reach the adjacent autonomous system . This exercise combines AS-path filters, prefix lists, route maps, and BGP local preference.","title":"Adjusting Outgoing (Egress) Traffic Flow"},{"location":"policy/#ingress","text":"Trying to persuade neighboring autonomous systems to change how they send you the traffic is much more complicated than changing the routing in your network. While there\u2019s no definitive one-size-fits-all solution, you will find these tools indispensable: Use MED to Influence Incoming Traffic Flow Use AS-Path Prepending to Influence Incoming Traffic Flow","title":"Influencing Incoming (Ingress) Traffic Flow"},{"location":"policy/1-weights/","text":"Select Preferred EBGP Peer with Weights In the previous lab exercises, you configured EBGP sessions with two routers belonging to upstream ISPs and advertised your IPv4 prefixes to them . Now, imagine that you want to use one of the uplinks just for backup purposes \u2013 it might be either too slow or too expensive for regular use. In this lab, you\u2019ll modify your BGP configuration to ensure your router always prefers routes advertised by X1 (ISP-1). Existing BGP Configuration The routers in your lab use the following BGP AS numbers. Each autonomous system advertises an IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 192.168.42.0/24 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to manually configure EBGP neighbors and advertised prefixes. Neighbor Neighbor IPv4 Neighbor AS x1 10.1.0.2 65100 x2 10.1.0.6 65101 Start the Lab Assuming you already set up your lab infrastructure : Change directory to policy/1-weights Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you\u2019re not using netlab , continue with the configuration you made during the previous exercise . Configuration Tasks You want your device to prefer routes advertised by X1 over those by X2. For example, the route for X2\u2019s loopback interface should use X1 as the next hop. Many BGP implementations use a mechanism called weight (usually applied per neighbor) to prefer routes advertised by one of the BGP peers. If your device supports BGP weights , use them to prefer routes advertised by X1. Otherwise, you\u2019ll have to use BGP local preference to achieve the same result. Warning Applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change the BGP table as the new parameters might be evaluated only on new incoming updates \u2013 you might have to use a command similar to clear ip bgp * soft in to tell your router to ask its neighbors to resend their BGP updates. Verification Examine the BGP table on your router to verify that the routes advertised by X1 (next hop: 10.1.0.2) are the best (active) routes. This is a printout you should get on Arista EOS: rtr#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 200 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 100 65101 i * > 192.168.42.0/24 - - - - 0 ? * > 192.168.100.0/24 10.1.0.2 0 - 100 200 65100 i * 192.168.100.0/24 10.1.0.6 0 - 100 100 65101 65100 i * > 192.168.101.0/24 10.1.0.2 0 - 100 200 65100 65101 i * 192.168.101.0/24 10.1.0.6 0 - 100 100 65101 i You could dig deeper and examine the details of an IPv4 prefix that originated in AS 65101 (X2), for example, 10.0.0.11. Yet again, the next hop of the best path should be X1 (10.1.0.2) rtr#show ip bgp 192.168.101.0/24 BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 BGP routing table entry for 192.168.101.0/24 Paths: 2 available 65100 65101 10.1.0.2 from 10.1.0.2 (10.0.0.10) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 200, tag 0 Received 00:00:46 ago, valid, external, best Rx SAFI: Unicast 65101 10.1.0.6 from 10.1.0.6 (10.0.0.11) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 100, tag 0 Received 00:00:46 ago, valid, external Rx SAFI: Unicast Next : If you still need to learn how to use AS-path filters to stop advertising transit routes , do it now. If you\u2019re more interested in building more extensive BGP-based networks , use BGP local preference to implement a consistent AS-wide routing policy. Reference Information The following information might help you if you\u2019re not using netlab to build the lab: Lab Wiring This lab uses a subset of the 4-router lab topology : Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 192.168.101.1/24 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1","title":"Select Preferred EBGP Peer with Weights"},{"location":"policy/1-weights/#select-preferred-ebgp-peer-with-weights","text":"In the previous lab exercises, you configured EBGP sessions with two routers belonging to upstream ISPs and advertised your IPv4 prefixes to them . Now, imagine that you want to use one of the uplinks just for backup purposes \u2013 it might be either too slow or too expensive for regular use. In this lab, you\u2019ll modify your BGP configuration to ensure your router always prefers routes advertised by X1 (ISP-1).","title":"Select Preferred EBGP Peer with Weights"},{"location":"policy/1-weights/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. Each autonomous system advertises an IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 192.168.42.0/24 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to manually configure EBGP neighbors and advertised prefixes. Neighbor Neighbor IPv4 Neighbor AS x1 10.1.0.2 65100 x2 10.1.0.6 65101","title":"Existing BGP Configuration"},{"location":"policy/1-weights/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to policy/1-weights Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you\u2019re not using netlab , continue with the configuration you made during the previous exercise .","title":"Start the Lab"},{"location":"policy/1-weights/#configuration-tasks","text":"You want your device to prefer routes advertised by X1 over those by X2. For example, the route for X2\u2019s loopback interface should use X1 as the next hop. Many BGP implementations use a mechanism called weight (usually applied per neighbor) to prefer routes advertised by one of the BGP peers. If your device supports BGP weights , use them to prefer routes advertised by X1. Otherwise, you\u2019ll have to use BGP local preference to achieve the same result. Warning Applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change the BGP table as the new parameters might be evaluated only on new incoming updates \u2013 you might have to use a command similar to clear ip bgp * soft in to tell your router to ask its neighbors to resend their BGP updates.","title":"Configuration Tasks"},{"location":"policy/1-weights/#verification","text":"Examine the BGP table on your router to verify that the routes advertised by X1 (next hop: 10.1.0.2) are the best (active) routes. This is a printout you should get on Arista EOS: rtr#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 200 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 100 65101 i * > 192.168.42.0/24 - - - - 0 ? * > 192.168.100.0/24 10.1.0.2 0 - 100 200 65100 i * 192.168.100.0/24 10.1.0.6 0 - 100 100 65101 65100 i * > 192.168.101.0/24 10.1.0.2 0 - 100 200 65100 65101 i * 192.168.101.0/24 10.1.0.6 0 - 100 100 65101 i You could dig deeper and examine the details of an IPv4 prefix that originated in AS 65101 (X2), for example, 10.0.0.11. Yet again, the next hop of the best path should be X1 (10.1.0.2) rtr#show ip bgp 192.168.101.0/24 BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 BGP routing table entry for 192.168.101.0/24 Paths: 2 available 65100 65101 10.1.0.2 from 10.1.0.2 (10.0.0.10) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 200, tag 0 Received 00:00:46 ago, valid, external, best Rx SAFI: Unicast 65101 10.1.0.6 from 10.1.0.6 (10.0.0.11) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 100, tag 0 Received 00:00:46 ago, valid, external Rx SAFI: Unicast Next : If you still need to learn how to use AS-path filters to stop advertising transit routes , do it now. If you\u2019re more interested in building more extensive BGP-based networks , use BGP local preference to implement a consistent AS-wide routing policy.","title":"Verification"},{"location":"policy/1-weights/#reference-information","text":"The following information might help you if you\u2019re not using netlab to build the lab:","title":"Reference Information"},{"location":"policy/1-weights/#lab-wiring","text":"This lab uses a subset of the 4-router lab topology : Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2","title":"Lab Wiring"},{"location":"policy/1-weights/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 192.168.101.1/24 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1","title":"Lab Addressing"},{"location":"policy/2-stop-transit/","text":"Filter Transit Routes In the previous lab exercises you configured EBGP sessions with two routers belonging to upstream ISPs. With no additional configuration, BGP routers propagate every route known to them to all neighbors, which means that your device propagates routes between AS 65100 and AS 65101 1 . That wouldn\u2019t be so bad if the ISP-2 wouldn\u2019t prefer customer routes over peer routes. Well, it does, and you became a transit network between ISP-2 and ISP-1. You don\u2019t have to trust me. After starting the lab, log into X2. Execute sudo vtysh -c 'show ip bgp' command 2 if you\u2019re running Cumulus Linux, or an equivalent command if you\u2019re using some other device as the external router. You\u2019ll see that the best paths to AS 65100 (ISP-1) use next hop 10.1.0.5 and go through AS 65000 (your network). $ netlab connect x2 sudo vtysh -c 'show ip bgp' Connecting to container clab-no_transit-x2, executing sudo vtysh -c \"show ip bgp\" Use vtysh to connect to FRR daemon BGP table version is 9, local router ID is 10.0.0.11, vrf id 0 Default local pref 100, local AS 65101 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 0.0.0.0/0 10.1.0.5 200 0 65000 65100 i * 192.168.42.0/24 10.1.0.9 0 65100 65000 ? *> 10.1.0.5 200 0 65000 ? * 192.168.100.0/24 10.1.0.9 0 0 65100 i *> 10.1.0.5 200 0 65000 65100 i *> 192.168.101.0/24 0.0.0.0 0 32768 i Displayed 4 routes and 6 total paths Tip Did you notice that the Internet Service Provider (X2) accepted the default route from its customer? That\u2019s a serious security breach and should never happen in a real-life network, but I wouldn\u2019t be too sure about that\u2026 Existing BGP Configuration The routers in your lab use the following BGP AS numbers. Each autonomous system advertises an IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 192.168.42.0/24 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. You can also use the configuration you made in the previous exercise . Neighbor Neighbor IPv4 Neighbor AS x1 10.1.0.2 65100 x2 10.1.0.6 65101 Start the Lab Assuming you already set up your lab infrastructure : Change directory to policy/2-stop-transit Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you\u2019re not using netlab just continue with the configuration you made during the previous exercise . Configuration Tasks You must filter BGP prefixes sent to X1 and X2, and advertise only prefixes with an empty AS path \u2013 the prefixes originating in your autonomous system 3 . On some BGP implementations (for example: Cisco IOS and IOS XE, Cumulus Linux, FRR), you configure outbound AS-path filters in two steps: Configure an AS-path access list that matches an empty AS path 4 . Apply the AS-path access list as an outbound filter to all EBGP neighbors. Some other implementations (for example: Arista EOS) might require a more convoluted approach using a route map as an intermediate step: After configuring the AS-path access list, create a route map that permits BGP prefixes matching your AS-path access list. Apply that route map as an outbound filter to all EBGP neighbors. Warning Applying filters to BGP neighbors doesn\u2019t necessarily trigger new updates \u2013 you might have to use a command similar to clear ip bgp * soft out to tell your router to recalculate and resend BGP prefixes from its BGP table to its neighbors. Verification Examine the BGP table on X1 and X2 to verify that your router advertises only routes from AS 65000. This is the printout you should get on X2: $ netlab connect x2 sudo vtysh -c 'show ip bgp' Connecting to container clab-no_transit-x2, executing sudo vtysh -c \"show ip bgp\" Use vtysh to connect to FRR daemon BGP table version is 11, local router ID is 10.0.0.11, vrf id 0 Default local pref 100, local AS 65101 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path * 192.168.42.0/24 10.1.0.9 0 65100 65000 ? *> 10.1.0.5 200 0 65000 ? *> 192.168.100.0/24 10.1.0.9 0 0 65100 i *> 192.168.101.0/24 0.0.0.0 0 32768 i Displayed 3 routes and 4 total paths Next : Filter prefixes advertised to EBGP neighbors Reference Information The following information might help you if you\u2019re not using netlab to build the lab: Lab Wiring This lab uses a subset of the 4-router lab topology : Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 192.168.101.1/24 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1 Devices strictly compliant with RFC 8212 are an exception \u2013 they won\u2019t advertise anything to their EBGP neighbors unless you configured an outbound filter. \u21a9 sudo to make sure you\u2019re an admin user, vtysh is the name of the FRR CLI shell, and the -c argument passes the following argument to vtysh so you don\u2019t have to type another line. You don\u2019t need sudo part of the command on Cumulus Linux and FRR running in containers. \u21a9 Please note that all BGP implementations I\u2019ve seen so far apply filters to the contents of the BGP table. Prefixes originated by your router have an empty AS path while they\u2019re in the BGP table of your router. \u21a9 I don\u2019t want you to waste too much time on regular expressions, so here\u2019s a hint: you can usually use ^$ to match an empty AS-path. \u21a9","title":"Filter Transit Routes"},{"location":"policy/2-stop-transit/#filter-transit-routes","text":"In the previous lab exercises you configured EBGP sessions with two routers belonging to upstream ISPs. With no additional configuration, BGP routers propagate every route known to them to all neighbors, which means that your device propagates routes between AS 65100 and AS 65101 1 . That wouldn\u2019t be so bad if the ISP-2 wouldn\u2019t prefer customer routes over peer routes. Well, it does, and you became a transit network between ISP-2 and ISP-1. You don\u2019t have to trust me. After starting the lab, log into X2. Execute sudo vtysh -c 'show ip bgp' command 2 if you\u2019re running Cumulus Linux, or an equivalent command if you\u2019re using some other device as the external router. You\u2019ll see that the best paths to AS 65100 (ISP-1) use next hop 10.1.0.5 and go through AS 65000 (your network). $ netlab connect x2 sudo vtysh -c 'show ip bgp' Connecting to container clab-no_transit-x2, executing sudo vtysh -c \"show ip bgp\" Use vtysh to connect to FRR daemon BGP table version is 9, local router ID is 10.0.0.11, vrf id 0 Default local pref 100, local AS 65101 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 0.0.0.0/0 10.1.0.5 200 0 65000 65100 i * 192.168.42.0/24 10.1.0.9 0 65100 65000 ? *> 10.1.0.5 200 0 65000 ? * 192.168.100.0/24 10.1.0.9 0 0 65100 i *> 10.1.0.5 200 0 65000 65100 i *> 192.168.101.0/24 0.0.0.0 0 32768 i Displayed 4 routes and 6 total paths Tip Did you notice that the Internet Service Provider (X2) accepted the default route from its customer? That\u2019s a serious security breach and should never happen in a real-life network, but I wouldn\u2019t be too sure about that\u2026","title":"Filter Transit Routes"},{"location":"policy/2-stop-transit/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. Each autonomous system advertises an IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 192.168.42.0/24 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. You can also use the configuration you made in the previous exercise . Neighbor Neighbor IPv4 Neighbor AS x1 10.1.0.2 65100 x2 10.1.0.6 65101","title":"Existing BGP Configuration"},{"location":"policy/2-stop-transit/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to policy/2-stop-transit Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you\u2019re not using netlab just continue with the configuration you made during the previous exercise .","title":"Start the Lab"},{"location":"policy/2-stop-transit/#configuration-tasks","text":"You must filter BGP prefixes sent to X1 and X2, and advertise only prefixes with an empty AS path \u2013 the prefixes originating in your autonomous system 3 . On some BGP implementations (for example: Cisco IOS and IOS XE, Cumulus Linux, FRR), you configure outbound AS-path filters in two steps: Configure an AS-path access list that matches an empty AS path 4 . Apply the AS-path access list as an outbound filter to all EBGP neighbors. Some other implementations (for example: Arista EOS) might require a more convoluted approach using a route map as an intermediate step: After configuring the AS-path access list, create a route map that permits BGP prefixes matching your AS-path access list. Apply that route map as an outbound filter to all EBGP neighbors. Warning Applying filters to BGP neighbors doesn\u2019t necessarily trigger new updates \u2013 you might have to use a command similar to clear ip bgp * soft out to tell your router to recalculate and resend BGP prefixes from its BGP table to its neighbors.","title":"Configuration Tasks"},{"location":"policy/2-stop-transit/#verification","text":"Examine the BGP table on X1 and X2 to verify that your router advertises only routes from AS 65000. This is the printout you should get on X2: $ netlab connect x2 sudo vtysh -c 'show ip bgp' Connecting to container clab-no_transit-x2, executing sudo vtysh -c \"show ip bgp\" Use vtysh to connect to FRR daemon BGP table version is 11, local router ID is 10.0.0.11, vrf id 0 Default local pref 100, local AS 65101 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path * 192.168.42.0/24 10.1.0.9 0 65100 65000 ? *> 10.1.0.5 200 0 65000 ? *> 192.168.100.0/24 10.1.0.9 0 0 65100 i *> 192.168.101.0/24 0.0.0.0 0 32768 i Displayed 3 routes and 4 total paths Next : Filter prefixes advertised to EBGP neighbors","title":"Verification"},{"location":"policy/2-stop-transit/#reference-information","text":"The following information might help you if you\u2019re not using netlab to build the lab:","title":"Reference Information"},{"location":"policy/2-stop-transit/#lab-wiring","text":"This lab uses a subset of the 4-router lab topology : Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2","title":"Lab Wiring"},{"location":"policy/2-stop-transit/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 192.168.101.1/24 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1 Devices strictly compliant with RFC 8212 are an exception \u2013 they won\u2019t advertise anything to their EBGP neighbors unless you configured an outbound filter. \u21a9 sudo to make sure you\u2019re an admin user, vtysh is the name of the FRR CLI shell, and the -c argument passes the following argument to vtysh so you don\u2019t have to type another line. You don\u2019t need sudo part of the command on Cumulus Linux and FRR running in containers. \u21a9 Please note that all BGP implementations I\u2019ve seen so far apply filters to the contents of the BGP table. Prefixes originated by your router have an empty AS path while they\u2019re in the BGP table of your router. \u21a9 I don\u2019t want you to waste too much time on regular expressions, so here\u2019s a hint: you can usually use ^$ to match an empty AS-path. \u21a9","title":"Lab Addressing"},{"location":"policy/3-prefix/","text":"Filter Advertised Prefixes In the previous lab exercise you filtered prefixes advertised by your router based on the AS-path contents . That\u2019s the absolute minimum you should do, but it\u2019s not always enough \u2013 every other blue moon a network operator manages to mess up two-way redistribution, and advertises hundreds of thousands of prefixes as belonging to their autonomous system. You should therefore filter the prefixes advertised to EBGP neighbors to ensure you advertise only the address space assigned to you. In our simple lab topology your device advertises a /24 prefix (that we\u2019ll assume is assigned to you) and a loopback (/32) prefix that should not be visible elsewhere. You don\u2019t have to trust me \u2013 after starting the lab, log into X1 and execute sudo vtysh -c 'show ip bgp regexp 65000$' command 1 . You\u2019ll see that your autonomous system advertises two prefixes; this is what I got in my lab: x1(bash)#sudo vtysh -c 'show ip bgp regexp 65000$' BGP table version is 6, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path * 10.0.0.1/32 10.1.0.10 0 65101 65000 i *> 10.1.0.1 0 65000 i * 192.168.42.0/24 10.1.0.10 0 65101 65000 ? *> 10.1.0.1 0 65000 ? You could also use a command similar to show ip bgp show ip bgp neighbors neighbor-ip advertised-routes if it\u2019s available on your device to check what you\u2019re advertising to an individual neighbor. Existing BGP Configuration The routers in your lab use the following BGP AS numbers. Each autonomous system advertises one loopback address and another IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 192.168.42.0/24 10.0.0.1/32 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. Neighbor Neighbor IPv4 Neighbor AS x1 10.1.0.2 65100 x2 10.1.0.6 65101 Start the Lab Assuming you already set up your lab infrastructure : Change directory to policy/3-prefix Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you\u2019re not using netlab just continue with the configuration you made during the previous exercise . Configuration Tasks You have to filter BGP prefixes sent to X1 and X2, and advertise only the 192.168.101.0/24 prefix. Most BGP implementations support prefix lists that can match IP prefixes and subnet masks; you should match both to ensure you\u2019re not advertising more-specific prefixes to your EBGP neighbors. On some BGP implementations (example: Cisco IOS and IOS XE, Cumulus Linux, FRR, Arista EOS) you can apply a prefix list as an inbound or outbound filter on a BGP neighbor. Some other implementations (example: Arista EOS) might require a more convoluted approach using a route map as an intermediate step: After configuring the prefix list , create a route map that permits BGP prefixes matching your prefix list . Apply that route map as an outbound filter to all EBGP neighbors. Warning Applying filters to BGP neighbors doesn\u2019t necessarily trigger new updates \u2013 you might have to use a command similar to clear ip bgp * soft out to tell your router to recalculate and resend BGP prefixes from its BGP table to its neighbors. Verification Examine the BGP table on X1 and X2 to verify that your router advertises only a single IPv4 prefix. This is the printout you should get on X1: $ sudo vtysh -c 'show ip bgp neighbor 10.1.0.1 routes' BGP table version is 8, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 192.168.42.0/24 10.1.0.1 0 65000 ? You can also check routes advertised to a neighbor on your device if it supports a command similar to show ip bgp show ip bgp neighbors neighbor-ip advertised-routes . This is how the printout looks on Arista EOS: rtr>show ip bgp neighbors 10.1.0.2 advertised-routes BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast, q - Queued for advertisement % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 192.168.42.0/24 10.1.0.1 - - - - 65000 ? Next : Reduce the size of your BGP table with inbound filters Reference Information You might find the following information useful if you\u2019re not using netlab to build the lab: Lab Wiring This lab uses a subset of the 4-router lab topology : Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 192.168.101.1/24 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1 sudo to make sure you\u2019re an admin user, vtysh is the name of the FRR CLI shell, and the -c argument passes the following argument to vtysh so you don\u2019t have to type another line. The regexp part of the show command tells the device to display BGP entries where the AS path matches the regular expression and 65000$ matches all AS paths ending with 65000 (= originating in your network). \u21a9","title":"Filter Advertised Prefixes"},{"location":"policy/3-prefix/#filter-advertised-prefixes","text":"In the previous lab exercise you filtered prefixes advertised by your router based on the AS-path contents . That\u2019s the absolute minimum you should do, but it\u2019s not always enough \u2013 every other blue moon a network operator manages to mess up two-way redistribution, and advertises hundreds of thousands of prefixes as belonging to their autonomous system. You should therefore filter the prefixes advertised to EBGP neighbors to ensure you advertise only the address space assigned to you. In our simple lab topology your device advertises a /24 prefix (that we\u2019ll assume is assigned to you) and a loopback (/32) prefix that should not be visible elsewhere. You don\u2019t have to trust me \u2013 after starting the lab, log into X1 and execute sudo vtysh -c 'show ip bgp regexp 65000$' command 1 . You\u2019ll see that your autonomous system advertises two prefixes; this is what I got in my lab: x1(bash)#sudo vtysh -c 'show ip bgp regexp 65000$' BGP table version is 6, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path * 10.0.0.1/32 10.1.0.10 0 65101 65000 i *> 10.1.0.1 0 65000 i * 192.168.42.0/24 10.1.0.10 0 65101 65000 ? *> 10.1.0.1 0 65000 ? You could also use a command similar to show ip bgp show ip bgp neighbors neighbor-ip advertised-routes if it\u2019s available on your device to check what you\u2019re advertising to an individual neighbor.","title":"Filter Advertised Prefixes"},{"location":"policy/3-prefix/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. Each autonomous system advertises one loopback address and another IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 192.168.42.0/24 10.0.0.1/32 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. Neighbor Neighbor IPv4 Neighbor AS x1 10.1.0.2 65100 x2 10.1.0.6 65101","title":"Existing BGP Configuration"},{"location":"policy/3-prefix/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to policy/3-prefix Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you\u2019re not using netlab just continue with the configuration you made during the previous exercise .","title":"Start the Lab"},{"location":"policy/3-prefix/#configuration-tasks","text":"You have to filter BGP prefixes sent to X1 and X2, and advertise only the 192.168.101.0/24 prefix. Most BGP implementations support prefix lists that can match IP prefixes and subnet masks; you should match both to ensure you\u2019re not advertising more-specific prefixes to your EBGP neighbors. On some BGP implementations (example: Cisco IOS and IOS XE, Cumulus Linux, FRR, Arista EOS) you can apply a prefix list as an inbound or outbound filter on a BGP neighbor. Some other implementations (example: Arista EOS) might require a more convoluted approach using a route map as an intermediate step: After configuring the prefix list , create a route map that permits BGP prefixes matching your prefix list . Apply that route map as an outbound filter to all EBGP neighbors. Warning Applying filters to BGP neighbors doesn\u2019t necessarily trigger new updates \u2013 you might have to use a command similar to clear ip bgp * soft out to tell your router to recalculate and resend BGP prefixes from its BGP table to its neighbors.","title":"Configuration Tasks"},{"location":"policy/3-prefix/#verification","text":"Examine the BGP table on X1 and X2 to verify that your router advertises only a single IPv4 prefix. This is the printout you should get on X1: $ sudo vtysh -c 'show ip bgp neighbor 10.1.0.1 routes' BGP table version is 8, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 192.168.42.0/24 10.1.0.1 0 65000 ? You can also check routes advertised to a neighbor on your device if it supports a command similar to show ip bgp show ip bgp neighbors neighbor-ip advertised-routes . This is how the printout looks on Arista EOS: rtr>show ip bgp neighbors 10.1.0.2 advertised-routes BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast, q - Queued for advertisement % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 192.168.42.0/24 10.1.0.1 - - - - 65000 ? Next : Reduce the size of your BGP table with inbound filters","title":"Verification"},{"location":"policy/3-prefix/#reference-information","text":"You might find the following information useful if you\u2019re not using netlab to build the lab:","title":"Reference Information"},{"location":"policy/3-prefix/#lab-wiring","text":"This lab uses a subset of the 4-router lab topology : Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2","title":"Lab Wiring"},{"location":"policy/3-prefix/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 192.168.101.1/24 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1 sudo to make sure you\u2019re an admin user, vtysh is the name of the FRR CLI shell, and the -c argument passes the following argument to vtysh so you don\u2019t have to type another line. The regexp part of the show command tells the device to display BGP entries where the AS path matches the regular expression and 65000$ matches all AS paths ending with 65000 (= originating in your network). \u21a9","title":"Lab Addressing"},{"location":"policy/4-reduce/","text":"Minimize the Size of Your BGP Table In the previous lab exercises, you established EBGP sessions with two upstream Service Providers, accepted all routes they were willing to send you , and let your router do its magic selecting the best BGP routes. That might not be a good idea if you bought cost-optimized hardware that can do packet forwarding at ludicrous speeds but only for a few tens of thousands of routes while your neighbors send you the full Internet BGP table (over 930.000 routes in August 2023). In this lab exercise, you\u2019ll use inbound filters to reduce the information inserted in your device\u2019s BGP table (and, subsequently, the routing table). Your link to ISP-1 is much faster than the link to ISP-2, so you must use ISP-1 for most outbound traffic. As X1 advertises a default route to you, you don\u2019t have to accept any other routing information from it. It would be a shame to let the link to ISP-2 remain idle while the link to ISP-1 is operational. Let\u2019s send the traffic for AS 65101 directly over the link to X2 \u2013 that means you have to accept prefixes originating in AS 65101 from X2. Finally, you\u2019ll need a default route even if the link to ISP-1 goes down. You should also accept the default route from ISP-2 but make it less preferred than the one received from ISP-1. Existing BGP Configuration The routers in your lab use the following BGP AS numbers. Each autonomous system advertises one loopback address and another IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 10.0.0.1/32 192.168.42.0/24 AS65100 x1 10.0.0.10 10.0.0.10/32 192.168.100.0/24 AS65101 x2 10.0.0.11 10.0.0.11/32 192.168.101.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to manually configure EBGP neighbors and advertised prefixes. Neighbor Neighbor IPv4 Neighbor AS x1 10.1.0.2 65100 x2 10.1.0.6 65101 Start the Lab Assuming you already set up your lab infrastructure : Change directory to policy/4-reduce Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you\u2019re not using netlab , continue with the configuration you made during the previous exercise . Configuration Tasks Configure a prefix list that will accept only the default route and apply it as an inbound filter on the EBGP session with X1. You did something similar in the Filter Advertised Prefixes exercise, so you should know the process. The inbound filter for X2 is a bit more complex: you have to accept a prefix if it originates in AS 65101 or is the default route. You already implemented prefix filters and AS-path based filters ; now you have to combine them. Implementing such a condition often requires a more complex routing policy; many BGP implementations call it a route map . Hint : You\u2019ll have to get fluent with regular expressions to master BGP routing policies, but let\u2019s do things one step at a time \u2013 the regular expression 65101$ matches prefixes originating in AS 65101. Finally, you must make routes received from X1 preferred over routes received from X2. If you don\u2019t know how to do it, first do the Select Preferred EBGP Peer with Weights exercise. Warning Applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change the BGP table as the new parameters might be evaluated only on new incoming updates \u2013 you might have to use a command similar to clear ip bgp * soft in to tell your router to ask its neighbors to resend their BGP updates. Verification Examine the BGP table on your device. It should contain: IP prefixes your device is originating; Two IP prefixes originated by X2 Two paths for the default route; the path advertised by X1 should be the best. If you\u2019re using Arista EOS, you should get this printout: rtr#sh ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 200 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 100 65101 i * > 10.0.0.1/32 - - - - 0 i * > 10.0.0.11/32 10.1.0.6 0 - 100 100 65101 i * > 192.168.42.0/24 - - - - 0 ? * > 192.168.101.0/24 10.1.0.6 0 - 100 100 65101 i Next : Use BGP local preference to implement a consistent AS-wide routing policy. Reference Information The following information might help you if you\u2019re not using netlab to build the lab: Lab Wiring This lab uses a subset of the 4-router lab topology : Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1","title":"Minimize the Size of Your BGP Table"},{"location":"policy/4-reduce/#minimize-the-size-of-your-bgp-table","text":"In the previous lab exercises, you established EBGP sessions with two upstream Service Providers, accepted all routes they were willing to send you , and let your router do its magic selecting the best BGP routes. That might not be a good idea if you bought cost-optimized hardware that can do packet forwarding at ludicrous speeds but only for a few tens of thousands of routes while your neighbors send you the full Internet BGP table (over 930.000 routes in August 2023). In this lab exercise, you\u2019ll use inbound filters to reduce the information inserted in your device\u2019s BGP table (and, subsequently, the routing table). Your link to ISP-1 is much faster than the link to ISP-2, so you must use ISP-1 for most outbound traffic. As X1 advertises a default route to you, you don\u2019t have to accept any other routing information from it. It would be a shame to let the link to ISP-2 remain idle while the link to ISP-1 is operational. Let\u2019s send the traffic for AS 65101 directly over the link to X2 \u2013 that means you have to accept prefixes originating in AS 65101 from X2. Finally, you\u2019ll need a default route even if the link to ISP-1 goes down. You should also accept the default route from ISP-2 but make it less preferred than the one received from ISP-1.","title":"Minimize the Size of Your BGP Table"},{"location":"policy/4-reduce/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. Each autonomous system advertises one loopback address and another IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 10.0.0.1/32 192.168.42.0/24 AS65100 x1 10.0.0.10 10.0.0.10/32 192.168.100.0/24 AS65101 x2 10.0.0.11 10.0.0.11/32 192.168.101.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to manually configure EBGP neighbors and advertised prefixes. Neighbor Neighbor IPv4 Neighbor AS x1 10.1.0.2 65100 x2 10.1.0.6 65101","title":"Existing BGP Configuration"},{"location":"policy/4-reduce/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to policy/4-reduce Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you\u2019re not using netlab , continue with the configuration you made during the previous exercise .","title":"Start the Lab"},{"location":"policy/4-reduce/#configuration-tasks","text":"Configure a prefix list that will accept only the default route and apply it as an inbound filter on the EBGP session with X1. You did something similar in the Filter Advertised Prefixes exercise, so you should know the process. The inbound filter for X2 is a bit more complex: you have to accept a prefix if it originates in AS 65101 or is the default route. You already implemented prefix filters and AS-path based filters ; now you have to combine them. Implementing such a condition often requires a more complex routing policy; many BGP implementations call it a route map . Hint : You\u2019ll have to get fluent with regular expressions to master BGP routing policies, but let\u2019s do things one step at a time \u2013 the regular expression 65101$ matches prefixes originating in AS 65101. Finally, you must make routes received from X1 preferred over routes received from X2. If you don\u2019t know how to do it, first do the Select Preferred EBGP Peer with Weights exercise. Warning Applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change the BGP table as the new parameters might be evaluated only on new incoming updates \u2013 you might have to use a command similar to clear ip bgp * soft in to tell your router to ask its neighbors to resend their BGP updates.","title":"Configuration Tasks"},{"location":"policy/4-reduce/#verification","text":"Examine the BGP table on your device. It should contain: IP prefixes your device is originating; Two IP prefixes originated by X2 Two paths for the default route; the path advertised by X1 should be the best. If you\u2019re using Arista EOS, you should get this printout: rtr#sh ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 200 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 100 65101 i * > 10.0.0.1/32 - - - - 0 i * > 10.0.0.11/32 10.1.0.6 0 - 100 100 65101 i * > 192.168.42.0/24 - - - - 0 ? * > 192.168.101.0/24 10.1.0.6 0 - 100 100 65101 i Next : Use BGP local preference to implement a consistent AS-wide routing policy.","title":"Verification"},{"location":"policy/4-reduce/#reference-information","text":"The following information might help you if you\u2019re not using netlab to build the lab:","title":"Reference Information"},{"location":"policy/4-reduce/#lab-wiring","text":"This lab uses a subset of the 4-router lab topology : Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2","title":"Lab Wiring"},{"location":"policy/4-reduce/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1","title":"Lab Addressing"},{"location":"policy/5-local-preference/","text":"Select Preferred Uplink with BGP Local Preference In a previous lab exercise, you used BGP weights to prefer a high-speed uplink over a low-speed uplink . That worked well because you had both links attached to the same router. Now, imagine that you have a redundant design with two routers and want to prefer the C1-X1 link over the slower C2-X2 link. You could use BGP weights to get the job done, but as weights aren\u2019t a BGP attribute and thus aren\u2019t propagated between routers, you\u2019d have to apply them to all BGP sessions on C1 and C2. There\u2019s a better way: BGP has the local preference attribute that works like weights but gets propagated across IBGP sessions. In this lab, you\u2019ll use BGP local preference to ensure all BGP routers in your network prefer routes received over the C1-X1 link. Initial Router Configurations The routers in your lab use the following BGP AS numbers. Each autonomous system advertises an IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID Advertised prefixes AS65000 c1 10.0.0.1 192.168.42.0/24 c2 10.0.0.2 192.168.42.0/24 AS65100 x1 10.0.0.10 192.168.100.0/24 x2 10.0.0.11 192.168.100.0/24 Your routers have these BGP neighbors: Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 c1 10.0.0.1 65000 c2 65000 10.0.0.2 x1 65100 10.1.0.2 c2 10.0.0.2 65000 c1 65000 10.0.0.1 x2 65100 10.1.0.6 Your network is also running OSPF in the backbone area: Router Interface IPv4 Address Neighbor(s) c1 Loopback 10.0.0.1/32 Ethernet3 192.168.42.1/24 c2 c2 Loopback 10.0.0.2/32 Ethernet3 192.168.42.2/24 c1 Start the Lab Assuming you already set up your lab infrastructure : Change directory to policy/5-local-preference Execute netlab up ( other options ) Log into your devices (C1 and C2) with netlab connect and verify their configurations. Note: netlab will configure IP addressing, OSPF, BGP, IBGP sessions, EBGP sessions, and BGP prefix advertisements on your routers. You\u2019ll have to manually configure your routers if you\u2019re not using netlab . Using BGP Local Preference The Border Gateway Protocol 4 (BGP-4) RFC (RFC 4271) defines the LOCAL_PREF attribute and mandates that: All IBGP update messages contain the LOCAL_PREF attribute. A BGP speaker never uses the LOCAL_PREF attribute on EBGP updates. The LOCAL_PREF attribute influences the selection of BGP best paths (higher local preference is better). The RFC does not specify how a router sets the BGP local preference or how it influences the BGP best path selection. Most BGP implementations use these defaults to interoperate with older devices: The default value of the LOCAL_PREF attribute that a router adds to EBGP routes before advertising them over IBGP sessions is 100. LOCAL_PREF is considered very early in the BGP best path selection process (before AS path length). This behavior makes LOCAL_PREF an ideal attribute when implementing a consistent BGP path selection across a whole autonomous system. We\u2019ll use the above behavior to implement a straightforward routing policy: Set the default local preference on C1 to 200 (making it better than the built-in default value) Set the default local preference on C2 to 50 (making it worse than the built-in default). Some BGP implementations allow you to change the default local preference value with a configuration command similar to bgp default local-preference . If your implementation does not support changing the default LOCAL_PREF value, you\u2019ll have to use a routing policy (often called a route-map ) attached to a BGP neighbor to modify it. Tip If you\u2019re using a network device that cannot change the default LOCAL_PREF value (example: Arista EOS), then you\u2019re probably already familiar with route maps. You might have been using them in the Filter Transit Routes or Filter Advertised Prefixes exercises. Warning Applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change the BGP table, as the new routing policy might be evaluated only on new incoming updates. You might have to use a command similar to clear ip bgp * soft in to tell your router to ask its neighbors to resend their BGP updates. Verification Examine the BGP table on C2 to verify that the routes advertised by C1 (next hop: 10.0.0.1) have a higher local preference and are preferred over routes received from X1 (next hop: 10.1.0.6). This is a printout you should get on Arista EOS: c2#show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.0.0.1 0 - 200 0 65100 i * 0.0.0.0/0 10.1.0.6 0 - 50 0 65100 i * > 192.168.42.0/24 - - - - 0 i * 192.168.42.0/24 10.0.0.1 0 - 100 0 i * > 192.168.100.0/24 10.0.0.1 0 - 200 0 65100 i * 192.168.100.0/24 10.1.0.6 0 - 50 0 65100 i You could dig deeper and examine the details of an IPv4 prefix that originated in AS 65100, for example, 192.168.100.0/24 : c2#show ip bgp 192.168.100.0/24 BGP routing table information for VRF default Router identifier 10.0.0.2, local AS number 65000 BGP routing table entry for 192.168.100.0/24 Paths: 2 available 65100 10.0.0.1 from 10.0.0.1 (10.0.0.1) Origin IGP, metric 0, localpref 200, IGP metric 20, weight 0, tag 0 Received 00:03:44 ago, valid, internal, best Rx SAFI: Unicast 65100 10.1.0.6 from 10.1.0.6 (10.0.0.11) Origin IGP, metric 0, localpref 50, IGP metric 0, weight 0, tag 0 Received 00:33:52 ago, valid, external Rx SAFI: Unicast Next: Use MED to Influence Incoming Traffic Flow Using BGP Local Preference in a Complex Routing Policy Reference Information The following information might be helpful if you\u2019re not using netlab to build the lab: Lab Wiring This lab uses a subset of the 4-router lab topology . Some links are unused to retain the interface names from that topology. Link Name Origin Device Origin Port Destination Device Destination Port Primary uplink c1 Ethernet1 x1 swp1 Unused link c1 Ethernet2 x2 swp1 ISP internal link x1 swp2 x2 swp2 Unused link c2 Ethernet1 x1 swp3 Backup uplink c2 Ethernet2 x2 swp3 Customer internal link c1 Ethernet3 c2 Ethernet3 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 Primary uplink Ethernet2 Unused link Ethernet3 192.168.42.1/24 Customer internal link c2 10.0.0.2/32 Loopback Ethernet1 Unused link Ethernet2 10.1.0.5/30 Backup uplink Ethernet3 192.168.42.2/24 Customer internal link x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 Primary uplink swp2 192.168.100.10/24 ISP internal link swp3 Unused link x2 10.0.0.11/32 Loopback swp1 Unused link swp2 192.168.100.11/24 ISP internal link swp3 10.1.0.6/30 Backup uplink","title":"Select Preferred Uplink with BGP Local Preference"},{"location":"policy/5-local-preference/#select-preferred-uplink-with-bgp-local-preference","text":"In a previous lab exercise, you used BGP weights to prefer a high-speed uplink over a low-speed uplink . That worked well because you had both links attached to the same router. Now, imagine that you have a redundant design with two routers and want to prefer the C1-X1 link over the slower C2-X2 link. You could use BGP weights to get the job done, but as weights aren\u2019t a BGP attribute and thus aren\u2019t propagated between routers, you\u2019d have to apply them to all BGP sessions on C1 and C2. There\u2019s a better way: BGP has the local preference attribute that works like weights but gets propagated across IBGP sessions. In this lab, you\u2019ll use BGP local preference to ensure all BGP routers in your network prefer routes received over the C1-X1 link.","title":"Select Preferred Uplink with BGP Local Preference"},{"location":"policy/5-local-preference/#initial-router-configurations","text":"The routers in your lab use the following BGP AS numbers. Each autonomous system advertises an IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID Advertised prefixes AS65000 c1 10.0.0.1 192.168.42.0/24 c2 10.0.0.2 192.168.42.0/24 AS65100 x1 10.0.0.10 192.168.100.0/24 x2 10.0.0.11 192.168.100.0/24 Your routers have these BGP neighbors: Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 c1 10.0.0.1 65000 c2 65000 10.0.0.2 x1 65100 10.1.0.2 c2 10.0.0.2 65000 c1 65000 10.0.0.1 x2 65100 10.1.0.6 Your network is also running OSPF in the backbone area: Router Interface IPv4 Address Neighbor(s) c1 Loopback 10.0.0.1/32 Ethernet3 192.168.42.1/24 c2 c2 Loopback 10.0.0.2/32 Ethernet3 192.168.42.2/24 c1","title":"Initial Router Configurations"},{"location":"policy/5-local-preference/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to policy/5-local-preference Execute netlab up ( other options ) Log into your devices (C1 and C2) with netlab connect and verify their configurations. Note: netlab will configure IP addressing, OSPF, BGP, IBGP sessions, EBGP sessions, and BGP prefix advertisements on your routers. You\u2019ll have to manually configure your routers if you\u2019re not using netlab .","title":"Start the Lab"},{"location":"policy/5-local-preference/#using-bgp-local-preference","text":"The Border Gateway Protocol 4 (BGP-4) RFC (RFC 4271) defines the LOCAL_PREF attribute and mandates that: All IBGP update messages contain the LOCAL_PREF attribute. A BGP speaker never uses the LOCAL_PREF attribute on EBGP updates. The LOCAL_PREF attribute influences the selection of BGP best paths (higher local preference is better). The RFC does not specify how a router sets the BGP local preference or how it influences the BGP best path selection. Most BGP implementations use these defaults to interoperate with older devices: The default value of the LOCAL_PREF attribute that a router adds to EBGP routes before advertising them over IBGP sessions is 100. LOCAL_PREF is considered very early in the BGP best path selection process (before AS path length). This behavior makes LOCAL_PREF an ideal attribute when implementing a consistent BGP path selection across a whole autonomous system. We\u2019ll use the above behavior to implement a straightforward routing policy: Set the default local preference on C1 to 200 (making it better than the built-in default value) Set the default local preference on C2 to 50 (making it worse than the built-in default). Some BGP implementations allow you to change the default local preference value with a configuration command similar to bgp default local-preference . If your implementation does not support changing the default LOCAL_PREF value, you\u2019ll have to use a routing policy (often called a route-map ) attached to a BGP neighbor to modify it. Tip If you\u2019re using a network device that cannot change the default LOCAL_PREF value (example: Arista EOS), then you\u2019re probably already familiar with route maps. You might have been using them in the Filter Transit Routes or Filter Advertised Prefixes exercises. Warning Applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change the BGP table, as the new routing policy might be evaluated only on new incoming updates. You might have to use a command similar to clear ip bgp * soft in to tell your router to ask its neighbors to resend their BGP updates.","title":"Using BGP Local Preference"},{"location":"policy/5-local-preference/#verification","text":"Examine the BGP table on C2 to verify that the routes advertised by C1 (next hop: 10.0.0.1) have a higher local preference and are preferred over routes received from X1 (next hop: 10.1.0.6). This is a printout you should get on Arista EOS: c2#show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.0.0.1 0 - 200 0 65100 i * 0.0.0.0/0 10.1.0.6 0 - 50 0 65100 i * > 192.168.42.0/24 - - - - 0 i * 192.168.42.0/24 10.0.0.1 0 - 100 0 i * > 192.168.100.0/24 10.0.0.1 0 - 200 0 65100 i * 192.168.100.0/24 10.1.0.6 0 - 50 0 65100 i You could dig deeper and examine the details of an IPv4 prefix that originated in AS 65100, for example, 192.168.100.0/24 : c2#show ip bgp 192.168.100.0/24 BGP routing table information for VRF default Router identifier 10.0.0.2, local AS number 65000 BGP routing table entry for 192.168.100.0/24 Paths: 2 available 65100 10.0.0.1 from 10.0.0.1 (10.0.0.1) Origin IGP, metric 0, localpref 200, IGP metric 20, weight 0, tag 0 Received 00:03:44 ago, valid, internal, best Rx SAFI: Unicast 65100 10.1.0.6 from 10.1.0.6 (10.0.0.11) Origin IGP, metric 0, localpref 50, IGP metric 0, weight 0, tag 0 Received 00:33:52 ago, valid, external Rx SAFI: Unicast Next: Use MED to Influence Incoming Traffic Flow Using BGP Local Preference in a Complex Routing Policy","title":"Verification"},{"location":"policy/5-local-preference/#reference-information","text":"The following information might be helpful if you\u2019re not using netlab to build the lab:","title":"Reference Information"},{"location":"policy/5-local-preference/#lab-wiring","text":"This lab uses a subset of the 4-router lab topology . Some links are unused to retain the interface names from that topology. Link Name Origin Device Origin Port Destination Device Destination Port Primary uplink c1 Ethernet1 x1 swp1 Unused link c1 Ethernet2 x2 swp1 ISP internal link x1 swp2 x2 swp2 Unused link c2 Ethernet1 x1 swp3 Backup uplink c2 Ethernet2 x2 swp3 Customer internal link c1 Ethernet3 c2 Ethernet3","title":"Lab Wiring"},{"location":"policy/5-local-preference/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 Primary uplink Ethernet2 Unused link Ethernet3 192.168.42.1/24 Customer internal link c2 10.0.0.2/32 Loopback Ethernet1 Unused link Ethernet2 10.1.0.5/30 Backup uplink Ethernet3 192.168.42.2/24 Customer internal link x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 Primary uplink swp2 192.168.100.10/24 ISP internal link swp3 Unused link x2 10.0.0.11/32 Loopback swp1 Unused link swp2 192.168.100.11/24 ISP internal link swp3 10.1.0.6/30 Backup uplink","title":"Lab Addressing"},{"location":"policy/6-med/","text":"Use MED to Influence Incoming Traffic Flow In previous lab exercises, you used BGP weights and BGP local preference to change the BGP tables on your routers, thus changing the outgoing traffic flow . In this exercise we\u2019ll try to change the incoming traffic flow with BGP Multi-Exit Discriminator (MED) attribute. Warning Changing incoming traffic flow is more critical for networks that are not content providers. It\u2019s also much more challenging than changing the outgoing traffic flow, as you must try to influence the BGP tables on other people\u2019s routers. Existing Router Configuration The routers in your lab use the following BGP AS numbers. Each autonomous system advertises an IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID Advertised prefixes AS65000 (customer) c1 10.0.0.1 192.168.42.0/24 c2 10.0.0.2 192.168.42.0/24 AS65100 (ISP) x1 10.0.0.10 192.168.100.0/24 x2 10.0.0.11 192.168.100.0/24 Your routers have these BGP neighbors: Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 c1 10.0.0.1 65000 c2 65000 10.0.0.2 x1 65100 10.1.0.2 c2 10.0.0.2 65000 c1 65000 10.0.0.1 x2 65100 10.1.0.6 Your network is also running OSPF in the backbone area: Router Interface IPv4 Address Neighbor(s) c1 Loopback 10.0.0.1/32 Ethernet3 192.168.42.1/24 c2 c2 Loopback 10.0.0.2/32 Ethernet3 192.168.42.2/24 c1 Start the Lab Assuming you already set up your lab infrastructure : Change directory to policy/6-med Execute netlab up to start the lab using the usual external devices for X1 and X2, or netlab up single.yml to start the lab that uses only your chosen devices 1 . You can also run this lab without using netlab Log into your devices (C1 and C2) with netlab connect and verify their configurations. Tip netlab will configure IP addressing, OSPF, BGP, IBGP sessions, EBGP sessions, and BGP prefix advertisements on your routers. If you\u2019re not using netlab you\u2019ll have to configure your routers manually. Check the BGP Tables on External Routers Log into X1 and X2 and check their BGP tables. Use sudo vtysh -c 'show ip bgp' command if you\u2019re running Cumulus Linux on external routers: $ netlab connect x1 sudo vtysh -c 'show ip bgp 192.168.42.0' Connecting to container clab-med-x1, executing sudo vtysh -c \"show ip bgp 192.168.42.0\" BGP routing table entry for 192.168.42.0/24 Paths: (2 available, best #2, table default) Advertised to non peer-group peers: x2(10.0.0.11) 10.1.0.1 65000 10.0.0.11 (metric 10) from x2(10.0.0.11) (10.0.0.11) Origin IGP, localpref 100, valid, internal Last update: Mon Nov 6 07:08:30 2023 65000 10.1.0.1 from 10.1.0.1 (10.0.0.1) Origin IGP, valid, external, bestpath-from-AS 65000, best (Peer Type) Last update: Mon Nov 6 07:08:12 2023 $ netlab connect x2 sudo vtysh -c 'show ip bgp 192.168.42.0' Connecting to container clab-med-x2, executing sudo vtysh -c \"show ip bgp 192.168.42.0\" BGP routing table entry for 192.168.42.0/24 Paths: (2 available, best #2, table default) Advertised to non peer-group peers: x1(10.0.0.10) 10.1.0.5 65000 10.0.0.10 (metric 10) from x1(10.0.0.10) (10.0.0.10) Origin IGP, localpref 100, valid, internal Last update: Mon Nov 6 07:08:29 2023 65000 10.1.0.5 from 10.1.0.5 (10.0.0.2) Origin IGP, valid, external, bestpath-from-AS 65000, best (Peer Type) Last update: Mon Nov 6 07:08:11 2023 X1 and X2 prefer EBGP path to the customer prefix ( 192.168.42.0/24 ) over the IBGP path. The distinction between the two paths is small enough for MED to work. Using BGP Multi-Exit Discriminator (MED) The Border Gateway Protocol 4 (BGP-4) RFC (RFC 4271) defines the MULTI_EXIT_DISC attribute as an optional attribute that is intended to be used on external (inter-AS) links to discriminate among multiple exit or entry points to the same neighboring AS. The first limitation of MED is that it can only influence incoming traffic flow if your network connects to a single upstream network. RFC 4271 also defines how to use MED: \u201c All other factors being equal, the exit point with the lower metric SHOULD be preferred. \u201d MED is a very weak metric considered at the very end of the BGP path selection process. You can use it to influence incoming traffic only if the upstream network uses no other routing policy. Finally, RFC 4271 defines MED propagation rules: MED can be used on EBGP sessions. If received over EBGP, the MED attribute MAY be propagated over IBGP to other BGP speakers within the same AS. The MED attribute received from a neighboring AS MUST NOT be propagated to other neighboring ASes. We\u2019ll use the above behavior to implement a straightforward routing policy: Set the MED on routes advertised from C1 to X1 to 50 Set the MED on routes advertised from C2 to X2 to 100 (remember: higher MED is worse). You will probably have to configure a routing policy (often called a route-map ) on C1 and C2 to change the MED, and then apply the routing policy as the outbound policy on the EBGP neighbors. Warning Applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change the BGP table as the new routing policy might be evaluated only on new incoming updates. You might have to use a command similar to clear ip bgp * soft to tell your routers to resend their BGP updates. Verification Examine the BGP tables on X1 and X2 to verify that the routes from AS 65000 have the desired metric. This is a printout you should get on X2 running Cumulus Linux: $ netlab connect x2 sudo vtysh -c 'show ip bgp 192.168.42.0' Connecting to container clab-med-x2, executing sudo vtysh -c \"show ip bgp 192.168.42.0\" BGP routing table entry for 192.168.42.0/24 Paths: (2 available, best #1, table default) Advertised to non peer-group peers: 10.1.0.5 65000 10.0.0.10 (metric 10) from x1(10.0.0.10) (10.0.0.10) Origin IGP, metric 50, localpref 100, valid, internal, bestpath-from-AS 65000, best (MED) Last update: Mon Nov 6 07:36:36 2023 65000 10.1.0.5 from 10.1.0.5 (10.0.0.2) Origin IGP, metric 100, valid, external Last update: Mon Nov 6 07:36:36 2023 X2 has two paths toward 192.168.42.0 : IBGP path received from 10.0.0.10 (X1) with metric 50. This is the best path due to MED value. EBGP path received from 10.1.0.5 (C2) with metric 100. This is a valid path, but not the best. If you get a similar printout in your lab, you accomplished your mission \u2013 you managed to change the incoming traffic flow to avoid the C2-X2 link. Warning In real life, you cannot log into other people\u2019s routers. In most cases, you\u2019re limited to observing the incoming traffic counters on your uplinks and hoping for the best. You might be able to use looking glasses (if available) in adjacent networks to inspect their BGP tables or use the traceroute tool from a remote vantage point (for example, your laptop tethered to a mobile Internet connection) to check the traffic flow into your network. Next: Use AS-Path Prepending to Influence Incoming Traffic Flow Reference Information You might find the following information useful if you\u2019re not using netlab to build the lab: Lab Wiring This lab uses a subset of the 4-router lab topology . Some links are unused to retain the interface names from that topology. Link Name Origin Device Origin Port Destination Device Destination Port Primary uplink c1 Ethernet1 x1 swp1 Unused link c1 Ethernet2 x2 swp1 ISP internal link x1 swp2 x2 swp2 Unused link c2 Ethernet1 x1 swp3 Backup uplink c2 Ethernet2 x2 swp3 Customer internal link c1 Ethernet3 c2 Ethernet3 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 Primary uplink Ethernet2 Unused link Ethernet3 192.168.42.1/24 Customer internal link c2 10.0.0.2/32 Loopback Ethernet1 Unused link Ethernet2 10.1.0.5/30 Backup uplink Ethernet3 192.168.42.2/24 Customer internal link x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 Primary uplink swp2 192.168.100.10/24 ISP internal link swp3 Unused link x2 10.0.0.11/32 Loopback swp1 Unused link swp2 192.168.100.11/24 ISP internal link swp3 10.1.0.6/30 Backup uplink Using your chosen devices in the ISP network might make it easier to check the status of the BGP tables on X1 and X2. It will also consume more memory (Cumulus Linux and FRR are very memory-efficient). \u21a9","title":"Use MED to Influence Incoming Traffic Flow"},{"location":"policy/6-med/#use-med-to-influence-incoming-traffic-flow","text":"In previous lab exercises, you used BGP weights and BGP local preference to change the BGP tables on your routers, thus changing the outgoing traffic flow . In this exercise we\u2019ll try to change the incoming traffic flow with BGP Multi-Exit Discriminator (MED) attribute. Warning Changing incoming traffic flow is more critical for networks that are not content providers. It\u2019s also much more challenging than changing the outgoing traffic flow, as you must try to influence the BGP tables on other people\u2019s routers.","title":"Use MED to Influence Incoming Traffic Flow"},{"location":"policy/6-med/#existing-router-configuration","text":"The routers in your lab use the following BGP AS numbers. Each autonomous system advertises an IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID Advertised prefixes AS65000 (customer) c1 10.0.0.1 192.168.42.0/24 c2 10.0.0.2 192.168.42.0/24 AS65100 (ISP) x1 10.0.0.10 192.168.100.0/24 x2 10.0.0.11 192.168.100.0/24 Your routers have these BGP neighbors: Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 c1 10.0.0.1 65000 c2 65000 10.0.0.2 x1 65100 10.1.0.2 c2 10.0.0.2 65000 c1 65000 10.0.0.1 x2 65100 10.1.0.6 Your network is also running OSPF in the backbone area: Router Interface IPv4 Address Neighbor(s) c1 Loopback 10.0.0.1/32 Ethernet3 192.168.42.1/24 c2 c2 Loopback 10.0.0.2/32 Ethernet3 192.168.42.2/24 c1","title":"Existing Router Configuration"},{"location":"policy/6-med/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to policy/6-med Execute netlab up to start the lab using the usual external devices for X1 and X2, or netlab up single.yml to start the lab that uses only your chosen devices 1 . You can also run this lab without using netlab Log into your devices (C1 and C2) with netlab connect and verify their configurations. Tip netlab will configure IP addressing, OSPF, BGP, IBGP sessions, EBGP sessions, and BGP prefix advertisements on your routers. If you\u2019re not using netlab you\u2019ll have to configure your routers manually.","title":"Start the Lab"},{"location":"policy/6-med/#check-the-bgp-tables-on-external-routers","text":"Log into X1 and X2 and check their BGP tables. Use sudo vtysh -c 'show ip bgp' command if you\u2019re running Cumulus Linux on external routers: $ netlab connect x1 sudo vtysh -c 'show ip bgp 192.168.42.0' Connecting to container clab-med-x1, executing sudo vtysh -c \"show ip bgp 192.168.42.0\" BGP routing table entry for 192.168.42.0/24 Paths: (2 available, best #2, table default) Advertised to non peer-group peers: x2(10.0.0.11) 10.1.0.1 65000 10.0.0.11 (metric 10) from x2(10.0.0.11) (10.0.0.11) Origin IGP, localpref 100, valid, internal Last update: Mon Nov 6 07:08:30 2023 65000 10.1.0.1 from 10.1.0.1 (10.0.0.1) Origin IGP, valid, external, bestpath-from-AS 65000, best (Peer Type) Last update: Mon Nov 6 07:08:12 2023 $ netlab connect x2 sudo vtysh -c 'show ip bgp 192.168.42.0' Connecting to container clab-med-x2, executing sudo vtysh -c \"show ip bgp 192.168.42.0\" BGP routing table entry for 192.168.42.0/24 Paths: (2 available, best #2, table default) Advertised to non peer-group peers: x1(10.0.0.10) 10.1.0.5 65000 10.0.0.10 (metric 10) from x1(10.0.0.10) (10.0.0.10) Origin IGP, localpref 100, valid, internal Last update: Mon Nov 6 07:08:29 2023 65000 10.1.0.5 from 10.1.0.5 (10.0.0.2) Origin IGP, valid, external, bestpath-from-AS 65000, best (Peer Type) Last update: Mon Nov 6 07:08:11 2023 X1 and X2 prefer EBGP path to the customer prefix ( 192.168.42.0/24 ) over the IBGP path. The distinction between the two paths is small enough for MED to work.","title":"Check the BGP Tables on External Routers"},{"location":"policy/6-med/#using-bgp-multi-exit-discriminator-med","text":"The Border Gateway Protocol 4 (BGP-4) RFC (RFC 4271) defines the MULTI_EXIT_DISC attribute as an optional attribute that is intended to be used on external (inter-AS) links to discriminate among multiple exit or entry points to the same neighboring AS. The first limitation of MED is that it can only influence incoming traffic flow if your network connects to a single upstream network. RFC 4271 also defines how to use MED: \u201c All other factors being equal, the exit point with the lower metric SHOULD be preferred. \u201d MED is a very weak metric considered at the very end of the BGP path selection process. You can use it to influence incoming traffic only if the upstream network uses no other routing policy. Finally, RFC 4271 defines MED propagation rules: MED can be used on EBGP sessions. If received over EBGP, the MED attribute MAY be propagated over IBGP to other BGP speakers within the same AS. The MED attribute received from a neighboring AS MUST NOT be propagated to other neighboring ASes. We\u2019ll use the above behavior to implement a straightforward routing policy: Set the MED on routes advertised from C1 to X1 to 50 Set the MED on routes advertised from C2 to X2 to 100 (remember: higher MED is worse). You will probably have to configure a routing policy (often called a route-map ) on C1 and C2 to change the MED, and then apply the routing policy as the outbound policy on the EBGP neighbors. Warning Applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change the BGP table as the new routing policy might be evaluated only on new incoming updates. You might have to use a command similar to clear ip bgp * soft to tell your routers to resend their BGP updates.","title":"Using BGP Multi-Exit Discriminator (MED)"},{"location":"policy/6-med/#verification","text":"Examine the BGP tables on X1 and X2 to verify that the routes from AS 65000 have the desired metric. This is a printout you should get on X2 running Cumulus Linux: $ netlab connect x2 sudo vtysh -c 'show ip bgp 192.168.42.0' Connecting to container clab-med-x2, executing sudo vtysh -c \"show ip bgp 192.168.42.0\" BGP routing table entry for 192.168.42.0/24 Paths: (2 available, best #1, table default) Advertised to non peer-group peers: 10.1.0.5 65000 10.0.0.10 (metric 10) from x1(10.0.0.10) (10.0.0.10) Origin IGP, metric 50, localpref 100, valid, internal, bestpath-from-AS 65000, best (MED) Last update: Mon Nov 6 07:36:36 2023 65000 10.1.0.5 from 10.1.0.5 (10.0.0.2) Origin IGP, metric 100, valid, external Last update: Mon Nov 6 07:36:36 2023 X2 has two paths toward 192.168.42.0 : IBGP path received from 10.0.0.10 (X1) with metric 50. This is the best path due to MED value. EBGP path received from 10.1.0.5 (C2) with metric 100. This is a valid path, but not the best. If you get a similar printout in your lab, you accomplished your mission \u2013 you managed to change the incoming traffic flow to avoid the C2-X2 link. Warning In real life, you cannot log into other people\u2019s routers. In most cases, you\u2019re limited to observing the incoming traffic counters on your uplinks and hoping for the best. You might be able to use looking glasses (if available) in adjacent networks to inspect their BGP tables or use the traceroute tool from a remote vantage point (for example, your laptop tethered to a mobile Internet connection) to check the traffic flow into your network. Next: Use AS-Path Prepending to Influence Incoming Traffic Flow","title":"Verification"},{"location":"policy/6-med/#reference-information","text":"You might find the following information useful if you\u2019re not using netlab to build the lab:","title":"Reference Information"},{"location":"policy/6-med/#lab-wiring","text":"This lab uses a subset of the 4-router lab topology . Some links are unused to retain the interface names from that topology. Link Name Origin Device Origin Port Destination Device Destination Port Primary uplink c1 Ethernet1 x1 swp1 Unused link c1 Ethernet2 x2 swp1 ISP internal link x1 swp2 x2 swp2 Unused link c2 Ethernet1 x1 swp3 Backup uplink c2 Ethernet2 x2 swp3 Customer internal link c1 Ethernet3 c2 Ethernet3","title":"Lab Wiring"},{"location":"policy/6-med/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 Primary uplink Ethernet2 Unused link Ethernet3 192.168.42.1/24 Customer internal link c2 10.0.0.2/32 Loopback Ethernet1 Unused link Ethernet2 10.1.0.5/30 Backup uplink Ethernet3 192.168.42.2/24 Customer internal link x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 Primary uplink swp2 192.168.100.10/24 ISP internal link swp3 Unused link x2 10.0.0.11/32 Loopback swp1 Unused link swp2 192.168.100.11/24 ISP internal link swp3 10.1.0.6/30 Backup uplink Using your chosen devices in the ISP network might make it easier to check the status of the BGP tables on X1 and X2. It will also consume more memory (Cumulus Linux and FRR are very memory-efficient). \u21a9","title":"Lab Addressing"},{"location":"policy/7-prepend/","text":"Use AS-Path Prepending to Influence Incoming Traffic Flow In the previous lab exercises you used BGP Multi-Exit Discriminator to tell routers in an adjacent autonomous system which link(s) you prefer. That approach no longer works if your BGP router has connections to multiple upstream autonomous systems. Influencing incoming traffic flow in scenarios with multiple upstream Service Providers is more art than science. The most straightforward tool you can try is AS-path prepending: adding multiple copies of your AS number to the AS path, hoping that the default BGP route selection process in upstream routers results in the desired traffic flow. In this lab, you\u2019ll configure the AS path prepending on the updates sent to X2, trying to persuade X2 to use the path through X1 to reach your network. Existing BGP Configuration The routers in your lab use the following BGP AS numbers. Each autonomous system advertises a single IPv4 prefix. Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 192.168.42.0/24 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 rtr 10.0.0.1 65000 x1 65100 10.1.0.2 x2 65101 10.1.0.6 Start the Lab Assuming you already set up your lab infrastructure : Change directory to policy/7-prepend Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you\u2019re not using netlab just continue with the configuration you made during the Advertise IPv4 Prefixes to BGP Neighbors or Select Preferred EBGP Peer with Weights exercises. What Do We Have to Fix? Log into X2 and check its BGP table. Use sudo vtysh -c 'show ip bgp' command if you\u2019re running Cumulus Linux on X2: $ netlab connect x2 sudo vtysh -c 'show ip bgp' Connecting to container clab-prepend-x2, executing sudo vtysh -c \"show ip bgp\" BGP table version is 3, local router ID is 10.0.0.11, vrf id 0 Default local pref 100, local AS 65101 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path * 192.168.42.0/24 10.1.0.9 0 65100 65000 ? *> 10.1.0.5 0 65000 ? * 192.168.100.0/24 10.1.0.5 0 65000 65100 i *> 10.1.0.9 0 0 65100 i *> 192.168.101.0/24 0.0.0.0 0 32768 i Displayed 3 routes and 5 total paths As expected, while X2 receives a route to 192.168.42.0/24 from X1, it prefers the one received from your router over the RTR-X2 link. Cumulus Linux explains how it selected the best BGP route in its detailed BGP prefix information printout \u2013 in this case, X2 chose the route with the shorter AS-path length: $ netlab connect x2 sudo vtysh -c 'show ip bgp 192.168.42.0' Connecting to container clab-prepend-x2, executing sudo vtysh -c \"show ip bgp 192.168.42.0\" BGP routing table entry for 192.168.42.0/24 Paths: (2 available, best #2, table default) Advertised to non peer-group peers: 10.1.0.5 x1(10.1.0.9) 65100 65000 10.1.0.9 from x1(10.1.0.9) (10.0.0.10) Origin incomplete, valid, external, bestpath-from-AS 65100 Last update: Thu Nov 9 09:24:51 2023 65000 10.1.0.5 from 10.1.0.5 (10.0.0.1) Origin incomplete, valid, external, bestpath-from-AS 65000, best (AS Path) Last update: Thu Nov 9 09:24:50 2023 Configuration Tasks You want X2 to prefer routes to your autonomous system going through X1. As X2 selects the best route based on its AS-path length, you\u2019ll artificially increase the length of the AS-path in the updates your router sends to X2. To do that, you\u2019ll have to: Create a simple routing policy (often called a route map ) Configure AS-path prepending in that routing policy. The AS-path X2 receives from X1 has two AS numbers; you\u2019ll have to prepend your AS number at least twice to ensure the direct path is worse than the path X2-X1-RTR. Apply the routing policy to the outgoing updates sent from your router to X2. Warning Some devices allow you to configure either the number of times they prepend your AS number to the AS path or the content of the AS path. Make sure you won\u2019t prepend AS 2 to the AS path. While you can prepend any AS number to the AS path (assuming your device allows you to specify the content of the AS path), never prepend AS numbers other than your own. Applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change their BGP tables; your router might evaluate the new parameters only when sending new updates. You might have to use a command similar to clear ip bgp * soft out to tell your router to resend the BGP updates to its neighbors. Verification Using the commands from the What Do We Have to Fix section, log into X2 and verify that it now prefers the route to 192.168.42.0/24 going through X1. $ netlab connect x2 sudo vtysh -c 'show ip bgp 192.168.42.0' Connecting to container clab-prepend-x2, executing sudo vtysh -c \"show ip bgp 192.168.42.0\" BGP routing table entry for 192.168.42.0/24 Paths: (2 available, best #1, table default) Advertised to non peer-group peers: 10.1.0.5 x1(10.1.0.9) 65100 65000 10.1.0.9 from x1(10.1.0.9) (10.0.0.10) Origin incomplete, valid, external, bestpath-from-AS 65100, best (AS Path) Last update: Thu Nov 9 09:24:51 2023 65000 65000 65000 10.1.0.5 from 10.1.0.5 (10.0.0.1) Origin incomplete, valid, external, bestpath-from-AS 65000 Last update: Thu Nov 9 10:06:39 2023 Reference Information The following information might be helpful if you\u2019re not using netlab to build the lab: Lab Wiring This lab uses a subset of the 4-router lab topology : Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 192.168.101.1/24 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1","title":"Use AS-Path Prepending to Influence Incoming Traffic Flow"},{"location":"policy/7-prepend/#use-as-path-prepending-to-influence-incoming-traffic-flow","text":"In the previous lab exercises you used BGP Multi-Exit Discriminator to tell routers in an adjacent autonomous system which link(s) you prefer. That approach no longer works if your BGP router has connections to multiple upstream autonomous systems. Influencing incoming traffic flow in scenarios with multiple upstream Service Providers is more art than science. The most straightforward tool you can try is AS-path prepending: adding multiple copies of your AS number to the AS path, hoping that the default BGP route selection process in upstream routers results in the desired traffic flow. In this lab, you\u2019ll configure the AS path prepending on the updates sent to X2, trying to persuade X2 to use the path through X1 to reach your network.","title":"Use AS-Path Prepending to Influence Incoming Traffic Flow"},{"location":"policy/7-prepend/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. Each autonomous system advertises a single IPv4 prefix. Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 192.168.42.0/24 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 rtr 10.0.0.1 65000 x1 65100 10.1.0.2 x2 65101 10.1.0.6","title":"Existing BGP Configuration"},{"location":"policy/7-prepend/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to policy/7-prepend Execute netlab up ( other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you\u2019re not using netlab just continue with the configuration you made during the Advertise IPv4 Prefixes to BGP Neighbors or Select Preferred EBGP Peer with Weights exercises.","title":"Start the Lab"},{"location":"policy/7-prepend/#wtf","text":"Log into X2 and check its BGP table. Use sudo vtysh -c 'show ip bgp' command if you\u2019re running Cumulus Linux on X2: $ netlab connect x2 sudo vtysh -c 'show ip bgp' Connecting to container clab-prepend-x2, executing sudo vtysh -c \"show ip bgp\" BGP table version is 3, local router ID is 10.0.0.11, vrf id 0 Default local pref 100, local AS 65101 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path * 192.168.42.0/24 10.1.0.9 0 65100 65000 ? *> 10.1.0.5 0 65000 ? * 192.168.100.0/24 10.1.0.5 0 65000 65100 i *> 10.1.0.9 0 0 65100 i *> 192.168.101.0/24 0.0.0.0 0 32768 i Displayed 3 routes and 5 total paths As expected, while X2 receives a route to 192.168.42.0/24 from X1, it prefers the one received from your router over the RTR-X2 link. Cumulus Linux explains how it selected the best BGP route in its detailed BGP prefix information printout \u2013 in this case, X2 chose the route with the shorter AS-path length: $ netlab connect x2 sudo vtysh -c 'show ip bgp 192.168.42.0' Connecting to container clab-prepend-x2, executing sudo vtysh -c \"show ip bgp 192.168.42.0\" BGP routing table entry for 192.168.42.0/24 Paths: (2 available, best #2, table default) Advertised to non peer-group peers: 10.1.0.5 x1(10.1.0.9) 65100 65000 10.1.0.9 from x1(10.1.0.9) (10.0.0.10) Origin incomplete, valid, external, bestpath-from-AS 65100 Last update: Thu Nov 9 09:24:51 2023 65000 10.1.0.5 from 10.1.0.5 (10.0.0.1) Origin incomplete, valid, external, bestpath-from-AS 65000, best (AS Path) Last update: Thu Nov 9 09:24:50 2023","title":"What Do We Have to Fix?"},{"location":"policy/7-prepend/#configuration-tasks","text":"You want X2 to prefer routes to your autonomous system going through X1. As X2 selects the best route based on its AS-path length, you\u2019ll artificially increase the length of the AS-path in the updates your router sends to X2. To do that, you\u2019ll have to: Create a simple routing policy (often called a route map ) Configure AS-path prepending in that routing policy. The AS-path X2 receives from X1 has two AS numbers; you\u2019ll have to prepend your AS number at least twice to ensure the direct path is worse than the path X2-X1-RTR. Apply the routing policy to the outgoing updates sent from your router to X2. Warning Some devices allow you to configure either the number of times they prepend your AS number to the AS path or the content of the AS path. Make sure you won\u2019t prepend AS 2 to the AS path. While you can prepend any AS number to the AS path (assuming your device allows you to specify the content of the AS path), never prepend AS numbers other than your own. Applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change their BGP tables; your router might evaluate the new parameters only when sending new updates. You might have to use a command similar to clear ip bgp * soft out to tell your router to resend the BGP updates to its neighbors.","title":"Configuration Tasks"},{"location":"policy/7-prepend/#verification","text":"Using the commands from the What Do We Have to Fix section, log into X2 and verify that it now prefers the route to 192.168.42.0/24 going through X1. $ netlab connect x2 sudo vtysh -c 'show ip bgp 192.168.42.0' Connecting to container clab-prepend-x2, executing sudo vtysh -c \"show ip bgp 192.168.42.0\" BGP routing table entry for 192.168.42.0/24 Paths: (2 available, best #1, table default) Advertised to non peer-group peers: 10.1.0.5 x1(10.1.0.9) 65100 65000 10.1.0.9 from x1(10.1.0.9) (10.0.0.10) Origin incomplete, valid, external, bestpath-from-AS 65100, best (AS Path) Last update: Thu Nov 9 09:24:51 2023 65000 65000 65000 10.1.0.5 from 10.1.0.5 (10.0.0.1) Origin incomplete, valid, external, bestpath-from-AS 65000 Last update: Thu Nov 9 10:06:39 2023","title":"Verification"},{"location":"policy/7-prepend/#reference-information","text":"The following information might be helpful if you\u2019re not using netlab to build the lab:","title":"Reference Information"},{"location":"policy/7-prepend/#lab-wiring","text":"This lab uses a subset of the 4-router lab topology : Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2","title":"Lab Wiring"},{"location":"policy/7-prepend/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 192.168.101.1/24 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1","title":"Lab Addressing"},{"location":"policy/a-locpref-route-map/","text":"BGP Local Preference in a Complex Routing Policy In a previous lab exercise, you used BGP local preference to prefer a high-speed uplink over a low-speed uplink . That approach works well if you leave the backup link idle while the primary link is operational. Now, imagine that you want to send at least some of the traffic over the backup link that is connected to a different ISP: In this lab, you\u2019ll create a routing policy using BGP local preference to: Send traffic toward prefixes in AS 65101 over the C2-X2 link Send all other traffic over the C1-X1 link Initial Router Configurations The routers in your lab use the following BGP AS numbers. Each autonomous system advertises an IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID Advertised prefixes AS65000 c1 10.0.0.1 192.168.42.0/24 c2 10.0.0.2 192.168.42.0/24 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Your routers have these BGP neighbors: Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 c1 10.0.0.1 65000 c2 65000 10.0.0.2 x1 65100 10.1.0.2 c2 10.0.0.2 65000 c1 65000 10.0.0.1 x2 65101 10.1.0.10 Your network is also running OSPF in the backbone area: Router Interface IPv4 Address Neighbor(s) c1 Loopback 10.0.0.1/32 Ethernet3 192.168.42.1/24 c2 c2 Loopback 10.0.0.2/32 Ethernet3 192.168.42.2/24 c1 External Autonomous Systems Three other autonomous systems (AS65200, AS65205 and AS65207) are connected to the upstream ISPs: The external autonomous systems advertise these prefixes: Node/ASN Router ID Advertised prefixes AS65200 uc200 192.168.200.1 192.168.200.0/24 AS65205 uc205 192.168.205.1 192.168.205.0/24 AS65207 uc207 192.168.207.1 192.168.207.0/24 The virtual lab topology uses three additional devices to implement the external autonomous systems. If your lab environment is low on memory, or if you want to use lab infrastructure that is not managed by netlab , you can use the common 4-router lab topology with Cumulus Linux as the external devices (additional autonomous systems are emulated during BGP prefix origination on X1 and X2). Start the Lab Assuming you already set up your lab infrastructure : Change directory to policy/a-locpref-route-map Execute netlab up if you have enough memory to start a 7-node lab or netlab up topology.extra.yml if you want to create a 4-node lab 1 . You can also deploy the lab on your lab infrastructure . Log into your devices (C1 and C2) with netlab connect and verify their configurations. Note: netlab will configure IP addressing, OSPF, BGP, IBGP sessions, EBGP sessions, and BGP prefix advertisements on your routers. If you\u2019re not using netlab , you must manually configure your routers. Default Outgoing Traffic Flow After starting the lab, log into C2 and examine its BGP table. You should get a printout similar to this one (generated on Arista cEOS): c2>show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.10 0 - 100 0 65101 i * 0.0.0.0/0 10.0.0.1 0 - 100 0 65100 i * > 192.168.42.0/24 - - - - 0 i * 192.168.42.0/24 10.0.0.1 0 - 100 0 i * > 192.168.100.0/24 10.0.0.1 0 - 100 0 65100 i * 192.168.100.0/24 10.1.0.10 0 - 100 0 65101 65100 i * > 192.168.101.0/24 10.1.0.10 0 - 100 0 65101 i * > 192.168.200.0/24 10.0.0.1 0 - 100 0 65100 65200 i * 192.168.200.0/24 10.1.0.10 0 - 100 0 65101 65100 65200 i * > 192.168.205.0/24 10.1.0.10 0 - 100 0 65101 65205 i * 192.168.205.0/24 10.0.0.1 0 - 100 0 65100 65205 i * > 192.168.207.0/24 10.1.0.10 0 - 100 0 65101 65207 i As you can see, C2 uses the C2-X2 link to reach AS 65100, AS 65205, and AS 65207. It also uses the C2-X2 link to reach unknown destinations (the default route points to X2). Hint: there\u2019s an easier way to find BGP prefixes using the C2-X2 link if your devices support printout filters with regular expressions \u2013 match all lines that include the \u2018>\u2019 character (best route) and 10.1.0.10 (the next hop): c2>show ip bgp | include >.*10.1.0.10 * > 0.0.0.0/0 10.1.0.10 0 - 100 0 65101 i * > 192.168.101.0/24 10.1.0.10 0 - 100 0 65101 i * > 192.168.205.0/24 10.1.0.10 0 - 100 0 65101 65205 i * > 192.168.207.0/24 10.1.0.10 0 - 100 0 65101 65207 i Implement Complex Routing Policy We want to use the C2-X2 link only for the traffic toward destinations in AS65101 \u2013 you will have to create a routing policy on C2 that will: Increase the local preference for BGP prefixes originating in AS 65101 (where the AS path ends with 65101) Decrease the local preference for the default route \u2013 BGP routers advertise the default route as belonging to their autonomous system Decrease the local preference for all other BGP prefixes received from AS 65101 Hint: you have probably used routing policies (often called route maps ) in previous lab exercises . You have also practiced: AS-path filters in the Filter Transit Routes exercise Prefix filters in the Minimize the Size of Your BGP Table exercise Warning Applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change the BGP table, as the new routing policy might be evaluated only on new incoming updates. You might have to use a command similar to clear ip bgp * soft in to tell your router to ask its neighbors to resend their BGP updates. Verification Examine the BGP table on C2 to verify the local preference of routes received from X2. You could use the simple show ip bgp command and sift through the printout, or use printout filters matching on the next hop ( 10.1.0.10 ), or display routes from a specific neighbor (assuming your device supports that) 2 . The following printout uses the last mechanism on Arista cEOS: c2#show ip bgp neighbors 10.1.0.10 routes | begin Network Network Next Hop Metric AIGP LocPref Weight Path * 0.0.0.0/0 10.1.0.10 0 - 50 0 65101 i * 192.168.100.0/24 10.1.0.10 0 - 50 0 65101 65100 i * > 192.168.101.0/24 10.1.0.10 0 - 200 0 65101 i * 192.168.200.0/24 10.1.0.10 0 - 50 0 65101 65100 65200 i * 192.168.205.0/24 10.1.0.10 0 - 50 0 65101 65205 i * 192.168.207.0/24 10.1.0.10 0 - 50 0 65101 65207 i As you can see: Routes originating in AS 65101 have local preference 200 and are used as the best routes All other routes advertised by AS 65101 have local preference 50 and are not used. Finally, you should log into C1 and examine routes received from C2. C1 should use C2 only to reach 192.168.101/24 . c1>show ip bgp neighbors 10.0.0.2 routes | begin Network Network Next Hop Metric AIGP LocPref Weight Path * 192.168.42.0/24 10.0.0.2 0 - 100 0 i * > 192.168.101.0/24 10.0.0.2 0 - 200 0 65101 i Tip C2 does not advertise routes it does not use to C1, so you won\u2019t be able to see any other routes from the C2 BGP table on C1. Reference Information The following information might help you if you\u2019re not using netlab to build the lab: Lab Wiring This lab uses a subset of the 4-router lab topology . Some links are unused to retain the interface names from that topology. Link Name Origin Device Origin Port Destination Device Destination Port Primary uplink c1 Ethernet1 x1 swp1 Unused link c1 Ethernet2 x2 swp1 Inter-ISP link x1 swp2 x2 swp2 Unused link c2 Ethernet1 x1 swp3 Backup uplink c2 Ethernet2 x2 swp3 Customer internal link c1 Ethernet3 c2 Ethernet3 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 Primary uplink Ethernet2 Unused link Ethernet3 192.168.42.1/24 Customer internal link c2 10.0.0.2/32 Loopback Ethernet1 Unused link Ethernet2 10.1.0.9/30 Backup uplink Ethernet3 192.168.42.2/24 Customer internal link x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 Primary uplink swp2 10.1.0.5/30 Inter-ISP link swp3 Unused link x2 192.168.101.1/24 Loopback swp1 Unused link swp2 10.1.0.6/30 Inter-ISP link swp3 10.1.0.10/30 Backup uplink The 4-node lab needs additional device configuration on X1 and X2. That configuration is only available for Arista EOS, Cumulus Linux, and FRR. \u21a9 Some devices (example: Arista cEOS) can display routes received from a neighbor (before being processed by inbound routing policies) and routes received and accepted from a neighbor (after the routing policies). Make sure you use the correct form of the show command. \u21a9","title":"BGP Local Preference in a Complex Routing Policy"},{"location":"policy/a-locpref-route-map/#bgp-local-preference-in-a-complex-routing-policy","text":"In a previous lab exercise, you used BGP local preference to prefer a high-speed uplink over a low-speed uplink . That approach works well if you leave the backup link idle while the primary link is operational. Now, imagine that you want to send at least some of the traffic over the backup link that is connected to a different ISP: In this lab, you\u2019ll create a routing policy using BGP local preference to: Send traffic toward prefixes in AS 65101 over the C2-X2 link Send all other traffic over the C1-X1 link","title":"BGP Local Preference in a Complex Routing Policy"},{"location":"policy/a-locpref-route-map/#initial-router-configurations","text":"The routers in your lab use the following BGP AS numbers. Each autonomous system advertises an IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID Advertised prefixes AS65000 c1 10.0.0.1 192.168.42.0/24 c2 10.0.0.2 192.168.42.0/24 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Your routers have these BGP neighbors: Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 c1 10.0.0.1 65000 c2 65000 10.0.0.2 x1 65100 10.1.0.2 c2 10.0.0.2 65000 c1 65000 10.0.0.1 x2 65101 10.1.0.10 Your network is also running OSPF in the backbone area: Router Interface IPv4 Address Neighbor(s) c1 Loopback 10.0.0.1/32 Ethernet3 192.168.42.1/24 c2 c2 Loopback 10.0.0.2/32 Ethernet3 192.168.42.2/24 c1","title":"Initial Router Configurations"},{"location":"policy/a-locpref-route-map/#external-autonomous-systems","text":"Three other autonomous systems (AS65200, AS65205 and AS65207) are connected to the upstream ISPs: The external autonomous systems advertise these prefixes: Node/ASN Router ID Advertised prefixes AS65200 uc200 192.168.200.1 192.168.200.0/24 AS65205 uc205 192.168.205.1 192.168.205.0/24 AS65207 uc207 192.168.207.1 192.168.207.0/24 The virtual lab topology uses three additional devices to implement the external autonomous systems. If your lab environment is low on memory, or if you want to use lab infrastructure that is not managed by netlab , you can use the common 4-router lab topology with Cumulus Linux as the external devices (additional autonomous systems are emulated during BGP prefix origination on X1 and X2).","title":"External Autonomous Systems"},{"location":"policy/a-locpref-route-map/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to policy/a-locpref-route-map Execute netlab up if you have enough memory to start a 7-node lab or netlab up topology.extra.yml if you want to create a 4-node lab 1 . You can also deploy the lab on your lab infrastructure . Log into your devices (C1 and C2) with netlab connect and verify their configurations. Note: netlab will configure IP addressing, OSPF, BGP, IBGP sessions, EBGP sessions, and BGP prefix advertisements on your routers. If you\u2019re not using netlab , you must manually configure your routers.","title":"Start the Lab"},{"location":"policy/a-locpref-route-map/#default-outgoing-traffic-flow","text":"After starting the lab, log into C2 and examine its BGP table. You should get a printout similar to this one (generated on Arista cEOS): c2>show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.10 0 - 100 0 65101 i * 0.0.0.0/0 10.0.0.1 0 - 100 0 65100 i * > 192.168.42.0/24 - - - - 0 i * 192.168.42.0/24 10.0.0.1 0 - 100 0 i * > 192.168.100.0/24 10.0.0.1 0 - 100 0 65100 i * 192.168.100.0/24 10.1.0.10 0 - 100 0 65101 65100 i * > 192.168.101.0/24 10.1.0.10 0 - 100 0 65101 i * > 192.168.200.0/24 10.0.0.1 0 - 100 0 65100 65200 i * 192.168.200.0/24 10.1.0.10 0 - 100 0 65101 65100 65200 i * > 192.168.205.0/24 10.1.0.10 0 - 100 0 65101 65205 i * 192.168.205.0/24 10.0.0.1 0 - 100 0 65100 65205 i * > 192.168.207.0/24 10.1.0.10 0 - 100 0 65101 65207 i As you can see, C2 uses the C2-X2 link to reach AS 65100, AS 65205, and AS 65207. It also uses the C2-X2 link to reach unknown destinations (the default route points to X2). Hint: there\u2019s an easier way to find BGP prefixes using the C2-X2 link if your devices support printout filters with regular expressions \u2013 match all lines that include the \u2018>\u2019 character (best route) and 10.1.0.10 (the next hop): c2>show ip bgp | include >.*10.1.0.10 * > 0.0.0.0/0 10.1.0.10 0 - 100 0 65101 i * > 192.168.101.0/24 10.1.0.10 0 - 100 0 65101 i * > 192.168.205.0/24 10.1.0.10 0 - 100 0 65101 65205 i * > 192.168.207.0/24 10.1.0.10 0 - 100 0 65101 65207 i","title":"Default Outgoing Traffic Flow"},{"location":"policy/a-locpref-route-map/#implement-complex-routing-policy","text":"We want to use the C2-X2 link only for the traffic toward destinations in AS65101 \u2013 you will have to create a routing policy on C2 that will: Increase the local preference for BGP prefixes originating in AS 65101 (where the AS path ends with 65101) Decrease the local preference for the default route \u2013 BGP routers advertise the default route as belonging to their autonomous system Decrease the local preference for all other BGP prefixes received from AS 65101 Hint: you have probably used routing policies (often called route maps ) in previous lab exercises . You have also practiced: AS-path filters in the Filter Transit Routes exercise Prefix filters in the Minimize the Size of Your BGP Table exercise Warning Applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change the BGP table, as the new routing policy might be evaluated only on new incoming updates. You might have to use a command similar to clear ip bgp * soft in to tell your router to ask its neighbors to resend their BGP updates.","title":"Implement Complex Routing Policy"},{"location":"policy/a-locpref-route-map/#verification","text":"Examine the BGP table on C2 to verify the local preference of routes received from X2. You could use the simple show ip bgp command and sift through the printout, or use printout filters matching on the next hop ( 10.1.0.10 ), or display routes from a specific neighbor (assuming your device supports that) 2 . The following printout uses the last mechanism on Arista cEOS: c2#show ip bgp neighbors 10.1.0.10 routes | begin Network Network Next Hop Metric AIGP LocPref Weight Path * 0.0.0.0/0 10.1.0.10 0 - 50 0 65101 i * 192.168.100.0/24 10.1.0.10 0 - 50 0 65101 65100 i * > 192.168.101.0/24 10.1.0.10 0 - 200 0 65101 i * 192.168.200.0/24 10.1.0.10 0 - 50 0 65101 65100 65200 i * 192.168.205.0/24 10.1.0.10 0 - 50 0 65101 65205 i * 192.168.207.0/24 10.1.0.10 0 - 50 0 65101 65207 i As you can see: Routes originating in AS 65101 have local preference 200 and are used as the best routes All other routes advertised by AS 65101 have local preference 50 and are not used. Finally, you should log into C1 and examine routes received from C2. C1 should use C2 only to reach 192.168.101/24 . c1>show ip bgp neighbors 10.0.0.2 routes | begin Network Network Next Hop Metric AIGP LocPref Weight Path * 192.168.42.0/24 10.0.0.2 0 - 100 0 i * > 192.168.101.0/24 10.0.0.2 0 - 200 0 65101 i Tip C2 does not advertise routes it does not use to C1, so you won\u2019t be able to see any other routes from the C2 BGP table on C1.","title":"Verification"},{"location":"policy/a-locpref-route-map/#reference-information","text":"The following information might help you if you\u2019re not using netlab to build the lab:","title":"Reference Information"},{"location":"policy/a-locpref-route-map/#lab-wiring","text":"This lab uses a subset of the 4-router lab topology . Some links are unused to retain the interface names from that topology. Link Name Origin Device Origin Port Destination Device Destination Port Primary uplink c1 Ethernet1 x1 swp1 Unused link c1 Ethernet2 x2 swp1 Inter-ISP link x1 swp2 x2 swp2 Unused link c2 Ethernet1 x1 swp3 Backup uplink c2 Ethernet2 x2 swp3 Customer internal link c1 Ethernet3 c2 Ethernet3","title":"Lab Wiring"},{"location":"policy/a-locpref-route-map/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 Primary uplink Ethernet2 Unused link Ethernet3 192.168.42.1/24 Customer internal link c2 10.0.0.2/32 Loopback Ethernet1 Unused link Ethernet2 10.1.0.9/30 Backup uplink Ethernet3 192.168.42.2/24 Customer internal link x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 Primary uplink swp2 10.1.0.5/30 Inter-ISP link swp3 Unused link x2 192.168.101.1/24 Loopback swp1 Unused link swp2 10.1.0.6/30 Inter-ISP link swp3 10.1.0.10/30 Backup uplink The 4-node lab needs additional device configuration on X1 and X2. That configuration is only available for Arista EOS, Cumulus Linux, and FRR. \u21a9 Some devices (example: Arista cEOS) can display routes received from a neighbor (before being processed by inbound routing policies) and routes received and accepted from a neighbor (after the routing policies). Make sure you use the correct form of the show command. \u21a9","title":"Lab Addressing"}]}